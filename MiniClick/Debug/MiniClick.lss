
MiniClick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010e4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000044c  20000000  000010e4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000150  2000044c  00001530  0002044c  2**2
                  ALLOC
  3 .stack        00000404  2000059c  00001680  0002044c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002044c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020474  2**0
                  CONTENTS, READONLY
  6 .debug_info   00021969  00000000  00000000  000204cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003573  00000000  00000000  00041e36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000039fd  00000000  00000000  000453a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000488  00000000  00000000  00048da6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000478  00000000  00000000  0004922e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00013cd1  00000000  00000000  000496a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a355  00000000  00000000  0005d377  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005fc79  00000000  00000000  000676cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000bcc  00000000  00000000  000c7348  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
       0:	a0 09 00 20 fd 0c 00 00 f9 0c 00 00 f9 0c 00 00     ... ............
	...

	uint32_t config_pos = (4 * (channel % 8));
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
      2c:	f9 0c 00 00 00 00 00 00 00 00 00 00 f9 0c 00 00     ................

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
      3c:	f9 0c 00 00 f9 0c 00 00 f9 0c 00 00 f5 06 00 00     ................
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
      4c:	f9 0c 00 00 fd 08 00 00 f9 0c 00 00 f9 0c 00 00     ................

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
      5c:	00 00 00 00 f9 0c 00 00 dd 08 00 00 ed 08 00 00     ................
	...
		EIC_module->WAKEUP.reg |=  (1UL << channel);
      74:	75 07 00 00 85 07 00 00 f9 0c 00 00 00 00 00 00     u...............
      84:	00 00 00 00 f9 0c 00 00                             ........

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	2000044c 	.word	0x2000044c
      ac:	00000000 	.word	0x00000000
      b0:	000010e4 	.word	0x000010e4

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000450 	.word	0x20000450
      e0:	000010e4 	.word	0x000010e4
      e4:	000010e4 	.word	0x000010e4
      e8:	00000000 	.word	0x00000000

000000ec <_i2c_slave_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
      ec:	6803      	ldr	r3, [r0, #0]

	/* Return sync status */
#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CS_SYNCBUSY_MASK);
      ee:	69db      	ldr	r3, [r3, #28]
		const struct i2c_slave_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_slave_is_syncing(module)) {
      f0:	079b      	lsls	r3, r3, #30
      f2:	d1fb      	bne.n	ec <_i2c_slave_wait_for_sync>
		/* Wait for I<SUP>2</SUP>C module to sync */
	}
}
      f4:	4770      	bx	lr
	...

000000f8 <_Z41__static_initialization_and_destruction_0ii>:
// 		port_pin_set_output_level(LED_0_PIN, state);
// 	    state = !state;
// 		delay_cycles_ms(1000);

	}
}
      f8:	2801      	cmp	r0, #1
      fa:	d000      	beq.n	fe <_Z41__static_initialization_and_destruction_0ii+0x6>
      fc:	4770      	bx	lr
      fe:	4b05      	ldr	r3, [pc, #20]	; (114 <_Z41__static_initialization_and_destruction_0ii+0x1c>)
     100:	4299      	cmp	r1, r3
     102:	d1fb      	bne.n	fc <_Z41__static_initialization_and_destruction_0ii+0x4>

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
		return &(ports[port_index]->Group[group_index]);
     104:	4b04      	ldr	r3, [pc, #16]	; (118 <_Z41__static_initialization_and_destruction_0ii+0x20>)
volatile uint32_t *set = &(port_base->OUTSET.reg);
     106:	0019      	movs	r1, r3
     108:	3118      	adds	r1, #24
     10a:	4a04      	ldr	r2, [pc, #16]	; (11c <_Z41__static_initialization_and_destruction_0ii+0x24>)
     10c:	6011      	str	r1, [r2, #0]
volatile uint32_t *clr = &(port_base->OUTCLR.reg);
     10e:	3314      	adds	r3, #20
     110:	6053      	str	r3, [r2, #4]
}
     112:	e7f3      	b.n	fc <_Z41__static_initialization_and_destruction_0ii+0x4>
     114:	0000ffff 	.word	0x0000ffff
     118:	41004400 	.word	0x41004400
     11c:	20000468 	.word	0x20000468

00000120 <_Z25i2c_read_request_callbackP16i2c_slave_module>:
{
     120:	b510      	push	{r4, lr}
	packet.data_length = DATA_LENGTH;
     122:	4904      	ldr	r1, [pc, #16]	; (134 <_Z25i2c_read_request_callbackP16i2c_slave_module+0x14>)
     124:	230a      	movs	r3, #10
     126:	810b      	strh	r3, [r1, #8]
	packet.data        = write_buffer;
     128:	4b03      	ldr	r3, [pc, #12]	; (138 <_Z25i2c_read_request_callbackP16i2c_slave_module+0x18>)
     12a:	60cb      	str	r3, [r1, #12]
	i2c_slave_write_packet_job(module, &packet);
     12c:	3108      	adds	r1, #8
     12e:	4b03      	ldr	r3, [pc, #12]	; (13c <_Z25i2c_read_request_callbackP16i2c_slave_module+0x1c>)
     130:	4798      	blx	r3
}
     132:	bd10      	pop	{r4, pc}
     134:	20000468 	.word	0x20000468
     138:	20000000 	.word	0x20000000
     13c:	0000044b 	.word	0x0000044b

00000140 <_Z26i2c_write_request_callbackP16i2c_slave_module>:
{
     140:	b510      	push	{r4, lr}
	packet.data_length = DATA_LENGTH;
     142:	4905      	ldr	r1, [pc, #20]	; (158 <_Z26i2c_write_request_callbackP16i2c_slave_module+0x18>)
     144:	230a      	movs	r3, #10
     146:	810b      	strh	r3, [r1, #8]
	packet.data        = read_buffer;
     148:	000b      	movs	r3, r1
     14a:	3310      	adds	r3, #16
     14c:	60cb      	str	r3, [r1, #12]
	if (i2c_slave_read_packet_job(module, &packet) != STATUS_OK) {
     14e:	3108      	adds	r1, #8
     150:	4b02      	ldr	r3, [pc, #8]	; (15c <_Z26i2c_write_request_callbackP16i2c_slave_module+0x1c>)
     152:	4798      	blx	r3
}
     154:	bd10      	pop	{r4, pc}
     156:	46c0      	nop			; (mov r8, r8)
     158:	20000468 	.word	0x20000468
     15c:	00000423 	.word	0x00000423

00000160 <_Z19configure_i2c_slavev>:
{
     160:	b530      	push	{r4, r5, lr}
     162:	b08d      	sub	sp, #52	; 0x34
static inline void i2c_slave_get_config_defaults(
		struct i2c_slave_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->enable_scl_low_timeout = false;
     164:	aa02      	add	r2, sp, #8
     166:	2100      	movs	r1, #0
     168:	7011      	strb	r1, [r2, #0]
	config->sda_hold_time = I2C_SLAVE_SDA_HOLD_TIME_300NS_600NS;
     16a:	2380      	movs	r3, #128	; 0x80
     16c:	039b      	lsls	r3, r3, #14
     16e:	6053      	str	r3, [r2, #4]
	config->buffer_timeout = 65535;
     170:	2301      	movs	r3, #1
     172:	425b      	negs	r3, r3
     174:	8113      	strh	r3, [r2, #8]
	config->address_mode = I2C_SLAVE_ADDRESS_MODE_MASK;
     176:	2300      	movs	r3, #0
     178:	8151      	strh	r1, [r2, #10]
	config->address = 0;
	config->address_mask = 0;
     17a:	81d1      	strh	r1, [r2, #14]
#ifdef FEATURE_I2C_10_BIT_ADDRESS
	config->ten_bit_address = false;
     17c:	7413      	strb	r3, [r2, #16]
#endif
	config->enable_general_call_address = false;
     17e:	7453      	strb	r3, [r2, #17]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->transfer_speed = I2C_SLAVE_SPEED_STANDARD_AND_FAST;
     180:	6151      	str	r1, [r2, #20]
#endif
#if I2C_SLAVE_CALLBACK_MODE == true
	config->enable_nack_on_address = false;
     182:	7613      	strb	r3, [r2, #24]
#endif
	config->generator_source = GCLK_GENERATOR_0;
     184:	7653      	strb	r3, [r2, #25]
	config->run_in_standby = false;
     186:	7693      	strb	r3, [r2, #26]
	config->pinmux_pad0 = PINMUX_DEFAULT;
     188:	61d1      	str	r1, [r2, #28]
	config->pinmux_pad1 = PINMUX_DEFAULT;
     18a:	6211      	str	r1, [r2, #32]
	config->scl_low_timeout  = false;
     18c:	3124      	adds	r1, #36	; 0x24
     18e:	5453      	strb	r3, [r2, r1]
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
     190:	3101      	adds	r1, #1
     192:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
     194:	3101      	adds	r1, #1
     196:	5453      	strb	r3, [r2, r1]
	config_i2c_slave.address      = SLAVE_ADDRESS;
     198:	2365      	movs	r3, #101	; 0x65
     19a:	8193      	strh	r3, [r2, #12]
	volatile status_code code = i2c_slave_init(&i2c_slave_instance, SERCOM1, &config_i2c_slave);
     19c:	4c0d      	ldr	r4, [pc, #52]	; (1d4 <_Z19configure_i2c_slavev+0x74>)
     19e:	0025      	movs	r5, r4
     1a0:	351c      	adds	r5, #28
     1a2:	490d      	ldr	r1, [pc, #52]	; (1d8 <_Z19configure_i2c_slavev+0x78>)
     1a4:	0028      	movs	r0, r5
     1a6:	4b0d      	ldr	r3, [pc, #52]	; (1dc <_Z19configure_i2c_slavev+0x7c>)
     1a8:	4798      	blx	r3
     1aa:	466b      	mov	r3, sp
     1ac:	71d8      	strb	r0, [r3, #7]
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     1ae:	69e4      	ldr	r4, [r4, #28]

#if I2C_SLAVE_CALLBACK_MODE == true
	/* Enable global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     1b0:	0020      	movs	r0, r4
     1b2:	4b0b      	ldr	r3, [pc, #44]	; (1e0 <_Z19configure_i2c_slavev+0x80>)
     1b4:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     1b6:	231f      	movs	r3, #31
     1b8:	4018      	ands	r0, r3
     1ba:	3b1e      	subs	r3, #30
     1bc:	4083      	lsls	r3, r0
     1be:	4a09      	ldr	r2, [pc, #36]	; (1e4 <_Z19configure_i2c_slavev+0x84>)
     1c0:	6013      	str	r3, [r2, #0]
#endif

	/* Wait for module to sync */
	_i2c_slave_wait_for_sync(module);
     1c2:	0028      	movs	r0, r5
     1c4:	4b08      	ldr	r3, [pc, #32]	; (1e8 <_Z19configure_i2c_slavev+0x88>)
     1c6:	4798      	blx	r3

	/* Enable module */
	i2c_hw->CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;
     1c8:	6823      	ldr	r3, [r4, #0]
     1ca:	2202      	movs	r2, #2
     1cc:	4313      	orrs	r3, r2
     1ce:	6023      	str	r3, [r4, #0]
}
     1d0:	b00d      	add	sp, #52	; 0x34
     1d2:	bd30      	pop	{r4, r5, pc}
     1d4:	20000468 	.word	0x20000468
     1d8:	42000c00 	.word	0x42000c00
     1dc:	00000279 	.word	0x00000279
     1e0:	000008c1 	.word	0x000008c1
     1e4:	e000e100 	.word	0xe000e100
     1e8:	000000ed 	.word	0x000000ed

000001ec <_Z29configure_i2c_slave_callbacksv>:
{
     1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	I2C_SLAVE_CALLBACK_READ_REQUEST);
     1ee:	4c0d      	ldr	r4, [pc, #52]	; (224 <_Z29configure_i2c_slave_callbacksv+0x38>)
     1f0:	2202      	movs	r2, #2
     1f2:	490d      	ldr	r1, [pc, #52]	; (228 <_Z29configure_i2c_slave_callbacksv+0x3c>)
     1f4:	480d      	ldr	r0, [pc, #52]	; (22c <_Z29configure_i2c_slave_callbacksv+0x40>)
     1f6:	4d0e      	ldr	r5, [pc, #56]	; (230 <_Z29configure_i2c_slave_callbacksv+0x44>)
     1f8:	47a8      	blx	r5
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
     1fa:	2641      	movs	r6, #65	; 0x41
     1fc:	5da3      	ldrb	r3, [r4, r6]
     1fe:	2204      	movs	r2, #4
     200:	4313      	orrs	r3, r2
     202:	b2db      	uxtb	r3, r3
     204:	55a3      	strb	r3, [r4, r6]

	/* Enable address callback */
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
	if (callback_type == I2C_SLAVE_CALLBACK_READ_REQUEST ||
			callback_type == I2C_SLAVE_CALLBACK_WRITE_REQUEST) {
		i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH;
     206:	2702      	movs	r7, #2
     208:	69e3      	ldr	r3, [r4, #28]
     20a:	759f      	strb	r7, [r3, #22]
	I2C_SLAVE_CALLBACK_WRITE_REQUEST);
     20c:	2203      	movs	r2, #3
     20e:	4909      	ldr	r1, [pc, #36]	; (234 <_Z29configure_i2c_slave_callbacksv+0x48>)
     210:	4806      	ldr	r0, [pc, #24]	; (22c <_Z29configure_i2c_slave_callbacksv+0x40>)
     212:	47a8      	blx	r5
	module->enabled_callback |= (1 << callback_type);
     214:	5da3      	ldrb	r3, [r4, r6]
     216:	2208      	movs	r2, #8
     218:	4313      	orrs	r3, r2
     21a:	b2db      	uxtb	r3, r3
     21c:	55a3      	strb	r3, [r4, r6]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     21e:	69e3      	ldr	r3, [r4, #28]
		i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH;
     220:	759f      	strb	r7, [r3, #22]
}
     222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     224:	20000468 	.word	0x20000468
     228:	00000121 	.word	0x00000121
     22c:	20000484 	.word	0x20000484
     230:	00000409 	.word	0x00000409
     234:	00000141 	.word	0x00000141

00000238 <main>:
{
     238:	b510      	push	{r4, lr}
	SystemInit();
     23a:	4b05      	ldr	r3, [pc, #20]	; (250 <main+0x18>)
     23c:	4798      	blx	r3
	delay_init();
     23e:	4b05      	ldr	r3, [pc, #20]	; (254 <main+0x1c>)
     240:	4798      	blx	r3
	system_gclk_init();
     242:	4b05      	ldr	r3, [pc, #20]	; (258 <main+0x20>)
     244:	4798      	blx	r3
	configure_i2c_slave();
     246:	4b05      	ldr	r3, [pc, #20]	; (25c <main+0x24>)
     248:	4798      	blx	r3
	configure_i2c_slave_callbacks();
     24a:	4b05      	ldr	r3, [pc, #20]	; (260 <main+0x28>)
     24c:	4798      	blx	r3
     24e:	e7fe      	b.n	24e <main+0x16>
     250:	00000dcd 	.word	0x00000dcd
     254:	00000951 	.word	0x00000951
     258:	00000a95 	.word	0x00000a95
     25c:	00000161 	.word	0x00000161
     260:	000001ed 	.word	0x000001ed

00000264 <_GLOBAL__sub_I_pinMask>:
}
     264:	b510      	push	{r4, lr}
     266:	4902      	ldr	r1, [pc, #8]	; (270 <_GLOBAL__sub_I_pinMask+0xc>)
     268:	2001      	movs	r0, #1
     26a:	4b02      	ldr	r3, [pc, #8]	; (274 <_GLOBAL__sub_I_pinMask+0x10>)
     26c:	4798      	blx	r3
     26e:	bd10      	pop	{r4, pc}
     270:	0000ffff 	.word	0x0000ffff
     274:	000000f9 	.word	0x000000f9

00000278 <i2c_slave_init>:
 */
enum status_code i2c_slave_init(
		struct i2c_slave_module *const module,
		Sercom *const hw,
		const struct i2c_slave_config *const config)
{
     278:	b5f0      	push	{r4, r5, r6, r7, lr}
     27a:	46ce      	mov	lr, r9
     27c:	4647      	mov	r7, r8
     27e:	b580      	push	{r7, lr}
     280:	b083      	sub	sp, #12
     282:	0005      	movs	r5, r0
     284:	000c      	movs	r4, r1
     286:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     288:	6029      	str	r1, [r5, #0]

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);

	/* Check if module is enabled */
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_ENABLE) {
     28a:	680b      	ldr	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     28c:	201c      	movs	r0, #28
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_ENABLE) {
     28e:	079b      	lsls	r3, r3, #30
     290:	d504      	bpl.n	29c <i2c_slave_init+0x24>
	/* Set SERCOM module to operate in I2C slave mode */
	i2c_hw->CTRLA.reg = SERCOM_I2CS_CTRLA_MODE(0x4);

	/* Set config and return status */
	return _i2c_slave_set_config(module, config);
}
     292:	b003      	add	sp, #12
     294:	bc0c      	pop	{r2, r3}
     296:	4690      	mov	r8, r2
     298:	4699      	mov	r9, r3
     29a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_SWRST) {
     29c:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     29e:	3817      	subs	r0, #23
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_SWRST) {
     2a0:	07db      	lsls	r3, r3, #31
     2a2:	d4f6      	bmi.n	292 <i2c_slave_init+0x1a>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     2a4:	0008      	movs	r0, r1
     2a6:	4b4d      	ldr	r3, [pc, #308]	; (3dc <i2c_slave_init+0x164>)
     2a8:	4699      	mov	r9, r3
     2aa:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     2ac:	4a4c      	ldr	r2, [pc, #304]	; (3e0 <i2c_slave_init+0x168>)
     2ae:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     2b0:	1c83      	adds	r3, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     2b2:	2701      	movs	r7, #1
     2b4:	46b8      	mov	r8, r7
     2b6:	409f      	lsls	r7, r3
     2b8:	003b      	movs	r3, r7
     2ba:	430b      	orrs	r3, r1
     2bc:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     2be:	a901      	add	r1, sp, #4
     2c0:	7e73      	ldrb	r3, [r6, #25]
     2c2:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     2c4:	300e      	adds	r0, #14
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     2c6:	b2c3      	uxtb	r3, r0
     2c8:	001f      	movs	r7, r3
     2ca:	0018      	movs	r0, r3
     2cc:	4b45      	ldr	r3, [pc, #276]	; (3e4 <i2c_slave_init+0x16c>)
     2ce:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     2d0:	0038      	movs	r0, r7
     2d2:	4b45      	ldr	r3, [pc, #276]	; (3e8 <i2c_slave_init+0x170>)
     2d4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     2d6:	7e70      	ldrb	r0, [r6, #25]
     2d8:	2100      	movs	r1, #0
     2da:	4b44      	ldr	r3, [pc, #272]	; (3ec <i2c_slave_init+0x174>)
     2dc:	4798      	blx	r3
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     2de:	6828      	ldr	r0, [r5, #0]
     2e0:	47c8      	blx	r9
     2e2:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _i2c_slave_interrupt_handler);
     2e4:	4942      	ldr	r1, [pc, #264]	; (3f0 <i2c_slave_init+0x178>)
     2e6:	4b43      	ldr	r3, [pc, #268]	; (3f4 <i2c_slave_init+0x17c>)
     2e8:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     2ea:	00bf      	lsls	r7, r7, #2
     2ec:	4b42      	ldr	r3, [pc, #264]	; (3f8 <i2c_slave_init+0x180>)
     2ee:	50fd      	str	r5, [r7, r3]
	module->registered_callback = 0;
     2f0:	2300      	movs	r3, #0
     2f2:	2224      	movs	r2, #36	; 0x24
     2f4:	54ab      	strb	r3, [r5, r2]
	module->enabled_callback = 0;
     2f6:	3201      	adds	r2, #1
     2f8:	54ab      	strb	r3, [r5, r2]
	module->buffer_length = 0;
     2fa:	84eb      	strh	r3, [r5, #38]	; 0x26
	module->nack_on_address = config->enable_nack_on_address;
     2fc:	7e33      	ldrb	r3, [r6, #24]
     2fe:	726b      	strb	r3, [r5, #9]
	i2c_hw->CTRLA.reg = SERCOM_I2CS_CTRLA_MODE(0x4);
     300:	2310      	movs	r3, #16
     302:	6023      	str	r3, [r4, #0]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     304:	682c      	ldr	r4, [r5, #0]
	module->buffer_timeout = config->buffer_timeout;
     306:	8933      	ldrh	r3, [r6, #8]
     308:	80eb      	strh	r3, [r5, #6]
	module->ten_bit_address = config->ten_bit_address;
     30a:	7c33      	ldrb	r3, [r6, #16]
     30c:	722b      	strb	r3, [r5, #8]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     30e:	2380      	movs	r3, #128	; 0x80
     310:	466a      	mov	r2, sp
     312:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     314:	2300      	movs	r3, #0
     316:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     318:	466b      	mov	r3, sp
     31a:	4642      	mov	r2, r8
     31c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     31e:	2300      	movs	r3, #0
     320:	466a      	mov	r2, sp
     322:	70d3      	strb	r3, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     324:	69f0      	ldr	r0, [r6, #28]
	uint32_t pad1 = config->pinmux_pad1;
     326:	6a35      	ldr	r5, [r6, #32]
	if (pad0 == PINMUX_DEFAULT) {
     328:	2800      	cmp	r0, #0
     32a:	d04b      	beq.n	3c4 <i2c_slave_init+0x14c>
	pin_conf.mux_position = pad0 & 0xFFFF;
     32c:	466b      	mov	r3, sp
     32e:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     330:	2302      	movs	r3, #2
     332:	466a      	mov	r2, sp
     334:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     336:	0c00      	lsrs	r0, r0, #16
     338:	b2c0      	uxtb	r0, r0
     33a:	4669      	mov	r1, sp
     33c:	4b2f      	ldr	r3, [pc, #188]	; (3fc <i2c_slave_init+0x184>)
     33e:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     340:	2d00      	cmp	r5, #0
     342:	d044      	beq.n	3ce <i2c_slave_init+0x156>
	pin_conf.mux_position = pad1 & 0xFFFF;
     344:	466b      	mov	r3, sp
     346:	701d      	strb	r5, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     348:	2302      	movs	r3, #2
     34a:	466a      	mov	r2, sp
     34c:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     34e:	0c2d      	lsrs	r5, r5, #16
     350:	b2e8      	uxtb	r0, r5
     352:	4669      	mov	r1, sp
     354:	4b29      	ldr	r3, [pc, #164]	; (3fc <i2c_slave_init+0x184>)
     356:	4798      	blx	r3
	if (config->run_in_standby || system_is_debugger_present()) {
     358:	7eb3      	ldrb	r3, [r6, #26]
		tmp_ctrla = SERCOM_I2CS_CTRLA_RUNSTDBY;
     35a:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     35c:	2b00      	cmp	r3, #0
     35e:	d104      	bne.n	36a <i2c_slave_init+0xf2>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     360:	4b27      	ldr	r3, [pc, #156]	; (400 <STACK_SIZE>)
     362:	789b      	ldrb	r3, [r3, #2]
     364:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CS_CTRLA_RUNSTDBY;
     366:	0fdb      	lsrs	r3, r3, #31
     368:	01da      	lsls	r2, r3, #7
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_SLAVE_SPEED_HIGH_SPEED)) {
     36a:	2325      	movs	r3, #37	; 0x25
     36c:	5cf3      	ldrb	r3, [r6, r3]
     36e:	2b00      	cmp	r3, #0
     370:	d104      	bne.n	37c <i2c_slave_init+0x104>
     372:	2380      	movs	r3, #128	; 0x80
     374:	049b      	lsls	r3, r3, #18
     376:	6971      	ldr	r1, [r6, #20]
     378:	4299      	cmp	r1, r3
     37a:	d102      	bne.n	382 <i2c_slave_init+0x10a>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     37c:	2380      	movs	r3, #128	; 0x80
     37e:	051b      	lsls	r3, r3, #20
     380:	431a      	orrs	r2, r3
	i2c_hw->CTRLA.reg |= tmp_ctrla;
     382:	6820      	ldr	r0, [r4, #0]
     384:	6873      	ldr	r3, [r6, #4]
     386:	6971      	ldr	r1, [r6, #20]
     388:	430b      	orrs	r3, r1
			(config->scl_low_timeout << SERCOM_I2CS_CTRLA_LOWTOUTEN_Pos) |
     38a:	2124      	movs	r1, #36	; 0x24
     38c:	5c71      	ldrb	r1, [r6, r1]
     38e:	0789      	lsls	r1, r1, #30
	i2c_hw->CTRLA.reg |= tmp_ctrla;
     390:	430b      	orrs	r3, r1
			(config->slave_scl_low_extend_timeout << SERCOM_I2CS_CTRLA_SEXTTOEN_Pos));
     392:	2126      	movs	r1, #38	; 0x26
     394:	5c71      	ldrb	r1, [r6, r1]
     396:	05c9      	lsls	r1, r1, #23
	i2c_hw->CTRLA.reg |= tmp_ctrla;
     398:	430b      	orrs	r3, r1
     39a:	4303      	orrs	r3, r0
     39c:	4313      	orrs	r3, r2
     39e:	6023      	str	r3, [r4, #0]
	i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_SMEN | config->address_mode;
     3a0:	8972      	ldrh	r2, [r6, #10]
     3a2:	2380      	movs	r3, #128	; 0x80
     3a4:	005b      	lsls	r3, r3, #1
     3a6:	4313      	orrs	r3, r2
     3a8:	6063      	str	r3, [r4, #4]
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
     3aa:	89b3      	ldrh	r3, [r6, #12]
     3ac:	005b      	lsls	r3, r3, #1
			config->address_mask << SERCOM_I2CS_ADDR_ADDRMASK_Pos |
     3ae:	89f2      	ldrh	r2, [r6, #14]
     3b0:	0452      	lsls	r2, r2, #17
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
     3b2:	4313      	orrs	r3, r2
			config->enable_general_call_address << SERCOM_I2CS_ADDR_GENCEN_Pos;
     3b4:	7c72      	ldrb	r2, [r6, #17]
			config->ten_bit_address << SERCOM_I2CS_ADDR_TENBITEN_Pos |
     3b6:	4313      	orrs	r3, r2
     3b8:	7c32      	ldrb	r2, [r6, #16]
     3ba:	03d2      	lsls	r2, r2, #15
     3bc:	4313      	orrs	r3, r2
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
     3be:	6263      	str	r3, [r4, #36]	; 0x24
	return _i2c_slave_set_config(module, config);
     3c0:	2000      	movs	r0, #0
     3c2:	e766      	b.n	292 <i2c_slave_init+0x1a>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     3c4:	2100      	movs	r1, #0
     3c6:	0020      	movs	r0, r4
     3c8:	4b0e      	ldr	r3, [pc, #56]	; (404 <STACK_SIZE+0x4>)
     3ca:	4798      	blx	r3
     3cc:	e7ae      	b.n	32c <i2c_slave_init+0xb4>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     3ce:	2101      	movs	r1, #1
     3d0:	0020      	movs	r0, r4
     3d2:	4b0c      	ldr	r3, [pc, #48]	; (404 <STACK_SIZE+0x4>)
     3d4:	4798      	blx	r3
     3d6:	0005      	movs	r5, r0
     3d8:	e7b4      	b.n	344 <i2c_slave_init+0xcc>
     3da:	46c0      	nop			; (mov r8, r8)
     3dc:	00000861 	.word	0x00000861
     3e0:	40000400 	.word	0x40000400
     3e4:	00000bd1 	.word	0x00000bd1
     3e8:	00000b45 	.word	0x00000b45
     3ec:	00000795 	.word	0x00000795
     3f0:	00000475 	.word	0x00000475
     3f4:	00000889 	.word	0x00000889
     3f8:	2000056c 	.word	0x2000056c
     3fc:	00000cc9 	.word	0x00000cc9
     400:	41002000 	.word	0x41002000
     404:	000007e1 	.word	0x000007e1

00000408 <i2c_slave_register_callback>:
 */
void i2c_slave_register_callback(
		struct i2c_slave_module *const module,
		i2c_slave_callback_t callback,
		enum i2c_slave_callback callback_type)
{
     408:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback. */
	module->callbacks[callback_type] = callback;
     40a:	1c93      	adds	r3, r2, #2
     40c:	009b      	lsls	r3, r3, #2
     40e:	18c3      	adds	r3, r0, r3
     410:	6059      	str	r1, [r3, #4]

	/* Set corresponding bit to set callback as initiated. */
	module->registered_callback |= (1 << callback_type);
     412:	2424      	movs	r4, #36	; 0x24
     414:	5d03      	ldrb	r3, [r0, r4]
     416:	2101      	movs	r1, #1
     418:	4091      	lsls	r1, r2
     41a:	430b      	orrs	r3, r1
     41c:	b2db      	uxtb	r3, r3
     41e:	5503      	strb	r3, [r0, r4]
}
     420:	bd10      	pop	{r4, pc}

00000422 <i2c_slave_read_packet_job>:
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy doing async operation. */
	if (module->buffer_remaining > 0) {
     422:	8d02      	ldrh	r2, [r0, #40]	; 0x28
		return STATUS_BUSY;
     424:	2305      	movs	r3, #5
	if (module->buffer_remaining > 0) {
     426:	2a00      	cmp	r2, #0
     428:	d001      	beq.n	42e <i2c_slave_read_packet_job+0xc>
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
			SERCOM_I2CS_INTFLAG_DRDY | SERCOM_I2CS_INTFLAG_PREC;

	/* Read will begin when master initiates the transfer */
	return STATUS_OK;
}
     42a:	0018      	movs	r0, r3
     42c:	4770      	bx	lr
	module->buffer           = packet->data;
     42e:	684b      	ldr	r3, [r1, #4]
     430:	62c3      	str	r3, [r0, #44]	; 0x2c
	module->buffer_remaining = packet->data_length;
     432:	880b      	ldrh	r3, [r1, #0]
     434:	8503      	strh	r3, [r0, #40]	; 0x28
	module->buffer_length    = packet->data_length;
     436:	880b      	ldrh	r3, [r1, #0]
     438:	84c3      	strh	r3, [r0, #38]	; 0x26
	module->status           = STATUS_BUSY;
     43a:	3205      	adds	r2, #5
     43c:	2331      	movs	r3, #49	; 0x31
     43e:	54c2      	strb	r2, [r0, r3]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     440:	6803      	ldr	r3, [r0, #0]
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
     442:	3202      	adds	r2, #2
     444:	759a      	strb	r2, [r3, #22]
	return STATUS_OK;
     446:	2300      	movs	r3, #0
     448:	e7ef      	b.n	42a <i2c_slave_read_packet_job+0x8>

0000044a <i2c_slave_write_packet_job>:
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy doing async operation. */
	if (module->buffer_remaining > 0) {
     44a:	8d02      	ldrh	r2, [r0, #40]	; 0x28
		return STATUS_BUSY;
     44c:	2305      	movs	r3, #5
	if (module->buffer_remaining > 0) {
     44e:	2a00      	cmp	r2, #0
     450:	d001      	beq.n	456 <i2c_slave_write_packet_job+0xc>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
			SERCOM_I2CS_INTFLAG_DRDY | SERCOM_I2CS_INTFLAG_PREC;

	return STATUS_OK;
}
     452:	0018      	movs	r0, r3
     454:	4770      	bx	lr
	module->buffer           = packet->data;
     456:	684b      	ldr	r3, [r1, #4]
     458:	62c3      	str	r3, [r0, #44]	; 0x2c
	module->buffer_remaining = packet->data_length;
     45a:	880b      	ldrh	r3, [r1, #0]
     45c:	8503      	strh	r3, [r0, #40]	; 0x28
	module->buffer_length    = packet->data_length;
     45e:	880b      	ldrh	r3, [r1, #0]
     460:	84c3      	strh	r3, [r0, #38]	; 0x26
	module->status           = STATUS_BUSY;
     462:	3205      	adds	r2, #5
     464:	2331      	movs	r3, #49	; 0x31
     466:	54c2      	strb	r2, [r0, r3]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     468:	6803      	ldr	r3, [r0, #0]
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
     46a:	3202      	adds	r2, #2
     46c:	759a      	strb	r2, [r3, #22]
	return STATUS_OK;
     46e:	2300      	movs	r3, #0
     470:	e7ef      	b.n	452 <i2c_slave_write_packet_job+0x8>
	...

00000474 <_i2c_slave_interrupt_handler>:
 *
 * \param[in] instance Sercom instance that triggered the interrupt
 */
void _i2c_slave_interrupt_handler(
		uint8_t instance)
{
     474:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling. */
	struct i2c_slave_module *module =
     476:	0080      	lsls	r0, r0, #2
     478:	4b9b      	ldr	r3, [pc, #620]	; (6e8 <_i2c_slave_interrupt_handler+0x274>)
     47a:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_slave_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     47c:	6825      	ldr	r5, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask = module->enabled_callback;
     47e:	2325      	movs	r3, #37	; 0x25
     480:	5ce3      	ldrb	r3, [r4, r3]
	callback_mask &= module->registered_callback;
     482:	2224      	movs	r2, #36	; 0x24
     484:	5ca6      	ldrb	r6, [r4, r2]
     486:	401e      	ands	r6, r3


	if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH) {
     488:	7e2b      	ldrb	r3, [r5, #24]
     48a:	079b      	lsls	r3, r3, #30
     48c:	d400      	bmi.n	490 <_i2c_slave_interrupt_handler+0x1c>
     48e:	e095      	b.n	5bc <_i2c_slave_interrupt_handler+0x148>
	/* Address match */
		/* Check if last transfer is done - repeated start */
		if (module->buffer_length != module->buffer_remaining &&
     490:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     492:	b29b      	uxth	r3, r3
     494:	8d22      	ldrh	r2, [r4, #40]	; 0x28
     496:	4293      	cmp	r3, r2
     498:	d00d      	beq.n	4b6 <_i2c_slave_interrupt_handler+0x42>
				module->transfer_direction == I2C_TRANSFER_WRITE) {
     49a:	2330      	movs	r3, #48	; 0x30
     49c:	5ce3      	ldrb	r3, [r4, r3]
		if (module->buffer_length != module->buffer_remaining &&
     49e:	2b00      	cmp	r3, #0
     4a0:	d109      	bne.n	4b6 <_i2c_slave_interrupt_handler+0x42>

			module->status = STATUS_OK;
     4a2:	2231      	movs	r2, #49	; 0x31
     4a4:	54a3      	strb	r3, [r4, r2]
			module->buffer_length = 0;
     4a6:	84e3      	strh	r3, [r4, #38]	; 0x26
			module->buffer_remaining = 0;
     4a8:	8523      	strh	r3, [r4, #40]	; 0x28

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))) {
     4aa:	07b3      	lsls	r3, r6, #30
     4ac:	d50b      	bpl.n	4c6 <_i2c_slave_interrupt_handler+0x52>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_COMPLETE](module);
     4ae:	6923      	ldr	r3, [r4, #16]
     4b0:	0020      	movs	r0, r4
     4b2:	4798      	blx	r3
     4b4:	e007      	b.n	4c6 <_i2c_slave_interrupt_handler+0x52>
			}
		} else if (module->buffer_length != module->buffer_remaining &&
     4b6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     4b8:	b29b      	uxth	r3, r3
     4ba:	429a      	cmp	r2, r3
     4bc:	d003      	beq.n	4c6 <_i2c_slave_interrupt_handler+0x52>
				module->transfer_direction == I2C_TRANSFER_READ) {
     4be:	2330      	movs	r3, #48	; 0x30
     4c0:	5ce3      	ldrb	r3, [r4, r3]
		} else if (module->buffer_length != module->buffer_remaining &&
     4c2:	2b01      	cmp	r3, #1
     4c4:	d022      	beq.n	50c <_i2c_slave_interrupt_handler+0x98>
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))) {
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
			}
		}

		if (i2c_hw->STATUS.reg & (SERCOM_I2CS_STATUS_BUSERR |
     4c6:	8b6a      	ldrh	r2, [r5, #26]
     4c8:	2343      	movs	r3, #67	; 0x43
     4ca:	421a      	tst	r2, r3
     4cc:	d004      	beq.n	4d8 <_i2c_slave_interrupt_handler+0x64>
				SERCOM_I2CS_STATUS_COLL | SERCOM_I2CS_STATUS_LOWTOUT)) {
			/* An error occurred in last packet transfer */
			module->status = STATUS_ERR_IO;
     4ce:	2210      	movs	r2, #16
     4d0:	3b12      	subs	r3, #18
     4d2:	54e2      	strb	r2, [r4, r3]

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER))) {
     4d4:	06b3      	lsls	r3, r6, #26
     4d6:	d424      	bmi.n	522 <_i2c_slave_interrupt_handler+0xae>
				module->callbacks[I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER](module);
			}
		}
		if (module->nack_on_address) {
     4d8:	7a63      	ldrb	r3, [r4, #9]
     4da:	2b00      	cmp	r3, #0
     4dc:	d125      	bne.n	52a <_i2c_slave_interrupt_handler+0xb6>
			/* NACK address, workaround 13574 */
			_i2c_slave_set_ctrlb_ackact(module, false);
		} else if (i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_DIR) {
     4de:	8b6b      	ldrh	r3, [r5, #26]
     4e0:	071b      	lsls	r3, r3, #28
     4e2:	d54a      	bpl.n	57a <_i2c_slave_interrupt_handler+0x106>
			/* Set transfer direction in module instance */
			module->transfer_direction = I2C_TRANSFER_READ;
     4e4:	2201      	movs	r2, #1
     4e6:	2330      	movs	r3, #48	; 0x30
     4e8:	54e2      	strb	r2, [r4, r3]

			/* Read request from master */
			if (callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST)) {
     4ea:	0773      	lsls	r3, r6, #29
     4ec:	d438      	bmi.n	560 <_i2c_slave_interrupt_handler+0xec>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_REQUEST](module);
			}

			if (module->buffer_length == 0) {
     4ee:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     4f0:	b29b      	uxth	r3, r3
     4f2:	2b00      	cmp	r3, #0
     4f4:	d138      	bne.n	568 <_i2c_slave_interrupt_handler+0xf4>
		bool send_ack)
{
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     4f6:	6825      	ldr	r5, [r4, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     4f8:	4b7c      	ldr	r3, [pc, #496]	; (6ec <_i2c_slave_interrupt_handler+0x278>)
     4fa:	4798      	blx	r3

#if (SAMD20 || SAMD21 || SAMD09 || SAMD10 || SAMD11 || SAML21 || SAMDA1 ||  \
		SAML22 || SAMC20 || SAMC21 || SAMHA1 || (SAMHA0) || SAMR30 || SAMR34 || SAMR35) || (WLR089)
	/* Workaround, Following two write are atomic */
	system_interrupt_enter_critical_section();
	i2c_hw->STATUS.reg = 0;
     4fc:	2300      	movs	r3, #0
     4fe:	836b      	strh	r3, [r5, #26]

	if (send_ack == true) {
		i2c_hw->CTRLB.reg = 0;
	}
	else {
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     500:	2380      	movs	r3, #128	; 0x80
     502:	02db      	lsls	r3, r3, #11
     504:	606b      	str	r3, [r5, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     506:	4b7a      	ldr	r3, [pc, #488]	; (6f0 <_i2c_slave_interrupt_handler+0x27c>)
     508:	4798      	blx	r3
     50a:	e018      	b.n	53e <_i2c_slave_interrupt_handler+0xca>
			module->status = STATUS_OK;
     50c:	2300      	movs	r3, #0
     50e:	2231      	movs	r2, #49	; 0x31
     510:	54a3      	strb	r3, [r4, r2]
			module->buffer_length = 0;
     512:	84e3      	strh	r3, [r4, #38]	; 0x26
			module->buffer_remaining = 0;
     514:	8523      	strh	r3, [r4, #40]	; 0x28
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))) {
     516:	07f3      	lsls	r3, r6, #31
     518:	d5d5      	bpl.n	4c6 <_i2c_slave_interrupt_handler+0x52>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
     51a:	68e3      	ldr	r3, [r4, #12]
     51c:	0020      	movs	r0, r4
     51e:	4798      	blx	r3
     520:	e7d1      	b.n	4c6 <_i2c_slave_interrupt_handler+0x52>
				module->callbacks[I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER](module);
     522:	6a23      	ldr	r3, [r4, #32]
     524:	0020      	movs	r0, r4
     526:	4798      	blx	r3
     528:	e7d6      	b.n	4d8 <_i2c_slave_interrupt_handler+0x64>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     52a:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     52c:	4b6f      	ldr	r3, [pc, #444]	; (6ec <_i2c_slave_interrupt_handler+0x278>)
     52e:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     530:	2300      	movs	r3, #0
     532:	836b      	strh	r3, [r5, #26]
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     534:	2380      	movs	r3, #128	; 0x80
     536:	02db      	lsls	r3, r3, #11
     538:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     53a:	4b6d      	ldr	r3, [pc, #436]	; (6f0 <_i2c_slave_interrupt_handler+0x27c>)
     53c:	4798      	blx	r3
		struct i2c_slave_module *const module)
{
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     53e:	6823      	ldr	r3, [r4, #0]
	/*
	 * Below code instead i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_CMD(0x3);
	 * CMD=0x3 clears all interrupts, so to keep the result similar
	 * PREC is cleared if it was set
	 */
	if (i2c_hw->INTFLAG.bit.PREC) {
     540:	7e1a      	ldrb	r2, [r3, #24]
     542:	07d2      	lsls	r2, r2, #31
     544:	d501      	bpl.n	54a <_i2c_slave_interrupt_handler+0xd6>
		i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
     546:	2201      	movs	r2, #1
     548:	761a      	strb	r2, [r3, #24]
	}
	i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_AMATCH;
     54a:	2202      	movs	r2, #2
     54c:	761a      	strb	r2, [r3, #24]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     54e:	6824      	ldr	r4, [r4, #0]
	cpu_irq_enter_critical();
     550:	4b66      	ldr	r3, [pc, #408]	; (6ec <_i2c_slave_interrupt_handler+0x278>)
     552:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     554:	2300      	movs	r3, #0
     556:	8363      	strh	r3, [r4, #26]
		i2c_hw->CTRLB.reg = 0;
     558:	6063      	str	r3, [r4, #4]
	cpu_irq_leave_critical();
     55a:	4b65      	ldr	r3, [pc, #404]	; (6f0 <_i2c_slave_interrupt_handler+0x27c>)
     55c:	4798      	blx	r3
			} else {
				_i2c_slave_write(module);
			}
		}
	}
}
     55e:	bd70      	pop	{r4, r5, r6, pc}
				module->callbacks[I2C_SLAVE_CALLBACK_READ_REQUEST](module);
     560:	6963      	ldr	r3, [r4, #20]
     562:	0020      	movs	r0, r4
     564:	4798      	blx	r3
     566:	e7c2      	b.n	4ee <_i2c_slave_interrupt_handler+0x7a>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     568:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     56a:	4b60      	ldr	r3, [pc, #384]	; (6ec <_i2c_slave_interrupt_handler+0x278>)
     56c:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     56e:	2300      	movs	r3, #0
     570:	836b      	strh	r3, [r5, #26]
		i2c_hw->CTRLB.reg = 0;
     572:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     574:	4b5e      	ldr	r3, [pc, #376]	; (6f0 <_i2c_slave_interrupt_handler+0x27c>)
     576:	4798      	blx	r3
     578:	e7e1      	b.n	53e <_i2c_slave_interrupt_handler+0xca>
			module->transfer_direction = I2C_TRANSFER_WRITE;
     57a:	2200      	movs	r2, #0
     57c:	2330      	movs	r3, #48	; 0x30
     57e:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_REQUEST)) {
     580:	0733      	lsls	r3, r6, #28
     582:	d40e      	bmi.n	5a2 <_i2c_slave_interrupt_handler+0x12e>
			if (module->buffer_length == 0) {
     584:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     586:	b29b      	uxth	r3, r3
     588:	2b00      	cmp	r3, #0
     58a:	d10e      	bne.n	5aa <_i2c_slave_interrupt_handler+0x136>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     58c:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     58e:	4b57      	ldr	r3, [pc, #348]	; (6ec <_i2c_slave_interrupt_handler+0x278>)
     590:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     592:	2300      	movs	r3, #0
     594:	836b      	strh	r3, [r5, #26]
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     596:	2380      	movs	r3, #128	; 0x80
     598:	02db      	lsls	r3, r3, #11
     59a:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     59c:	4b54      	ldr	r3, [pc, #336]	; (6f0 <_i2c_slave_interrupt_handler+0x27c>)
     59e:	4798      	blx	r3
     5a0:	e7cd      	b.n	53e <_i2c_slave_interrupt_handler+0xca>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_REQUEST](module);
     5a2:	69a3      	ldr	r3, [r4, #24]
     5a4:	0020      	movs	r0, r4
     5a6:	4798      	blx	r3
     5a8:	e7ec      	b.n	584 <_i2c_slave_interrupt_handler+0x110>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     5aa:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     5ac:	4b4f      	ldr	r3, [pc, #316]	; (6ec <_i2c_slave_interrupt_handler+0x278>)
     5ae:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     5b0:	2300      	movs	r3, #0
     5b2:	836b      	strh	r3, [r5, #26]
		i2c_hw->CTRLB.reg = 0;
     5b4:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     5b6:	4b4e      	ldr	r3, [pc, #312]	; (6f0 <_i2c_slave_interrupt_handler+0x27c>)
     5b8:	4798      	blx	r3
     5ba:	e7c0      	b.n	53e <_i2c_slave_interrupt_handler+0xca>
	} else if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC) {
     5bc:	7e2b      	ldrb	r3, [r5, #24]
     5be:	07db      	lsls	r3, r3, #31
     5c0:	d52e      	bpl.n	620 <_i2c_slave_interrupt_handler+0x1ac>
		i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
     5c2:	2301      	movs	r3, #1
     5c4:	762b      	strb	r3, [r5, #24]
		i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_PREC | SERCOM_I2CS_INTFLAG_DRDY;
     5c6:	3304      	adds	r3, #4
     5c8:	752b      	strb	r3, [r5, #20]
		if (!((module->enabled_callback & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST))
     5ca:	3320      	adds	r3, #32
     5cc:	5ce3      	ldrb	r3, [r4, r3]
     5ce:	075b      	lsls	r3, r3, #29
     5d0:	d405      	bmi.n	5de <_i2c_slave_interrupt_handler+0x16a>
				|| (module->enabled_callback & (1 << I2C_SLAVE_CALLBACK_WRITE_REQUEST)))) {
     5d2:	2325      	movs	r3, #37	; 0x25
     5d4:	5ce3      	ldrb	r3, [r4, r3]
		if (!((module->enabled_callback & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST))
     5d6:	071b      	lsls	r3, r3, #28
     5d8:	d401      	bmi.n	5de <_i2c_slave_interrupt_handler+0x16a>
			i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_AMATCH;
     5da:	2302      	movs	r3, #2
     5dc:	752b      	strb	r3, [r5, #20]
		if (!(module->status == STATUS_ERR_OVERFLOW || module->status == STATUS_ERR_IO)) {
     5de:	2331      	movs	r3, #49	; 0x31
     5e0:	5ce3      	ldrb	r3, [r4, r3]
     5e2:	2b1e      	cmp	r3, #30
     5e4:	d0bb      	beq.n	55e <_i2c_slave_interrupt_handler+0xea>
     5e6:	2331      	movs	r3, #49	; 0x31
     5e8:	5ce3      	ldrb	r3, [r4, r3]
     5ea:	2b10      	cmp	r3, #16
     5ec:	d0b7      	beq.n	55e <_i2c_slave_interrupt_handler+0xea>
			module->status = STATUS_OK;
     5ee:	2300      	movs	r3, #0
     5f0:	2231      	movs	r2, #49	; 0x31
     5f2:	54a3      	strb	r3, [r4, r2]
			module->buffer_length = 0;
     5f4:	84e3      	strh	r3, [r4, #38]	; 0x26
			module->buffer_remaining = 0;
     5f6:	8523      	strh	r3, [r4, #40]	; 0x28
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))
     5f8:	07b3      	lsls	r3, r6, #30
     5fa:	d503      	bpl.n	604 <_i2c_slave_interrupt_handler+0x190>
					&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     5fc:	2330      	movs	r3, #48	; 0x30
     5fe:	5ce3      	ldrb	r3, [r4, r3]
     600:	2b00      	cmp	r3, #0
     602:	d009      	beq.n	618 <_i2c_slave_interrupt_handler+0x1a4>
			} else if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))
     604:	07f3      	lsls	r3, r6, #31
     606:	d5aa      	bpl.n	55e <_i2c_slave_interrupt_handler+0xea>
					&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     608:	2330      	movs	r3, #48	; 0x30
     60a:	5ce3      	ldrb	r3, [r4, r3]
     60c:	2b01      	cmp	r3, #1
     60e:	d1a6      	bne.n	55e <_i2c_slave_interrupt_handler+0xea>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
     610:	68e3      	ldr	r3, [r4, #12]
     612:	0020      	movs	r0, r4
     614:	4798      	blx	r3
     616:	e7a2      	b.n	55e <_i2c_slave_interrupt_handler+0xea>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_COMPLETE](module);
     618:	6923      	ldr	r3, [r4, #16]
     61a:	0020      	movs	r0, r4
     61c:	4798      	blx	r3
     61e:	e79e      	b.n	55e <_i2c_slave_interrupt_handler+0xea>
	} else if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY) {
     620:	7e2b      	ldrb	r3, [r5, #24]
     622:	075b      	lsls	r3, r3, #29
     624:	d59b      	bpl.n	55e <_i2c_slave_interrupt_handler+0xea>
		if (module->buffer_remaining <= 0 ||
     626:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     628:	2b00      	cmp	r3, #0
     62a:	d01e      	beq.n	66a <_i2c_slave_interrupt_handler+0x1f6>
				(module->transfer_direction == I2C_TRANSFER_READ &&
     62c:	2230      	movs	r2, #48	; 0x30
     62e:	5ca2      	ldrb	r2, [r4, r2]
		if (module->buffer_remaining <= 0 ||
     630:	2a01      	cmp	r2, #1
     632:	d013      	beq.n	65c <_i2c_slave_interrupt_handler+0x1e8>
		} else if (module->buffer_length > 0 && module->buffer_remaining > 0) {
     634:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     636:	b29b      	uxth	r3, r3
     638:	2b00      	cmp	r3, #0
     63a:	d100      	bne.n	63e <_i2c_slave_interrupt_handler+0x1ca>
     63c:	e78f      	b.n	55e <_i2c_slave_interrupt_handler+0xea>
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     63e:	2330      	movs	r3, #48	; 0x30
     640:	5ce3      	ldrb	r3, [r4, r3]
     642:	2b00      	cmp	r3, #0
     644:	d044      	beq.n	6d0 <_i2c_slave_interrupt_handler+0x25c>
	i2c_hw->DATA.reg = *(module->buffer++);
     646:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     648:	1c5a      	adds	r2, r3, #1
     64a:	62e2      	str	r2, [r4, #44]	; 0x2c
     64c:	781b      	ldrb	r3, [r3, #0]
     64e:	b2db      	uxtb	r3, r3
     650:	2228      	movs	r2, #40	; 0x28
     652:	54ab      	strb	r3, [r5, r2]
	module->buffer_remaining--;
     654:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     656:	3b01      	subs	r3, #1
     658:	8523      	strh	r3, [r4, #40]	; 0x28
}
     65a:	e780      	b.n	55e <_i2c_slave_interrupt_handler+0xea>
				(module->buffer_length > module->buffer_remaining) &&
     65c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
     65e:	b292      	uxth	r2, r2
				(module->transfer_direction == I2C_TRANSFER_READ &&
     660:	4293      	cmp	r3, r2
     662:	d2e7      	bcs.n	634 <_i2c_slave_interrupt_handler+0x1c0>
				(i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_RXNACK))) {
     664:	8b6b      	ldrh	r3, [r5, #26]
				(module->buffer_length > module->buffer_remaining) &&
     666:	075b      	lsls	r3, r3, #29
     668:	d5e4      	bpl.n	634 <_i2c_slave_interrupt_handler+0x1c0>
			module->buffer_remaining = 0;
     66a:	2300      	movs	r3, #0
     66c:	8523      	strh	r3, [r4, #40]	; 0x28
			module->buffer_length = 0;
     66e:	84e3      	strh	r3, [r4, #38]	; 0x26
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     670:	3330      	adds	r3, #48	; 0x30
     672:	5ce3      	ldrb	r3, [r4, r3]
     674:	2b00      	cmp	r3, #0
     676:	d117      	bne.n	6a8 <_i2c_slave_interrupt_handler+0x234>
	cpu_irq_enter_critical();
     678:	4b1c      	ldr	r3, [pc, #112]	; (6ec <_i2c_slave_interrupt_handler+0x278>)
     67a:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     67c:	2300      	movs	r3, #0
     67e:	836b      	strh	r3, [r5, #26]
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     680:	2380      	movs	r3, #128	; 0x80
     682:	02db      	lsls	r3, r3, #11
     684:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     686:	4b1a      	ldr	r3, [pc, #104]	; (6f0 <_i2c_slave_interrupt_handler+0x27c>)
     688:	4798      	blx	r3
				i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
     68a:	686a      	ldr	r2, [r5, #4]
     68c:	2380      	movs	r3, #128	; 0x80
     68e:	029b      	lsls	r3, r3, #10
     690:	4313      	orrs	r3, r2
     692:	606b      	str	r3, [r5, #4]
				module->status = STATUS_ERR_OVERFLOW;
     694:	221e      	movs	r2, #30
     696:	2331      	movs	r3, #49	; 0x31
     698:	54e2      	strb	r2, [r4, r3]
				if (callback_mask & (1 << I2C_SLAVE_CALLBACK_ERROR)) {
     69a:	06f3      	lsls	r3, r6, #27
     69c:	d400      	bmi.n	6a0 <_i2c_slave_interrupt_handler+0x22c>
     69e:	e75e      	b.n	55e <_i2c_slave_interrupt_handler+0xea>
					module->callbacks[I2C_SLAVE_CALLBACK_ERROR](module);
     6a0:	69e3      	ldr	r3, [r4, #28]
     6a2:	0020      	movs	r0, r4
     6a4:	4798      	blx	r3
     6a6:	e75a      	b.n	55e <_i2c_slave_interrupt_handler+0xea>
	cpu_irq_enter_critical();
     6a8:	4b10      	ldr	r3, [pc, #64]	; (6ec <_i2c_slave_interrupt_handler+0x278>)
     6aa:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     6ac:	2300      	movs	r3, #0
     6ae:	836b      	strh	r3, [r5, #26]
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     6b0:	2380      	movs	r3, #128	; 0x80
     6b2:	02db      	lsls	r3, r3, #11
     6b4:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     6b6:	4b0e      	ldr	r3, [pc, #56]	; (6f0 <_i2c_slave_interrupt_handler+0x27c>)
     6b8:	4798      	blx	r3
				i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
     6ba:	686a      	ldr	r2, [r5, #4]
     6bc:	2380      	movs	r3, #128	; 0x80
     6be:	029b      	lsls	r3, r3, #10
     6c0:	4313      	orrs	r3, r2
     6c2:	606b      	str	r3, [r5, #4]
				module->status = STATUS_OK;
     6c4:	2331      	movs	r3, #49	; 0x31
     6c6:	2200      	movs	r2, #0
     6c8:	54e2      	strb	r2, [r4, r3]
				i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_DRDY;
     6ca:	3b2d      	subs	r3, #45	; 0x2d
     6cc:	752b      	strb	r3, [r5, #20]
     6ce:	e746      	b.n	55e <_i2c_slave_interrupt_handler+0xea>
	*(module->buffer++) = i2c_hw->DATA.reg;
     6d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     6d2:	1c53      	adds	r3, r2, #1
     6d4:	62e3      	str	r3, [r4, #44]	; 0x2c
     6d6:	2328      	movs	r3, #40	; 0x28
     6d8:	5ceb      	ldrb	r3, [r5, r3]
     6da:	b2db      	uxtb	r3, r3
     6dc:	7013      	strb	r3, [r2, #0]
	module->buffer_remaining--;
     6de:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     6e0:	3b01      	subs	r3, #1
     6e2:	8523      	strh	r3, [r4, #40]	; 0x28
     6e4:	e73b      	b.n	55e <_i2c_slave_interrupt_handler+0xea>
     6e6:	46c0      	nop			; (mov r8, r8)
     6e8:	2000056c 	.word	0x2000056c
     6ec:	00000991 	.word	0x00000991
     6f0:	000009d1 	.word	0x000009d1

000006f4 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
     6f4:	b510      	push	{r4, lr}
 */
static inline void wdt_clear_early_warning(void)
{
	Wdt *const WDT_module = WDT;

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
     6f6:	2201      	movs	r2, #1
     6f8:	4b03      	ldr	r3, [pc, #12]	; (708 <WDT_Handler+0x14>)
     6fa:	719a      	strb	r2, [r3, #6]
	wdt_clear_early_warning();

	if (wdt_early_warning_callback) {
     6fc:	4b03      	ldr	r3, [pc, #12]	; (70c <WDT_Handler+0x18>)
     6fe:	681b      	ldr	r3, [r3, #0]
     700:	2b00      	cmp	r3, #0
     702:	d000      	beq.n	706 <WDT_Handler+0x12>
		wdt_early_warning_callback();
     704:	4798      	blx	r3
	}
}
     706:	bd10      	pop	{r4, pc}
     708:	40001000 	.word	0x40001000
     70c:	20000560 	.word	0x20000560

00000710 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     710:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     712:	0080      	lsls	r0, r0, #2
     714:	4b16      	ldr	r3, [pc, #88]	; (770 <_tc_interrupt_handler+0x60>)
     716:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     718:	6823      	ldr	r3, [r4, #0]
     71a:	7b9d      	ldrb	r5, [r3, #14]
     71c:	7e22      	ldrb	r2, [r4, #24]
     71e:	7e63      	ldrb	r3, [r4, #25]
     720:	4013      	ands	r3, r2
     722:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     724:	07eb      	lsls	r3, r5, #31
     726:	d406      	bmi.n	736 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     728:	07ab      	lsls	r3, r5, #30
     72a:	d40b      	bmi.n	744 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     72c:	06eb      	lsls	r3, r5, #27
     72e:	d410      	bmi.n	752 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     730:	06ab      	lsls	r3, r5, #26
     732:	d415      	bmi.n	760 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
     734:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     736:	0020      	movs	r0, r4
     738:	68a3      	ldr	r3, [r4, #8]
     73a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     73c:	2301      	movs	r3, #1
     73e:	6822      	ldr	r2, [r4, #0]
     740:	7393      	strb	r3, [r2, #14]
     742:	e7f1      	b.n	728 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
     744:	0020      	movs	r0, r4
     746:	68e3      	ldr	r3, [r4, #12]
     748:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     74a:	2302      	movs	r3, #2
     74c:	6822      	ldr	r2, [r4, #0]
     74e:	7393      	strb	r3, [r2, #14]
     750:	e7ec      	b.n	72c <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     752:	0020      	movs	r0, r4
     754:	6923      	ldr	r3, [r4, #16]
     756:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     758:	2310      	movs	r3, #16
     75a:	6822      	ldr	r2, [r4, #0]
     75c:	7393      	strb	r3, [r2, #14]
     75e:	e7e7      	b.n	730 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     760:	0020      	movs	r0, r4
     762:	6963      	ldr	r3, [r4, #20]
     764:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     766:	6823      	ldr	r3, [r4, #0]
     768:	2220      	movs	r2, #32
     76a:	739a      	strb	r2, [r3, #14]
}
     76c:	e7e2      	b.n	734 <_tc_interrupt_handler+0x24>
     76e:	46c0      	nop			; (mov r8, r8)
     770:	20000564 	.word	0x20000564

00000774 <TC1_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     774:	b510      	push	{r4, lr}
     776:	2000      	movs	r0, #0
     778:	4b01      	ldr	r3, [pc, #4]	; (780 <TC1_Handler+0xc>)
     77a:	4798      	blx	r3
     77c:	bd10      	pop	{r4, pc}
     77e:	46c0      	nop			; (mov r8, r8)
     780:	00000711 	.word	0x00000711

00000784 <TC2_Handler>:
     784:	b510      	push	{r4, lr}
     786:	2001      	movs	r0, #1
     788:	4b01      	ldr	r3, [pc, #4]	; (790 <TC2_Handler+0xc>)
     78a:	4798      	blx	r3
     78c:	bd10      	pop	{r4, pc}
     78e:	46c0      	nop			; (mov r8, r8)
     790:	00000711 	.word	0x00000711

00000794 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     794:	b510      	push	{r4, lr}
     796:	b082      	sub	sp, #8
     798:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     79a:	4b0e      	ldr	r3, [pc, #56]	; (7d4 <sercom_set_gclk_generator+0x40>)
     79c:	781b      	ldrb	r3, [r3, #0]
     79e:	2b00      	cmp	r3, #0
     7a0:	d007      	beq.n	7b2 <sercom_set_gclk_generator+0x1e>
     7a2:	2900      	cmp	r1, #0
     7a4:	d105      	bne.n	7b2 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     7a6:	4b0b      	ldr	r3, [pc, #44]	; (7d4 <sercom_set_gclk_generator+0x40>)
     7a8:	785b      	ldrb	r3, [r3, #1]
     7aa:	4283      	cmp	r3, r0
     7ac:	d010      	beq.n	7d0 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     7ae:	201d      	movs	r0, #29
     7b0:	e00c      	b.n	7cc <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     7b2:	a901      	add	r1, sp, #4
     7b4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     7b6:	200d      	movs	r0, #13
     7b8:	4b07      	ldr	r3, [pc, #28]	; (7d8 <sercom_set_gclk_generator+0x44>)
     7ba:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     7bc:	200d      	movs	r0, #13
     7be:	4b07      	ldr	r3, [pc, #28]	; (7dc <sercom_set_gclk_generator+0x48>)
     7c0:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     7c2:	4b04      	ldr	r3, [pc, #16]	; (7d4 <sercom_set_gclk_generator+0x40>)
     7c4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     7c6:	2201      	movs	r2, #1
     7c8:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     7ca:	2000      	movs	r0, #0
}
     7cc:	b002      	add	sp, #8
     7ce:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     7d0:	2000      	movs	r0, #0
     7d2:	e7fb      	b.n	7cc <sercom_set_gclk_generator+0x38>
     7d4:	200004f4 	.word	0x200004f4
     7d8:	00000bd1 	.word	0x00000bd1
     7dc:	00000b45 	.word	0x00000b45

000007e0 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     7e0:	4b15      	ldr	r3, [pc, #84]	; (838 <_sercom_get_default_pad+0x58>)
     7e2:	4298      	cmp	r0, r3
     7e4:	d004      	beq.n	7f0 <_sercom_get_default_pad+0x10>
     7e6:	4b15      	ldr	r3, [pc, #84]	; (83c <_sercom_get_default_pad+0x5c>)
     7e8:	4298      	cmp	r0, r3
     7ea:	d011      	beq.n	810 <_sercom_get_default_pad+0x30>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     7ec:	2000      	movs	r0, #0
}
     7ee:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7f0:	2901      	cmp	r1, #1
     7f2:	d007      	beq.n	804 <_sercom_get_default_pad+0x24>
     7f4:	2900      	cmp	r1, #0
     7f6:	d01b      	beq.n	830 <_sercom_get_default_pad+0x50>
     7f8:	2902      	cmp	r1, #2
     7fa:	d005      	beq.n	808 <_sercom_get_default_pad+0x28>
     7fc:	2903      	cmp	r1, #3
     7fe:	d005      	beq.n	80c <_sercom_get_default_pad+0x2c>
	return 0;
     800:	2000      	movs	r0, #0
     802:	e7f4      	b.n	7ee <_sercom_get_default_pad+0xe>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     804:	480e      	ldr	r0, [pc, #56]	; (840 <_sercom_get_default_pad+0x60>)
     806:	e7f2      	b.n	7ee <_sercom_get_default_pad+0xe>
     808:	480e      	ldr	r0, [pc, #56]	; (844 <_sercom_get_default_pad+0x64>)
     80a:	e7f0      	b.n	7ee <_sercom_get_default_pad+0xe>
     80c:	480e      	ldr	r0, [pc, #56]	; (848 <_sercom_get_default_pad+0x68>)
     80e:	e7ee      	b.n	7ee <_sercom_get_default_pad+0xe>
     810:	2901      	cmp	r1, #1
     812:	d007      	beq.n	824 <_sercom_get_default_pad+0x44>
     814:	2900      	cmp	r1, #0
     816:	d00d      	beq.n	834 <_sercom_get_default_pad+0x54>
     818:	2902      	cmp	r1, #2
     81a:	d005      	beq.n	828 <_sercom_get_default_pad+0x48>
     81c:	2903      	cmp	r1, #3
     81e:	d005      	beq.n	82c <_sercom_get_default_pad+0x4c>
	return 0;
     820:	2000      	movs	r0, #0
     822:	e7e4      	b.n	7ee <_sercom_get_default_pad+0xe>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     824:	4809      	ldr	r0, [pc, #36]	; (84c <_sercom_get_default_pad+0x6c>)
     826:	e7e2      	b.n	7ee <_sercom_get_default_pad+0xe>
     828:	4809      	ldr	r0, [pc, #36]	; (850 <_sercom_get_default_pad+0x70>)
     82a:	e7e0      	b.n	7ee <_sercom_get_default_pad+0xe>
     82c:	4809      	ldr	r0, [pc, #36]	; (854 <_sercom_get_default_pad+0x74>)
     82e:	e7de      	b.n	7ee <_sercom_get_default_pad+0xe>
     830:	4809      	ldr	r0, [pc, #36]	; (858 <_sercom_get_default_pad+0x78>)
     832:	e7dc      	b.n	7ee <_sercom_get_default_pad+0xe>
     834:	4809      	ldr	r0, [pc, #36]	; (85c <_sercom_get_default_pad+0x7c>)
     836:	e7da      	b.n	7ee <_sercom_get_default_pad+0xe>
     838:	42000800 	.word	0x42000800
     83c:	42000c00 	.word	0x42000c00
     840:	00050003 	.word	0x00050003
     844:	00080003 	.word	0x00080003
     848:	00090003 	.word	0x00090003
     84c:	001f0002 	.word	0x001f0002
     850:	00180002 	.word	0x00180002
     854:	00190002 	.word	0x00190002
     858:	00040003 	.word	0x00040003
     85c:	001e0002 	.word	0x001e0002

00000860 <_sercom_get_sercom_inst_index>:
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     860:	4b06      	ldr	r3, [pc, #24]	; (87c <_sercom_get_sercom_inst_index+0x1c>)
     862:	4298      	cmp	r0, r3
     864:	d008      	beq.n	878 <_sercom_get_sercom_inst_index+0x18>
     866:	4a06      	ldr	r2, [pc, #24]	; (880 <_sercom_get_sercom_inst_index+0x20>)
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     868:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     86a:	4290      	cmp	r0, r2
     86c:	d001      	beq.n	872 <_sercom_get_sercom_inst_index+0x12>
}
     86e:	0018      	movs	r0, r3
     870:	4770      	bx	lr
     872:	3301      	adds	r3, #1
			return i;
     874:	b2db      	uxtb	r3, r3
     876:	e7fa      	b.n	86e <_sercom_get_sercom_inst_index+0xe>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     878:	2300      	movs	r3, #0
     87a:	e7fb      	b.n	874 <_sercom_get_sercom_inst_index+0x14>
     87c:	42000800 	.word	0x42000800
     880:	42000c00 	.word	0x42000c00

00000884 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     884:	4770      	bx	lr
	...

00000888 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     888:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     88a:	4b09      	ldr	r3, [pc, #36]	; (8b0 <_sercom_set_handler+0x28>)
     88c:	781b      	ldrb	r3, [r3, #0]
     88e:	2b00      	cmp	r3, #0
     890:	d10a      	bne.n	8a8 <_sercom_set_handler+0x20>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     892:	4c08      	ldr	r4, [pc, #32]	; (8b4 <_sercom_set_handler+0x2c>)
     894:	4d08      	ldr	r5, [pc, #32]	; (8b8 <_sercom_set_handler+0x30>)
     896:	6025      	str	r5, [r4, #0]
			_sercom_instances[i] = NULL;
     898:	4b08      	ldr	r3, [pc, #32]	; (8bc <_sercom_set_handler+0x34>)
     89a:	2200      	movs	r2, #0
     89c:	601a      	str	r2, [r3, #0]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     89e:	6065      	str	r5, [r4, #4]
			_sercom_instances[i] = NULL;
     8a0:	605a      	str	r2, [r3, #4]
		}

		_handler_table_initialized = true;
     8a2:	3201      	adds	r2, #1
     8a4:	4b02      	ldr	r3, [pc, #8]	; (8b0 <_sercom_set_handler+0x28>)
     8a6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     8a8:	0080      	lsls	r0, r0, #2
     8aa:	4b02      	ldr	r3, [pc, #8]	; (8b4 <_sercom_set_handler+0x2c>)
     8ac:	50c1      	str	r1, [r0, r3]
}
     8ae:	bd30      	pop	{r4, r5, pc}
     8b0:	200004f6 	.word	0x200004f6
     8b4:	200004f8 	.word	0x200004f8
     8b8:	00000885 	.word	0x00000885
     8bc:	2000056c 	.word	0x2000056c

000008c0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     8c0:	b510      	push	{r4, lr}
     8c2:	b082      	sub	sp, #8
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     8c4:	ac01      	add	r4, sp, #4
     8c6:	2309      	movs	r3, #9
     8c8:	7023      	strb	r3, [r4, #0]
     8ca:	3301      	adds	r3, #1
     8cc:	7063      	strb	r3, [r4, #1]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     8ce:	4b02      	ldr	r3, [pc, #8]	; (8d8 <_sercom_get_interrupt_vector+0x18>)
     8d0:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     8d2:	5620      	ldrsb	r0, [r4, r0]
}
     8d4:	b002      	add	sp, #8
     8d6:	bd10      	pop	{r4, pc}
     8d8:	00000861 	.word	0x00000861

000008dc <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     8dc:	b510      	push	{r4, lr}
     8de:	4b02      	ldr	r3, [pc, #8]	; (8e8 <SERCOM0_Handler+0xc>)
     8e0:	681b      	ldr	r3, [r3, #0]
     8e2:	2000      	movs	r0, #0
     8e4:	4798      	blx	r3
     8e6:	bd10      	pop	{r4, pc}
     8e8:	200004f8 	.word	0x200004f8

000008ec <SERCOM1_Handler>:
     8ec:	b510      	push	{r4, lr}
     8ee:	4b02      	ldr	r3, [pc, #8]	; (8f8 <SERCOM1_Handler+0xc>)
     8f0:	685b      	ldr	r3, [r3, #4]
     8f2:	2001      	movs	r0, #1
     8f4:	4798      	blx	r3
     8f6:	bd10      	pop	{r4, pc}
     8f8:	200004f8 	.word	0x200004f8

000008fc <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     8fc:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     8fe:	2200      	movs	r2, #0
     900:	4b10      	ldr	r3, [pc, #64]	; (944 <EIC_Handler+0x48>)
     902:	701a      	strb	r2, [r3, #0]
     904:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     906:	4910      	ldr	r1, [pc, #64]	; (948 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     908:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     90a:	4e10      	ldr	r6, [pc, #64]	; (94c <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     90c:	4c0d      	ldr	r4, [pc, #52]	; (944 <EIC_Handler+0x48>)
     90e:	e00a      	b.n	926 <EIC_Handler+0x2a>
		return eics[eic_index];
     910:	490d      	ldr	r1, [pc, #52]	; (948 <EIC_Handler+0x4c>)
     912:	e008      	b.n	926 <EIC_Handler+0x2a>
     914:	7823      	ldrb	r3, [r4, #0]
     916:	3301      	adds	r3, #1
     918:	b2db      	uxtb	r3, r3
     91a:	7023      	strb	r3, [r4, #0]
     91c:	2b0f      	cmp	r3, #15
     91e:	d810      	bhi.n	942 <EIC_Handler+0x46>
		return NULL;
     920:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     922:	2b1f      	cmp	r3, #31
     924:	d9f4      	bls.n	910 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     926:	0028      	movs	r0, r5
     928:	4018      	ands	r0, r3
     92a:	2201      	movs	r2, #1
     92c:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     92e:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     930:	4210      	tst	r0, r2
     932:	d0ef      	beq.n	914 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     934:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     936:	009b      	lsls	r3, r3, #2
     938:	599b      	ldr	r3, [r3, r6]
     93a:	2b00      	cmp	r3, #0
     93c:	d0ea      	beq.n	914 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     93e:	4798      	blx	r3
     940:	e7e8      	b.n	914 <EIC_Handler+0x18>
			}
		}
	}
}
     942:	bd70      	pop	{r4, r5, r6, pc}
     944:	20000574 	.word	0x20000574
     948:	40001800 	.word	0x40001800
     94c:	20000520 	.word	0x20000520

00000950 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     950:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     952:	2000      	movs	r0, #0
     954:	4b08      	ldr	r3, [pc, #32]	; (978 <delay_init+0x28>)
     956:	4798      	blx	r3
     958:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     95a:	4c08      	ldr	r4, [pc, #32]	; (97c <delay_init+0x2c>)
     95c:	21fa      	movs	r1, #250	; 0xfa
     95e:	0089      	lsls	r1, r1, #2
     960:	47a0      	blx	r4
     962:	4b07      	ldr	r3, [pc, #28]	; (980 <delay_init+0x30>)
     964:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     966:	4907      	ldr	r1, [pc, #28]	; (984 <delay_init+0x34>)
     968:	0028      	movs	r0, r5
     96a:	47a0      	blx	r4
     96c:	4b06      	ldr	r3, [pc, #24]	; (988 <delay_init+0x38>)
     96e:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     970:	2205      	movs	r2, #5
     972:	4b06      	ldr	r3, [pc, #24]	; (98c <delay_init+0x3c>)
     974:	601a      	str	r2, [r3, #0]
}
     976:	bd70      	pop	{r4, r5, r6, pc}
     978:	00000ab9 	.word	0x00000ab9
     97c:	00000ddd 	.word	0x00000ddd
     980:	2000000c 	.word	0x2000000c
     984:	000f4240 	.word	0x000f4240
     988:	20000010 	.word	0x20000010
     98c:	e000e010 	.word	0xe000e010

00000990 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     990:	4b0c      	ldr	r3, [pc, #48]	; (9c4 <cpu_irq_enter_critical+0x34>)
     992:	681b      	ldr	r3, [r3, #0]
     994:	2b00      	cmp	r3, #0
     996:	d106      	bne.n	9a6 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     998:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     99c:	2b00      	cmp	r3, #0
     99e:	d007      	beq.n	9b0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     9a0:	2200      	movs	r2, #0
     9a2:	4b09      	ldr	r3, [pc, #36]	; (9c8 <cpu_irq_enter_critical+0x38>)
     9a4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     9a6:	4a07      	ldr	r2, [pc, #28]	; (9c4 <cpu_irq_enter_critical+0x34>)
     9a8:	6813      	ldr	r3, [r2, #0]
     9aa:	3301      	adds	r3, #1
     9ac:	6013      	str	r3, [r2, #0]
}
     9ae:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     9b0:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     9b2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     9b6:	2200      	movs	r2, #0
     9b8:	4b04      	ldr	r3, [pc, #16]	; (9cc <cpu_irq_enter_critical+0x3c>)
     9ba:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     9bc:	3201      	adds	r2, #1
     9be:	4b02      	ldr	r3, [pc, #8]	; (9c8 <cpu_irq_enter_critical+0x38>)
     9c0:	701a      	strb	r2, [r3, #0]
     9c2:	e7f0      	b.n	9a6 <cpu_irq_enter_critical+0x16>
     9c4:	20000500 	.word	0x20000500
     9c8:	20000504 	.word	0x20000504
     9cc:	20000014 	.word	0x20000014

000009d0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     9d0:	4b08      	ldr	r3, [pc, #32]	; (9f4 <cpu_irq_leave_critical+0x24>)
     9d2:	681a      	ldr	r2, [r3, #0]
     9d4:	3a01      	subs	r2, #1
     9d6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     9d8:	681b      	ldr	r3, [r3, #0]
     9da:	2b00      	cmp	r3, #0
     9dc:	d109      	bne.n	9f2 <cpu_irq_leave_critical+0x22>
     9de:	4b06      	ldr	r3, [pc, #24]	; (9f8 <cpu_irq_leave_critical+0x28>)
     9e0:	781b      	ldrb	r3, [r3, #0]
     9e2:	2b00      	cmp	r3, #0
     9e4:	d005      	beq.n	9f2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     9e6:	2201      	movs	r2, #1
     9e8:	4b04      	ldr	r3, [pc, #16]	; (9fc <cpu_irq_leave_critical+0x2c>)
     9ea:	701a      	strb	r2, [r3, #0]
     9ec:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     9f0:	b662      	cpsie	i
	}
}
     9f2:	4770      	bx	lr
     9f4:	20000500 	.word	0x20000500
     9f8:	20000504 	.word	0x20000504
     9fc:	20000014 	.word	0x20000014

00000a00 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     a00:	b510      	push	{r4, lr}
	switch (clock_source) {
     a02:	2808      	cmp	r0, #8
     a04:	d803      	bhi.n	a0e <system_clock_source_get_hz+0xe>
     a06:	0080      	lsls	r0, r0, #2
     a08:	4b1c      	ldr	r3, [pc, #112]	; (a7c <system_clock_source_get_hz+0x7c>)
     a0a:	581b      	ldr	r3, [r3, r0]
     a0c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     a0e:	2000      	movs	r0, #0
     a10:	e032      	b.n	a78 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
     a12:	4b1b      	ldr	r3, [pc, #108]	; (a80 <system_clock_source_get_hz+0x80>)
     a14:	6918      	ldr	r0, [r3, #16]
     a16:	e02f      	b.n	a78 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     a18:	4b1a      	ldr	r3, [pc, #104]	; (a84 <system_clock_source_get_hz+0x84>)
     a1a:	6a1b      	ldr	r3, [r3, #32]
     a1c:	059b      	lsls	r3, r3, #22
     a1e:	0f9b      	lsrs	r3, r3, #30
     a20:	4819      	ldr	r0, [pc, #100]	; (a88 <system_clock_source_get_hz+0x88>)
     a22:	40d8      	lsrs	r0, r3
     a24:	e028      	b.n	a78 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
     a26:	4b16      	ldr	r3, [pc, #88]	; (a80 <system_clock_source_get_hz+0x80>)
     a28:	6958      	ldr	r0, [r3, #20]
     a2a:	e025      	b.n	a78 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     a2c:	4b14      	ldr	r3, [pc, #80]	; (a80 <system_clock_source_get_hz+0x80>)
     a2e:	681b      	ldr	r3, [r3, #0]
			return 0;
     a30:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     a32:	079b      	lsls	r3, r3, #30
     a34:	d520      	bpl.n	a78 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     a36:	4913      	ldr	r1, [pc, #76]	; (a84 <system_clock_source_get_hz+0x84>)
     a38:	2210      	movs	r2, #16
     a3a:	68cb      	ldr	r3, [r1, #12]
     a3c:	421a      	tst	r2, r3
     a3e:	d0fc      	beq.n	a3a <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
     a40:	4b0f      	ldr	r3, [pc, #60]	; (a80 <system_clock_source_get_hz+0x80>)
     a42:	681a      	ldr	r2, [r3, #0]
     a44:	2324      	movs	r3, #36	; 0x24
     a46:	4013      	ands	r3, r2
     a48:	2b04      	cmp	r3, #4
     a4a:	d001      	beq.n	a50 <system_clock_source_get_hz+0x50>
			return 48000000UL;
     a4c:	480f      	ldr	r0, [pc, #60]	; (a8c <system_clock_source_get_hz+0x8c>)
     a4e:	e013      	b.n	a78 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     a50:	2000      	movs	r0, #0
     a52:	4b0f      	ldr	r3, [pc, #60]	; (a90 <system_clock_source_get_hz+0x90>)
     a54:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     a56:	4b0a      	ldr	r3, [pc, #40]	; (a80 <system_clock_source_get_hz+0x80>)
     a58:	689b      	ldr	r3, [r3, #8]
     a5a:	041b      	lsls	r3, r3, #16
     a5c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     a5e:	4358      	muls	r0, r3
     a60:	e00a      	b.n	a78 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     a62:	2350      	movs	r3, #80	; 0x50
     a64:	4a07      	ldr	r2, [pc, #28]	; (a84 <system_clock_source_get_hz+0x84>)
     a66:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     a68:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     a6a:	075b      	lsls	r3, r3, #29
     a6c:	d504      	bpl.n	a78 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
     a6e:	4b04      	ldr	r3, [pc, #16]	; (a80 <system_clock_source_get_hz+0x80>)
     a70:	68d8      	ldr	r0, [r3, #12]
     a72:	e001      	b.n	a78 <system_clock_source_get_hz+0x78>
		return 32768UL;
     a74:	2080      	movs	r0, #128	; 0x80
     a76:	0200      	lsls	r0, r0, #8
	}
}
     a78:	bd10      	pop	{r4, pc}
     a7a:	46c0      	nop			; (mov r8, r8)
     a7c:	00001094 	.word	0x00001094
     a80:	20000508 	.word	0x20000508
     a84:	40000800 	.word	0x40000800
     a88:	007a1200 	.word	0x007a1200
     a8c:	02dc6c00 	.word	0x02dc6c00
     a90:	00000bed 	.word	0x00000bed

00000a94 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
     a94:	4a06      	ldr	r2, [pc, #24]	; (ab0 <system_gclk_init+0x1c>)
     a96:	6993      	ldr	r3, [r2, #24]
     a98:	2108      	movs	r1, #8
     a9a:	430b      	orrs	r3, r1
     a9c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     a9e:	2201      	movs	r2, #1
     aa0:	4b04      	ldr	r3, [pc, #16]	; (ab4 <system_gclk_init+0x20>)
     aa2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     aa4:	0019      	movs	r1, r3
     aa6:	780b      	ldrb	r3, [r1, #0]
     aa8:	4213      	tst	r3, r2
     aaa:	d1fc      	bne.n	aa6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     aac:	4770      	bx	lr
     aae:	46c0      	nop			; (mov r8, r8)
     ab0:	40000400 	.word	0x40000400
     ab4:	40000c00 	.word	0x40000c00

00000ab8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     ab8:	b570      	push	{r4, r5, r6, lr}
     aba:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     abc:	4a1a      	ldr	r2, [pc, #104]	; (b28 <system_gclk_gen_get_hz+0x70>)
     abe:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     ac0:	b25b      	sxtb	r3, r3
     ac2:	2b00      	cmp	r3, #0
     ac4:	dbfb      	blt.n	abe <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
     ac6:	4b19      	ldr	r3, [pc, #100]	; (b2c <system_gclk_gen_get_hz+0x74>)
     ac8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     aca:	4b19      	ldr	r3, [pc, #100]	; (b30 <system_gclk_gen_get_hz+0x78>)
     acc:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     ace:	4a16      	ldr	r2, [pc, #88]	; (b28 <system_gclk_gen_get_hz+0x70>)
     ad0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     ad2:	b25b      	sxtb	r3, r3
     ad4:	2b00      	cmp	r3, #0
     ad6:	dbfb      	blt.n	ad0 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     ad8:	4e13      	ldr	r6, [pc, #76]	; (b28 <system_gclk_gen_get_hz+0x70>)
     ada:	6870      	ldr	r0, [r6, #4]
     adc:	04c0      	lsls	r0, r0, #19
     ade:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
     ae0:	4b14      	ldr	r3, [pc, #80]	; (b34 <system_gclk_gen_get_hz+0x7c>)
     ae2:	4798      	blx	r3
     ae4:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     ae6:	4b12      	ldr	r3, [pc, #72]	; (b30 <system_gclk_gen_get_hz+0x78>)
     ae8:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
     aea:	6876      	ldr	r6, [r6, #4]
     aec:	02f6      	lsls	r6, r6, #11
     aee:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     af0:	4b11      	ldr	r3, [pc, #68]	; (b38 <system_gclk_gen_get_hz+0x80>)
     af2:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     af4:	4a0c      	ldr	r2, [pc, #48]	; (b28 <system_gclk_gen_get_hz+0x70>)
     af6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     af8:	b25b      	sxtb	r3, r3
     afa:	2b00      	cmp	r3, #0
     afc:	dbfb      	blt.n	af6 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
     afe:	4b0a      	ldr	r3, [pc, #40]	; (b28 <system_gclk_gen_get_hz+0x70>)
     b00:	689c      	ldr	r4, [r3, #8]
     b02:	0224      	lsls	r4, r4, #8
     b04:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
     b06:	4b0d      	ldr	r3, [pc, #52]	; (b3c <system_gclk_gen_get_hz+0x84>)
     b08:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     b0a:	2e00      	cmp	r6, #0
     b0c:	d107      	bne.n	b1e <system_gclk_gen_get_hz+0x66>
     b0e:	2c01      	cmp	r4, #1
     b10:	d907      	bls.n	b22 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
     b12:	0021      	movs	r1, r4
     b14:	0028      	movs	r0, r5
     b16:	4b0a      	ldr	r3, [pc, #40]	; (b40 <system_gclk_gen_get_hz+0x88>)
     b18:	4798      	blx	r3
     b1a:	0005      	movs	r5, r0
     b1c:	e001      	b.n	b22 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
     b1e:	3401      	adds	r4, #1
     b20:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
     b22:	0028      	movs	r0, r5
     b24:	bd70      	pop	{r4, r5, r6, pc}
     b26:	46c0      	nop			; (mov r8, r8)
     b28:	40000c00 	.word	0x40000c00
     b2c:	00000991 	.word	0x00000991
     b30:	40000c04 	.word	0x40000c04
     b34:	00000a01 	.word	0x00000a01
     b38:	40000c08 	.word	0x40000c08
     b3c:	000009d1 	.word	0x000009d1
     b40:	00000ddd 	.word	0x00000ddd

00000b44 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
     b44:	b510      	push	{r4, lr}
     b46:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     b48:	4b06      	ldr	r3, [pc, #24]	; (b64 <system_gclk_chan_enable+0x20>)
     b4a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     b4c:	4b06      	ldr	r3, [pc, #24]	; (b68 <system_gclk_chan_enable+0x24>)
     b4e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
     b50:	4a06      	ldr	r2, [pc, #24]	; (b6c <system_gclk_chan_enable+0x28>)
     b52:	8853      	ldrh	r3, [r2, #2]
     b54:	2180      	movs	r1, #128	; 0x80
     b56:	01c9      	lsls	r1, r1, #7
     b58:	430b      	orrs	r3, r1
     b5a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
     b5c:	4b04      	ldr	r3, [pc, #16]	; (b70 <system_gclk_chan_enable+0x2c>)
     b5e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     b60:	bd10      	pop	{r4, pc}
     b62:	46c0      	nop			; (mov r8, r8)
     b64:	00000991 	.word	0x00000991
     b68:	40000c02 	.word	0x40000c02
     b6c:	40000c00 	.word	0x40000c00
     b70:	000009d1 	.word	0x000009d1

00000b74 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     b74:	b510      	push	{r4, lr}
     b76:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     b78:	4b0f      	ldr	r3, [pc, #60]	; (bb8 <system_gclk_chan_disable+0x44>)
     b7a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     b7c:	4b0f      	ldr	r3, [pc, #60]	; (bbc <system_gclk_chan_disable+0x48>)
     b7e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     b80:	4a0f      	ldr	r2, [pc, #60]	; (bc0 <system_gclk_chan_disable+0x4c>)
     b82:	8853      	ldrh	r3, [r2, #2]
     b84:	051b      	lsls	r3, r3, #20
     b86:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
     b88:	8853      	ldrh	r3, [r2, #2]
     b8a:	490e      	ldr	r1, [pc, #56]	; (bc4 <system_gclk_chan_disable+0x50>)
     b8c:	400b      	ands	r3, r1
     b8e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     b90:	8853      	ldrh	r3, [r2, #2]
     b92:	490d      	ldr	r1, [pc, #52]	; (bc8 <system_gclk_chan_disable+0x54>)
     b94:	400b      	ands	r3, r1
     b96:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
     b98:	0011      	movs	r1, r2
     b9a:	2280      	movs	r2, #128	; 0x80
     b9c:	01d2      	lsls	r2, r2, #7
     b9e:	884b      	ldrh	r3, [r1, #2]
     ba0:	4213      	tst	r3, r2
     ba2:	d1fc      	bne.n	b9e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
     ba4:	4906      	ldr	r1, [pc, #24]	; (bc0 <system_gclk_chan_disable+0x4c>)
     ba6:	884a      	ldrh	r2, [r1, #2]
     ba8:	0203      	lsls	r3, r0, #8
     baa:	4806      	ldr	r0, [pc, #24]	; (bc4 <system_gclk_chan_disable+0x50>)
     bac:	4002      	ands	r2, r0
     bae:	4313      	orrs	r3, r2
     bb0:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
     bb2:	4b06      	ldr	r3, [pc, #24]	; (bcc <system_gclk_chan_disable+0x58>)
     bb4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     bb6:	bd10      	pop	{r4, pc}
     bb8:	00000991 	.word	0x00000991
     bbc:	40000c02 	.word	0x40000c02
     bc0:	40000c00 	.word	0x40000c00
     bc4:	fffff0ff 	.word	0xfffff0ff
     bc8:	ffffbfff 	.word	0xffffbfff
     bcc:	000009d1 	.word	0x000009d1

00000bd0 <system_gclk_chan_set_config>:
{
     bd0:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
     bd2:	780c      	ldrb	r4, [r1, #0]
     bd4:	0224      	lsls	r4, r4, #8
     bd6:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
     bd8:	4b02      	ldr	r3, [pc, #8]	; (be4 <system_gclk_chan_set_config+0x14>)
     bda:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
     bdc:	b2a4      	uxth	r4, r4
     bde:	4b02      	ldr	r3, [pc, #8]	; (be8 <system_gclk_chan_set_config+0x18>)
     be0:	805c      	strh	r4, [r3, #2]
}
     be2:	bd10      	pop	{r4, pc}
     be4:	00000b75 	.word	0x00000b75
     be8:	40000c00 	.word	0x40000c00

00000bec <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
     bec:	b510      	push	{r4, lr}
     bee:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     bf0:	4b06      	ldr	r3, [pc, #24]	; (c0c <system_gclk_chan_get_hz+0x20>)
     bf2:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     bf4:	4b06      	ldr	r3, [pc, #24]	; (c10 <system_gclk_chan_get_hz+0x24>)
     bf6:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
     bf8:	4b06      	ldr	r3, [pc, #24]	; (c14 <system_gclk_chan_get_hz+0x28>)
     bfa:	885c      	ldrh	r4, [r3, #2]
     bfc:	0524      	lsls	r4, r4, #20
     bfe:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
     c00:	4b05      	ldr	r3, [pc, #20]	; (c18 <system_gclk_chan_get_hz+0x2c>)
     c02:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
     c04:	0020      	movs	r0, r4
     c06:	4b05      	ldr	r3, [pc, #20]	; (c1c <system_gclk_chan_get_hz+0x30>)
     c08:	4798      	blx	r3
}
     c0a:	bd10      	pop	{r4, pc}
     c0c:	00000991 	.word	0x00000991
     c10:	40000c02 	.word	0x40000c02
     c14:	40000c00 	.word	0x40000c00
     c18:	000009d1 	.word	0x000009d1
     c1c:	00000ab9 	.word	0x00000ab9

00000c20 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
     c20:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
     c22:	78d3      	ldrb	r3, [r2, #3]
     c24:	2b00      	cmp	r3, #0
     c26:	d135      	bne.n	c94 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
     c28:	7813      	ldrb	r3, [r2, #0]
     c2a:	2b80      	cmp	r3, #128	; 0x80
     c2c:	d029      	beq.n	c82 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
     c2e:	061b      	lsls	r3, r3, #24
     c30:	2480      	movs	r4, #128	; 0x80
     c32:	0264      	lsls	r4, r4, #9
     c34:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
     c36:	7854      	ldrb	r4, [r2, #1]
     c38:	2502      	movs	r5, #2
     c3a:	43ac      	bics	r4, r5
     c3c:	d106      	bne.n	c4c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
     c3e:	7894      	ldrb	r4, [r2, #2]
     c40:	2c00      	cmp	r4, #0
     c42:	d120      	bne.n	c86 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
     c44:	2480      	movs	r4, #128	; 0x80
     c46:	02a4      	lsls	r4, r4, #10
     c48:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
     c4a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     c4c:	7854      	ldrb	r4, [r2, #1]
     c4e:	3c01      	subs	r4, #1
     c50:	2c01      	cmp	r4, #1
     c52:	d91c      	bls.n	c8e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     c54:	040d      	lsls	r5, r1, #16
     c56:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     c58:	24a0      	movs	r4, #160	; 0xa0
     c5a:	05e4      	lsls	r4, r4, #23
     c5c:	432c      	orrs	r4, r5
     c5e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     c60:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
     c62:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     c64:	24d0      	movs	r4, #208	; 0xd0
     c66:	0624      	lsls	r4, r4, #24
     c68:	432c      	orrs	r4, r5
     c6a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     c6c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
     c6e:	78d4      	ldrb	r4, [r2, #3]
     c70:	2c00      	cmp	r4, #0
     c72:	d122      	bne.n	cba <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
     c74:	035b      	lsls	r3, r3, #13
     c76:	d51c      	bpl.n	cb2 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
     c78:	7893      	ldrb	r3, [r2, #2]
     c7a:	2b01      	cmp	r3, #1
     c7c:	d01e      	beq.n	cbc <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
     c7e:	6141      	str	r1, [r0, #20]
     c80:	e017      	b.n	cb2 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
     c82:	2300      	movs	r3, #0
     c84:	e7d7      	b.n	c36 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
     c86:	24c0      	movs	r4, #192	; 0xc0
     c88:	02e4      	lsls	r4, r4, #11
     c8a:	4323      	orrs	r3, r4
     c8c:	e7dd      	b.n	c4a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
     c8e:	4c0d      	ldr	r4, [pc, #52]	; (cc4 <_system_pinmux_config+0xa4>)
     c90:	4023      	ands	r3, r4
     c92:	e7df      	b.n	c54 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
     c94:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     c96:	040c      	lsls	r4, r1, #16
     c98:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     c9a:	23a0      	movs	r3, #160	; 0xa0
     c9c:	05db      	lsls	r3, r3, #23
     c9e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     ca0:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
     ca2:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     ca4:	23d0      	movs	r3, #208	; 0xd0
     ca6:	061b      	lsls	r3, r3, #24
     ca8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     caa:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
     cac:	78d3      	ldrb	r3, [r2, #3]
     cae:	2b00      	cmp	r3, #0
     cb0:	d103      	bne.n	cba <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     cb2:	7853      	ldrb	r3, [r2, #1]
     cb4:	3b01      	subs	r3, #1
     cb6:	2b01      	cmp	r3, #1
     cb8:	d902      	bls.n	cc0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
     cba:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
     cbc:	6181      	str	r1, [r0, #24]
     cbe:	e7f8      	b.n	cb2 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
     cc0:	6081      	str	r1, [r0, #8]
}
     cc2:	e7fa      	b.n	cba <_system_pinmux_config+0x9a>
     cc4:	fffbffff 	.word	0xfffbffff

00000cc8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
     cc8:	b510      	push	{r4, lr}
     cca:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     ccc:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     cce:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     cd0:	2900      	cmp	r1, #0
     cd2:	d104      	bne.n	cde <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
     cd4:	0943      	lsrs	r3, r0, #5
     cd6:	01db      	lsls	r3, r3, #7
     cd8:	4905      	ldr	r1, [pc, #20]	; (cf0 <system_pinmux_pin_set_config+0x28>)
     cda:	468c      	mov	ip, r1
     cdc:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
     cde:	241f      	movs	r4, #31
     ce0:	4020      	ands	r0, r4
     ce2:	2101      	movs	r1, #1
     ce4:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
     ce6:	0018      	movs	r0, r3
     ce8:	4b02      	ldr	r3, [pc, #8]	; (cf4 <system_pinmux_pin_set_config+0x2c>)
     cea:	4798      	blx	r3
}
     cec:	bd10      	pop	{r4, pc}
     cee:	46c0      	nop			; (mov r8, r8)
     cf0:	41004400 	.word	0x41004400
     cf4:	00000c21 	.word	0x00000c21

00000cf8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     cf8:	e7fe      	b.n	cf8 <Dummy_Handler>
	...

00000cfc <Reset_Handler>:
{
     cfc:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     cfe:	4a26      	ldr	r2, [pc, #152]	; (d98 <Reset_Handler+0x9c>)
     d00:	4b26      	ldr	r3, [pc, #152]	; (d9c <Reset_Handler+0xa0>)
     d02:	429a      	cmp	r2, r3
     d04:	d011      	beq.n	d2a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     d06:	001a      	movs	r2, r3
     d08:	4b25      	ldr	r3, [pc, #148]	; (da0 <Reset_Handler+0xa4>)
     d0a:	429a      	cmp	r2, r3
     d0c:	d20d      	bcs.n	d2a <Reset_Handler+0x2e>
     d0e:	4a25      	ldr	r2, [pc, #148]	; (da4 <Reset_Handler+0xa8>)
     d10:	3303      	adds	r3, #3
     d12:	1a9b      	subs	r3, r3, r2
     d14:	089b      	lsrs	r3, r3, #2
     d16:	3301      	adds	r3, #1
     d18:	009b      	lsls	r3, r3, #2
     d1a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     d1c:	481f      	ldr	r0, [pc, #124]	; (d9c <Reset_Handler+0xa0>)
     d1e:	491e      	ldr	r1, [pc, #120]	; (d98 <Reset_Handler+0x9c>)
     d20:	588c      	ldr	r4, [r1, r2]
     d22:	5084      	str	r4, [r0, r2]
     d24:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     d26:	429a      	cmp	r2, r3
     d28:	d1fa      	bne.n	d20 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     d2a:	4a1f      	ldr	r2, [pc, #124]	; (da8 <Reset_Handler+0xac>)
     d2c:	4b1f      	ldr	r3, [pc, #124]	; (dac <Reset_Handler+0xb0>)
     d2e:	429a      	cmp	r2, r3
     d30:	d20a      	bcs.n	d48 <Reset_Handler+0x4c>
     d32:	43d3      	mvns	r3, r2
     d34:	491d      	ldr	r1, [pc, #116]	; (dac <Reset_Handler+0xb0>)
     d36:	185b      	adds	r3, r3, r1
     d38:	2103      	movs	r1, #3
     d3a:	438b      	bics	r3, r1
     d3c:	3304      	adds	r3, #4
     d3e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     d40:	2100      	movs	r1, #0
     d42:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     d44:	4293      	cmp	r3, r2
     d46:	d1fc      	bne.n	d42 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     d48:	4a19      	ldr	r2, [pc, #100]	; (db0 <Reset_Handler+0xb4>)
     d4a:	21ff      	movs	r1, #255	; 0xff
     d4c:	4b19      	ldr	r3, [pc, #100]	; (db4 <Reset_Handler+0xb8>)
     d4e:	438b      	bics	r3, r1
     d50:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     d52:	39fd      	subs	r1, #253	; 0xfd
     d54:	2390      	movs	r3, #144	; 0x90
     d56:	005b      	lsls	r3, r3, #1
     d58:	4a17      	ldr	r2, [pc, #92]	; (db8 <Reset_Handler+0xbc>)
     d5a:	50d1      	str	r1, [r2, r3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     d5c:	4b17      	ldr	r3, [pc, #92]	; (dbc <Reset_Handler+0xc0>)
     d5e:	7b9a      	ldrb	r2, [r3, #14]
     d60:	312e      	adds	r1, #46	; 0x2e
     d62:	438a      	bics	r2, r1
     d64:	2120      	movs	r1, #32
     d66:	430a      	orrs	r2, r1
     d68:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     d6a:	7b9a      	ldrb	r2, [r3, #14]
     d6c:	210c      	movs	r1, #12
     d6e:	438a      	bics	r2, r1
     d70:	2108      	movs	r1, #8
     d72:	430a      	orrs	r2, r1
     d74:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     d76:	7b9a      	ldrb	r2, [r3, #14]
     d78:	2103      	movs	r1, #3
     d7a:	438a      	bics	r2, r1
     d7c:	2102      	movs	r1, #2
     d7e:	430a      	orrs	r2, r1
     d80:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     d82:	4a0f      	ldr	r2, [pc, #60]	; (dc0 <Reset_Handler+0xc4>)
     d84:	6853      	ldr	r3, [r2, #4]
     d86:	2180      	movs	r1, #128	; 0x80
     d88:	430b      	orrs	r3, r1
     d8a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     d8c:	4b0d      	ldr	r3, [pc, #52]	; (dc4 <Reset_Handler+0xc8>)
     d8e:	4798      	blx	r3
        main();
     d90:	4b0d      	ldr	r3, [pc, #52]	; (dc8 <Reset_Handler+0xcc>)
     d92:	4798      	blx	r3
     d94:	e7fe      	b.n	d94 <Reset_Handler+0x98>
     d96:	46c0      	nop			; (mov r8, r8)
     d98:	000010e4 	.word	0x000010e4
     d9c:	20000000 	.word	0x20000000
     da0:	2000044c 	.word	0x2000044c
     da4:	20000004 	.word	0x20000004
     da8:	2000044c 	.word	0x2000044c
     dac:	2000059c 	.word	0x2000059c
     db0:	e000ed00 	.word	0xe000ed00
     db4:	00000000 	.word	0x00000000
     db8:	41007000 	.word	0x41007000
     dbc:	41004800 	.word	0x41004800
     dc0:	41004000 	.word	0x41004000
     dc4:	00000ef5 	.word	0x00000ef5
     dc8:	00000239 	.word	0x00000239

00000dcc <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
     dcc:	4a01      	ldr	r2, [pc, #4]	; (dd4 <SystemInit+0x8>)
     dce:	4b02      	ldr	r3, [pc, #8]	; (dd8 <SystemInit+0xc>)
     dd0:	601a      	str	r2, [r3, #0]
	return;
}
     dd2:	4770      	bx	lr
     dd4:	000f4240 	.word	0x000f4240
     dd8:	20000018 	.word	0x20000018

00000ddc <__udivsi3>:
     ddc:	2200      	movs	r2, #0
     dde:	0843      	lsrs	r3, r0, #1
     de0:	428b      	cmp	r3, r1
     de2:	d374      	bcc.n	ece <__udivsi3+0xf2>
     de4:	0903      	lsrs	r3, r0, #4
     de6:	428b      	cmp	r3, r1
     de8:	d35f      	bcc.n	eaa <__udivsi3+0xce>
     dea:	0a03      	lsrs	r3, r0, #8
     dec:	428b      	cmp	r3, r1
     dee:	d344      	bcc.n	e7a <__udivsi3+0x9e>
     df0:	0b03      	lsrs	r3, r0, #12
     df2:	428b      	cmp	r3, r1
     df4:	d328      	bcc.n	e48 <__udivsi3+0x6c>
     df6:	0c03      	lsrs	r3, r0, #16
     df8:	428b      	cmp	r3, r1
     dfa:	d30d      	bcc.n	e18 <__udivsi3+0x3c>
     dfc:	22ff      	movs	r2, #255	; 0xff
     dfe:	0209      	lsls	r1, r1, #8
     e00:	ba12      	rev	r2, r2
     e02:	0c03      	lsrs	r3, r0, #16
     e04:	428b      	cmp	r3, r1
     e06:	d302      	bcc.n	e0e <__udivsi3+0x32>
     e08:	1212      	asrs	r2, r2, #8
     e0a:	0209      	lsls	r1, r1, #8
     e0c:	d065      	beq.n	eda <__udivsi3+0xfe>
     e0e:	0b03      	lsrs	r3, r0, #12
     e10:	428b      	cmp	r3, r1
     e12:	d319      	bcc.n	e48 <__udivsi3+0x6c>
     e14:	e000      	b.n	e18 <__udivsi3+0x3c>
     e16:	0a09      	lsrs	r1, r1, #8
     e18:	0bc3      	lsrs	r3, r0, #15
     e1a:	428b      	cmp	r3, r1
     e1c:	d301      	bcc.n	e22 <__udivsi3+0x46>
     e1e:	03cb      	lsls	r3, r1, #15
     e20:	1ac0      	subs	r0, r0, r3
     e22:	4152      	adcs	r2, r2
     e24:	0b83      	lsrs	r3, r0, #14
     e26:	428b      	cmp	r3, r1
     e28:	d301      	bcc.n	e2e <__udivsi3+0x52>
     e2a:	038b      	lsls	r3, r1, #14
     e2c:	1ac0      	subs	r0, r0, r3
     e2e:	4152      	adcs	r2, r2
     e30:	0b43      	lsrs	r3, r0, #13
     e32:	428b      	cmp	r3, r1
     e34:	d301      	bcc.n	e3a <__udivsi3+0x5e>
     e36:	034b      	lsls	r3, r1, #13
     e38:	1ac0      	subs	r0, r0, r3
     e3a:	4152      	adcs	r2, r2
     e3c:	0b03      	lsrs	r3, r0, #12
     e3e:	428b      	cmp	r3, r1
     e40:	d301      	bcc.n	e46 <__udivsi3+0x6a>
     e42:	030b      	lsls	r3, r1, #12
     e44:	1ac0      	subs	r0, r0, r3
     e46:	4152      	adcs	r2, r2
     e48:	0ac3      	lsrs	r3, r0, #11
     e4a:	428b      	cmp	r3, r1
     e4c:	d301      	bcc.n	e52 <__udivsi3+0x76>
     e4e:	02cb      	lsls	r3, r1, #11
     e50:	1ac0      	subs	r0, r0, r3
     e52:	4152      	adcs	r2, r2
     e54:	0a83      	lsrs	r3, r0, #10
     e56:	428b      	cmp	r3, r1
     e58:	d301      	bcc.n	e5e <__udivsi3+0x82>
     e5a:	028b      	lsls	r3, r1, #10
     e5c:	1ac0      	subs	r0, r0, r3
     e5e:	4152      	adcs	r2, r2
     e60:	0a43      	lsrs	r3, r0, #9
     e62:	428b      	cmp	r3, r1
     e64:	d301      	bcc.n	e6a <__udivsi3+0x8e>
     e66:	024b      	lsls	r3, r1, #9
     e68:	1ac0      	subs	r0, r0, r3
     e6a:	4152      	adcs	r2, r2
     e6c:	0a03      	lsrs	r3, r0, #8
     e6e:	428b      	cmp	r3, r1
     e70:	d301      	bcc.n	e76 <__udivsi3+0x9a>
     e72:	020b      	lsls	r3, r1, #8
     e74:	1ac0      	subs	r0, r0, r3
     e76:	4152      	adcs	r2, r2
     e78:	d2cd      	bcs.n	e16 <__udivsi3+0x3a>
     e7a:	09c3      	lsrs	r3, r0, #7
     e7c:	428b      	cmp	r3, r1
     e7e:	d301      	bcc.n	e84 <__udivsi3+0xa8>
     e80:	01cb      	lsls	r3, r1, #7
     e82:	1ac0      	subs	r0, r0, r3
     e84:	4152      	adcs	r2, r2
     e86:	0983      	lsrs	r3, r0, #6
     e88:	428b      	cmp	r3, r1
     e8a:	d301      	bcc.n	e90 <__udivsi3+0xb4>
     e8c:	018b      	lsls	r3, r1, #6
     e8e:	1ac0      	subs	r0, r0, r3
     e90:	4152      	adcs	r2, r2
     e92:	0943      	lsrs	r3, r0, #5
     e94:	428b      	cmp	r3, r1
     e96:	d301      	bcc.n	e9c <__udivsi3+0xc0>
     e98:	014b      	lsls	r3, r1, #5
     e9a:	1ac0      	subs	r0, r0, r3
     e9c:	4152      	adcs	r2, r2
     e9e:	0903      	lsrs	r3, r0, #4
     ea0:	428b      	cmp	r3, r1
     ea2:	d301      	bcc.n	ea8 <__udivsi3+0xcc>
     ea4:	010b      	lsls	r3, r1, #4
     ea6:	1ac0      	subs	r0, r0, r3
     ea8:	4152      	adcs	r2, r2
     eaa:	08c3      	lsrs	r3, r0, #3
     eac:	428b      	cmp	r3, r1
     eae:	d301      	bcc.n	eb4 <__udivsi3+0xd8>
     eb0:	00cb      	lsls	r3, r1, #3
     eb2:	1ac0      	subs	r0, r0, r3
     eb4:	4152      	adcs	r2, r2
     eb6:	0883      	lsrs	r3, r0, #2
     eb8:	428b      	cmp	r3, r1
     eba:	d301      	bcc.n	ec0 <__udivsi3+0xe4>
     ebc:	008b      	lsls	r3, r1, #2
     ebe:	1ac0      	subs	r0, r0, r3
     ec0:	4152      	adcs	r2, r2
     ec2:	0843      	lsrs	r3, r0, #1
     ec4:	428b      	cmp	r3, r1
     ec6:	d301      	bcc.n	ecc <__udivsi3+0xf0>
     ec8:	004b      	lsls	r3, r1, #1
     eca:	1ac0      	subs	r0, r0, r3
     ecc:	4152      	adcs	r2, r2
     ece:	1a41      	subs	r1, r0, r1
     ed0:	d200      	bcs.n	ed4 <__udivsi3+0xf8>
     ed2:	4601      	mov	r1, r0
     ed4:	4152      	adcs	r2, r2
     ed6:	4610      	mov	r0, r2
     ed8:	4770      	bx	lr
     eda:	e7ff      	b.n	edc <__udivsi3+0x100>
     edc:	b501      	push	{r0, lr}
     ede:	2000      	movs	r0, #0
     ee0:	f000 f806 	bl	ef0 <__aeabi_idiv0>
     ee4:	bd02      	pop	{r1, pc}
     ee6:	46c0      	nop			; (mov r8, r8)

00000ee8 <__aeabi_uidivmod>:
     ee8:	2900      	cmp	r1, #0
     eea:	d0f7      	beq.n	edc <__udivsi3+0x100>
     eec:	e776      	b.n	ddc <__udivsi3>
     eee:	4770      	bx	lr

00000ef0 <__aeabi_idiv0>:
     ef0:	4770      	bx	lr
     ef2:	46c0      	nop			; (mov r8, r8)

00000ef4 <__libc_init_array>:
     ef4:	b570      	push	{r4, r5, r6, lr}
     ef6:	4e0d      	ldr	r6, [pc, #52]	; (f2c <__libc_init_array+0x38>)
     ef8:	4d0d      	ldr	r5, [pc, #52]	; (f30 <__libc_init_array+0x3c>)
     efa:	2400      	movs	r4, #0
     efc:	1bad      	subs	r5, r5, r6
     efe:	10ad      	asrs	r5, r5, #2
     f00:	d005      	beq.n	f0e <__libc_init_array+0x1a>
     f02:	00a3      	lsls	r3, r4, #2
     f04:	58f3      	ldr	r3, [r6, r3]
     f06:	3401      	adds	r4, #1
     f08:	4798      	blx	r3
     f0a:	42a5      	cmp	r5, r4
     f0c:	d1f9      	bne.n	f02 <__libc_init_array+0xe>
     f0e:	f000 f8d5 	bl	10bc <_init>
     f12:	4e08      	ldr	r6, [pc, #32]	; (f34 <__libc_init_array+0x40>)
     f14:	4d08      	ldr	r5, [pc, #32]	; (f38 <__libc_init_array+0x44>)
     f16:	2400      	movs	r4, #0
     f18:	1bad      	subs	r5, r5, r6
     f1a:	10ad      	asrs	r5, r5, #2
     f1c:	d005      	beq.n	f2a <__libc_init_array+0x36>
     f1e:	00a3      	lsls	r3, r4, #2
     f20:	58f3      	ldr	r3, [r6, r3]
     f22:	3401      	adds	r4, #1
     f24:	4798      	blx	r3
     f26:	42a5      	cmp	r5, r4
     f28:	d1f9      	bne.n	f1e <__libc_init_array+0x2a>
     f2a:	bd70      	pop	{r4, r5, r6, pc}
     f2c:	000010c8 	.word	0x000010c8
     f30:	000010c8 	.word	0x000010c8
     f34:	000010c8 	.word	0x000010c8
     f38:	000010d4 	.word	0x000010d4

00000f3c <register_fini>:
     f3c:	4b03      	ldr	r3, [pc, #12]	; (f4c <register_fini+0x10>)
     f3e:	b510      	push	{r4, lr}
     f40:	2b00      	cmp	r3, #0
     f42:	d002      	beq.n	f4a <register_fini+0xe>
     f44:	4802      	ldr	r0, [pc, #8]	; (f50 <register_fini+0x14>)
     f46:	f000 f805 	bl	f54 <atexit>
     f4a:	bd10      	pop	{r4, pc}
     f4c:	00000000 	.word	0x00000000
     f50:	00000f65 	.word	0x00000f65

00000f54 <atexit>:
     f54:	b510      	push	{r4, lr}
     f56:	0001      	movs	r1, r0
     f58:	2300      	movs	r3, #0
     f5a:	2200      	movs	r2, #0
     f5c:	2000      	movs	r0, #0
     f5e:	f000 f81f 	bl	fa0 <__register_exitproc>
     f62:	bd10      	pop	{r4, pc}

00000f64 <__libc_fini_array>:
     f64:	b570      	push	{r4, r5, r6, lr}
     f66:	4b09      	ldr	r3, [pc, #36]	; (f8c <__libc_fini_array+0x28>)
     f68:	4c09      	ldr	r4, [pc, #36]	; (f90 <__libc_fini_array+0x2c>)
     f6a:	1ae4      	subs	r4, r4, r3
     f6c:	10a4      	asrs	r4, r4, #2
     f6e:	d009      	beq.n	f84 <__libc_fini_array+0x20>
     f70:	4a08      	ldr	r2, [pc, #32]	; (f94 <__libc_fini_array+0x30>)
     f72:	18a5      	adds	r5, r4, r2
     f74:	00ad      	lsls	r5, r5, #2
     f76:	18ed      	adds	r5, r5, r3
     f78:	682b      	ldr	r3, [r5, #0]
     f7a:	3c01      	subs	r4, #1
     f7c:	4798      	blx	r3
     f7e:	3d04      	subs	r5, #4
     f80:	2c00      	cmp	r4, #0
     f82:	d1f9      	bne.n	f78 <__libc_fini_array+0x14>
     f84:	f000 f8a6 	bl	10d4 <_fini>
     f88:	bd70      	pop	{r4, r5, r6, pc}
     f8a:	46c0      	nop			; (mov r8, r8)
     f8c:	000010e0 	.word	0x000010e0
     f90:	000010e4 	.word	0x000010e4
     f94:	3fffffff 	.word	0x3fffffff

00000f98 <__retarget_lock_acquire_recursive>:
     f98:	4770      	bx	lr
     f9a:	46c0      	nop			; (mov r8, r8)

00000f9c <__retarget_lock_release_recursive>:
     f9c:	4770      	bx	lr
     f9e:	46c0      	nop			; (mov r8, r8)

00000fa0 <__register_exitproc>:
     fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
     fa2:	464e      	mov	r6, r9
     fa4:	4645      	mov	r5, r8
     fa6:	46de      	mov	lr, fp
     fa8:	4657      	mov	r7, sl
     faa:	b5e0      	push	{r5, r6, r7, lr}
     fac:	4d36      	ldr	r5, [pc, #216]	; (1088 <__register_exitproc+0xe8>)
     fae:	b083      	sub	sp, #12
     fb0:	0006      	movs	r6, r0
     fb2:	6828      	ldr	r0, [r5, #0]
     fb4:	4698      	mov	r8, r3
     fb6:	000f      	movs	r7, r1
     fb8:	4691      	mov	r9, r2
     fba:	f7ff ffed 	bl	f98 <__retarget_lock_acquire_recursive>
     fbe:	4b33      	ldr	r3, [pc, #204]	; (108c <__register_exitproc+0xec>)
     fc0:	681c      	ldr	r4, [r3, #0]
     fc2:	23a4      	movs	r3, #164	; 0xa4
     fc4:	005b      	lsls	r3, r3, #1
     fc6:	58e0      	ldr	r0, [r4, r3]
     fc8:	2800      	cmp	r0, #0
     fca:	d052      	beq.n	1072 <__register_exitproc+0xd2>
     fcc:	6843      	ldr	r3, [r0, #4]
     fce:	2b1f      	cmp	r3, #31
     fd0:	dc13      	bgt.n	ffa <__register_exitproc+0x5a>
     fd2:	1c5a      	adds	r2, r3, #1
     fd4:	9201      	str	r2, [sp, #4]
     fd6:	2e00      	cmp	r6, #0
     fd8:	d128      	bne.n	102c <__register_exitproc+0x8c>
     fda:	9a01      	ldr	r2, [sp, #4]
     fdc:	3302      	adds	r3, #2
     fde:	009b      	lsls	r3, r3, #2
     fe0:	6042      	str	r2, [r0, #4]
     fe2:	501f      	str	r7, [r3, r0]
     fe4:	6828      	ldr	r0, [r5, #0]
     fe6:	f7ff ffd9 	bl	f9c <__retarget_lock_release_recursive>
     fea:	2000      	movs	r0, #0
     fec:	b003      	add	sp, #12
     fee:	bc3c      	pop	{r2, r3, r4, r5}
     ff0:	4690      	mov	r8, r2
     ff2:	4699      	mov	r9, r3
     ff4:	46a2      	mov	sl, r4
     ff6:	46ab      	mov	fp, r5
     ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ffa:	4b25      	ldr	r3, [pc, #148]	; (1090 <__register_exitproc+0xf0>)
     ffc:	2b00      	cmp	r3, #0
     ffe:	d03d      	beq.n	107c <__register_exitproc+0xdc>
    1000:	20c8      	movs	r0, #200	; 0xc8
    1002:	0040      	lsls	r0, r0, #1
    1004:	e000      	b.n	1008 <__register_exitproc+0x68>
    1006:	bf00      	nop
    1008:	2800      	cmp	r0, #0
    100a:	d037      	beq.n	107c <__register_exitproc+0xdc>
    100c:	22a4      	movs	r2, #164	; 0xa4
    100e:	2300      	movs	r3, #0
    1010:	0052      	lsls	r2, r2, #1
    1012:	58a1      	ldr	r1, [r4, r2]
    1014:	6043      	str	r3, [r0, #4]
    1016:	6001      	str	r1, [r0, #0]
    1018:	50a0      	str	r0, [r4, r2]
    101a:	3240      	adds	r2, #64	; 0x40
    101c:	5083      	str	r3, [r0, r2]
    101e:	3204      	adds	r2, #4
    1020:	5083      	str	r3, [r0, r2]
    1022:	3301      	adds	r3, #1
    1024:	9301      	str	r3, [sp, #4]
    1026:	2300      	movs	r3, #0
    1028:	2e00      	cmp	r6, #0
    102a:	d0d6      	beq.n	fda <__register_exitproc+0x3a>
    102c:	009a      	lsls	r2, r3, #2
    102e:	4692      	mov	sl, r2
    1030:	4482      	add	sl, r0
    1032:	464a      	mov	r2, r9
    1034:	2188      	movs	r1, #136	; 0x88
    1036:	4654      	mov	r4, sl
    1038:	5062      	str	r2, [r4, r1]
    103a:	22c4      	movs	r2, #196	; 0xc4
    103c:	0052      	lsls	r2, r2, #1
    103e:	4691      	mov	r9, r2
    1040:	4481      	add	r9, r0
    1042:	464a      	mov	r2, r9
    1044:	3987      	subs	r1, #135	; 0x87
    1046:	4099      	lsls	r1, r3
    1048:	6812      	ldr	r2, [r2, #0]
    104a:	468b      	mov	fp, r1
    104c:	430a      	orrs	r2, r1
    104e:	4694      	mov	ip, r2
    1050:	464a      	mov	r2, r9
    1052:	4661      	mov	r1, ip
    1054:	6011      	str	r1, [r2, #0]
    1056:	2284      	movs	r2, #132	; 0x84
    1058:	4641      	mov	r1, r8
    105a:	0052      	lsls	r2, r2, #1
    105c:	50a1      	str	r1, [r4, r2]
    105e:	2e02      	cmp	r6, #2
    1060:	d1bb      	bne.n	fda <__register_exitproc+0x3a>
    1062:	0002      	movs	r2, r0
    1064:	465c      	mov	r4, fp
    1066:	328d      	adds	r2, #141	; 0x8d
    1068:	32ff      	adds	r2, #255	; 0xff
    106a:	6811      	ldr	r1, [r2, #0]
    106c:	430c      	orrs	r4, r1
    106e:	6014      	str	r4, [r2, #0]
    1070:	e7b3      	b.n	fda <__register_exitproc+0x3a>
    1072:	0020      	movs	r0, r4
    1074:	304d      	adds	r0, #77	; 0x4d
    1076:	30ff      	adds	r0, #255	; 0xff
    1078:	50e0      	str	r0, [r4, r3]
    107a:	e7a7      	b.n	fcc <__register_exitproc+0x2c>
    107c:	6828      	ldr	r0, [r5, #0]
    107e:	f7ff ff8d 	bl	f9c <__retarget_lock_release_recursive>
    1082:	2001      	movs	r0, #1
    1084:	4240      	negs	r0, r0
    1086:	e7b1      	b.n	fec <__register_exitproc+0x4c>
    1088:	20000448 	.word	0x20000448
    108c:	000010b8 	.word	0x000010b8
    1090:	00000000 	.word	0x00000000
    1094:	00000a12 	.word	0x00000a12
    1098:	00000a0e 	.word	0x00000a0e
    109c:	00000a0e 	.word	0x00000a0e
    10a0:	00000a74 	.word	0x00000a74
    10a4:	00000a74 	.word	0x00000a74
    10a8:	00000a26 	.word	0x00000a26
    10ac:	00000a18 	.word	0x00000a18
    10b0:	00000a2c 	.word	0x00000a2c
    10b4:	00000a62 	.word	0x00000a62

000010b8 <_global_impure_ptr>:
    10b8:	20000020                                 .. 

000010bc <_init>:
    10bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    10be:	46c0      	nop			; (mov r8, r8)
    10c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    10c2:	bc08      	pop	{r3}
    10c4:	469e      	mov	lr, r3
    10c6:	4770      	bx	lr

000010c8 <__init_array_start>:
    10c8:	00000f3d 	.word	0x00000f3d

000010cc <__frame_dummy_init_array_entry>:
    10cc:	000000b5 00000265                       ....e...

000010d4 <_fini>:
    10d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    10d6:	46c0      	nop			; (mov r8, r8)
    10d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    10da:	bc08      	pop	{r3}
    10dc:	469e      	mov	lr, r3
    10de:	4770      	bx	lr

000010e0 <__fini_array_start>:
    10e0:	0000008d 	.word	0x0000008d
