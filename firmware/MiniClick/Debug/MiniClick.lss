
MiniClick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002620  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00002620  00002620  00012620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000854  20000000  00002628  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000001a0  20000854  00002e7c  00020854  2**2
                  ALLOC
  4 .stack        00000404  200009f4  0000301c  00020854  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020854  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002087c  2**0
                  CONTENTS, READONLY
  7 .debug_info   00027534  00000000  00000000  000208d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000436f  00000000  00000000  00047e09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00004738  00000000  00000000  0004c178  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000005d0  00000000  00000000  000508b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000005b0  00000000  00000000  00050e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001620c  00000000  00000000  00051430  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000c3ea  00000000  00000000  0006763c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00060b0d  00000000  00000000  00073a26  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000010a8  00000000  00000000  000d4534  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f8 0d 00 20 4d 17 00 00 49 17 00 00 49 17 00 00     ... M...I...I...
	...
      2c:	49 17 00 00 00 00 00 00 00 00 00 00 49 17 00 00     I...........I...
      3c:	49 17 00 00 49 17 00 00 49 17 00 00 c5 0c 00 00     I...I...I.......
      4c:	49 17 00 00 cd 0e 00 00 49 17 00 00 49 17 00 00     I.......I...I...
      5c:	00 00 00 00 49 17 00 00 ad 0e 00 00 bd 0e 00 00     ....I...........
	...
      74:	45 0d 00 00 55 0d 00 00 49 17 00 00 00 00 00 00     E...U...I.......
      84:	00 00 00 00 49 17 00 00                             ....I...

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000854 	.word	0x20000854
      ac:	00000000 	.word	0x00000000
      b0:	00002628 	.word	0x00002628

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000858 	.word	0x20000858
      e0:	00002628 	.word	0x00002628
      e4:	00002628 	.word	0x00002628
      e8:	00000000 	.word	0x00000000

000000ec <port_pin_get_input_level>:
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
      ec:	09c2      	lsrs	r2, r0, #7
	uint8_t group_index = (gpio_pin / 32);
      ee:	0943      	lsrs	r3, r0, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
      f0:	2a00      	cmp	r2, #0
      f2:	dd0b      	ble.n	10c <port_pin_get_input_level+0x20>
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
      f4:	2300      	movs	r3, #0
 */
static  bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
      f6:	221f      	movs	r2, #31
      f8:	4002      	ands	r2, r0
      fa:	2001      	movs	r0, #1
      fc:	4090      	lsls	r0, r2
      fe:	0002      	movs	r2, r0

	return (port_base->IN.reg & pin_mask);
     100:	6a18      	ldr	r0, [r3, #32]
     102:	4010      	ands	r0, r2
     104:	1e43      	subs	r3, r0, #1
     106:	4198      	sbcs	r0, r3
     108:	b2c0      	uxtb	r0, r0
}
     10a:	4770      	bx	lr
		return &(ports[port_index]->Group[group_index]);
     10c:	01db      	lsls	r3, r3, #7
     10e:	4a02      	ldr	r2, [pc, #8]	; (118 <port_pin_get_input_level+0x2c>)
     110:	4694      	mov	ip, r2
     112:	4463      	add	r3, ip
     114:	e7ef      	b.n	f6 <port_pin_get_input_level+0xa>
     116:	46c0      	nop			; (mov r8, r8)
     118:	41004400 	.word	0x41004400

0000011c <_i2c_slave_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     11c:	6803      	ldr	r3, [r0, #0]

	/* Return sync status */
#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CS_SYNCBUSY_MASK);
     11e:	69db      	ldr	r3, [r3, #28]
		const struct i2c_slave_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_slave_is_syncing(module)) {
     120:	079b      	lsls	r3, r3, #30
     122:	d1fb      	bne.n	11c <_i2c_slave_wait_for_sync>
		/* Wait for I<SUP>2</SUP>C module to sync */
	}
}
     124:	4770      	bx	lr
	...

00000128 <_Z25i2c_read_request_callbackP16i2c_slave_module>:
	i2c_slave_enable(&i2c_slave_instance);
}

void i2c_read_request_callback(
struct i2c_slave_module *const module)
{
     128:	b5f0      	push	{r4, r5, r6, r7, lr}
     12a:	b083      	sub	sp, #12
     12c:	0004      	movs	r4, r0
	volatile uint8_t read_address = packet.data[0] & 0x0F;
     12e:	491a      	ldr	r1, [pc, #104]	; (198 <_Z25i2c_read_request_callbackP16i2c_slave_module+0x70>)
     130:	684b      	ldr	r3, [r1, #4]
     132:	781a      	ldrb	r2, [r3, #0]
     134:	230f      	movs	r3, #15
     136:	4013      	ands	r3, r2
     138:	466a      	mov	r2, sp
     13a:	71d3      	strb	r3, [r2, #7]
	 packet.data_length = 1;
     13c:	2301      	movs	r3, #1
     13e:	800b      	strh	r3, [r1, #0]
	switch(read_address){
     140:	79d3      	ldrb	r3, [r2, #7]
     142:	b2db      	uxtb	r3, r3
     144:	2b00      	cmp	r3, #0
     146:	d007      	beq.n	158 <_Z25i2c_read_request_callbackP16i2c_slave_module+0x30>
     148:	2b01      	cmp	r3, #1
     14a:	d016      	beq.n	17a <_Z25i2c_read_request_callbackP16i2c_slave_module+0x52>
		 buffer.read(device_registers[read_address]);
		 packet.data = &device_registers[read_address];
		break;
	}	
	/* Write buffer to master */
	i2c_slave_write_packet_job(module, &packet);
     14c:	4912      	ldr	r1, [pc, #72]	; (198 <_Z25i2c_read_request_callbackP16i2c_slave_module+0x70>)
     14e:	0020      	movs	r0, r4
     150:	4b12      	ldr	r3, [pc, #72]	; (19c <_Z25i2c_read_request_callbackP16i2c_slave_module+0x74>)
     152:	4798      	blx	r3
}
     154:	b003      	add	sp, #12
     156:	bdf0      	pop	{r4, r5, r6, r7, pc}
		device_registers[read_address] = buffer.size();
     158:	466b      	mov	r3, sp
     15a:	1dde      	adds	r6, r3, #7
     15c:	79dd      	ldrb	r5, [r3, #7]
     15e:	b2ed      	uxtb	r5, r5
     160:	4f0d      	ldr	r7, [pc, #52]	; (198 <_Z25i2c_read_request_callbackP16i2c_slave_module+0x70>)
     162:	0038      	movs	r0, r7
     164:	3008      	adds	r0, #8
     166:	4b0e      	ldr	r3, [pc, #56]	; (1a0 <_Z25i2c_read_request_callbackP16i2c_slave_module+0x78>)
     168:	4798      	blx	r3
     16a:	197d      	adds	r5, r7, r5
     16c:	7628      	strb	r0, [r5, #24]
		 packet.data = &device_registers[read_address];
     16e:	7832      	ldrb	r2, [r6, #0]
     170:	003b      	movs	r3, r7
     172:	3318      	adds	r3, #24
     174:	189b      	adds	r3, r3, r2
     176:	607b      	str	r3, [r7, #4]
		break;
     178:	e7e8      	b.n	14c <_Z25i2c_read_request_callbackP16i2c_slave_module+0x24>
		 buffer.read(device_registers[read_address]);
     17a:	466b      	mov	r3, sp
     17c:	1ddf      	adds	r7, r3, #7
     17e:	79d9      	ldrb	r1, [r3, #7]
     180:	4e05      	ldr	r6, [pc, #20]	; (198 <_Z25i2c_read_request_callbackP16i2c_slave_module+0x70>)
     182:	0035      	movs	r5, r6
     184:	3518      	adds	r5, #24
     186:	1869      	adds	r1, r5, r1
     188:	0030      	movs	r0, r6
     18a:	3008      	adds	r0, #8
     18c:	4b05      	ldr	r3, [pc, #20]	; (1a4 <_Z25i2c_read_request_callbackP16i2c_slave_module+0x7c>)
     18e:	4798      	blx	r3
		 packet.data = &device_registers[read_address];
     190:	783b      	ldrb	r3, [r7, #0]
     192:	18ed      	adds	r5, r5, r3
     194:	6075      	str	r5, [r6, #4]
		break;
     196:	e7d9      	b.n	14c <_Z25i2c_read_request_callbackP16i2c_slave_module+0x24>
     198:	20000870 	.word	0x20000870
     19c:	00000827 	.word	0x00000827
     1a0:	00000add 	.word	0x00000add
     1a4:	00000b51 	.word	0x00000b51

000001a8 <_Z26i2c_write_request_callbackP16i2c_slave_module>:

void i2c_write_request_callback(struct i2c_slave_module *const module)
{
     1a8:	b510      	push	{r4, lr}
	/* Init i2c packet */
	packet.data_length = 1;
     1aa:	4904      	ldr	r1, [pc, #16]	; (1bc <_Z26i2c_write_request_callbackP16i2c_slave_module+0x14>)
     1ac:	2301      	movs	r3, #1
     1ae:	800b      	strh	r3, [r1, #0]
	packet.data        = read_buffer;
     1b0:	000b      	movs	r3, r1
     1b2:	3324      	adds	r3, #36	; 0x24
     1b4:	604b      	str	r3, [r1, #4]
	/* Read buffer from master */
	if (i2c_slave_read_packet_job(module, &packet) != STATUS_OK) {
     1b6:	4b02      	ldr	r3, [pc, #8]	; (1c0 <_Z26i2c_write_request_callbackP16i2c_slave_module+0x18>)
     1b8:	4798      	blx	r3
		//packet.data        = read_buffer;
	}
}
     1ba:	bd10      	pop	{r4, pc}
     1bc:	20000870 	.word	0x20000870
     1c0:	000007ff 	.word	0x000007ff

000001c4 <_Z41__static_initialization_and_destruction_0ii>:
		delay_cycles_ms(1);
		
		
		
	}
}
     1c4:	b510      	push	{r4, lr}
     1c6:	2801      	cmp	r0, #1
     1c8:	d000      	beq.n	1cc <_Z41__static_initialization_and_destruction_0ii+0x8>
     1ca:	bd10      	pop	{r4, pc}
     1cc:	4b07      	ldr	r3, [pc, #28]	; (1ec <_Z41__static_initialization_and_destruction_0ii+0x28>)
     1ce:	4299      	cmp	r1, r3
     1d0:	d1fb      	bne.n	1ca <_Z41__static_initialization_and_destruction_0ii+0x6>
CircularBuffer buffer(10);
     1d2:	4c07      	ldr	r4, [pc, #28]	; (1f0 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
     1d4:	3408      	adds	r4, #8
     1d6:	210a      	movs	r1, #10
     1d8:	0020      	movs	r0, r4
     1da:	4b06      	ldr	r3, [pc, #24]	; (1f4 <_Z41__static_initialization_and_destruction_0ii+0x30>)
     1dc:	4798      	blx	r3
     1de:	4a06      	ldr	r2, [pc, #24]	; (1f8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     1e0:	4906      	ldr	r1, [pc, #24]	; (1fc <_Z41__static_initialization_and_destruction_0ii+0x38>)
     1e2:	0020      	movs	r0, r4
     1e4:	4b06      	ldr	r3, [pc, #24]	; (200 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     1e6:	4798      	blx	r3
}
     1e8:	e7ef      	b.n	1ca <_Z41__static_initialization_and_destruction_0ii+0x6>
     1ea:	46c0      	nop			; (mov r8, r8)
     1ec:	0000ffff 	.word	0x0000ffff
     1f0:	20000870 	.word	0x20000870
     1f4:	00000ad1 	.word	0x00000ad1
     1f8:	20000000 	.word	0x20000000
     1fc:	00000adb 	.word	0x00000adb
     200:	00001851 	.word	0x00001851

00000204 <_Z19configure_i2c_slavev>:
{
     204:	b530      	push	{r4, r5, lr}
     206:	b08d      	sub	sp, #52	; 0x34
static inline void i2c_slave_get_config_defaults(
		struct i2c_slave_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->enable_scl_low_timeout = false;
     208:	aa02      	add	r2, sp, #8
     20a:	2100      	movs	r1, #0
     20c:	7011      	strb	r1, [r2, #0]
	config->sda_hold_time = I2C_SLAVE_SDA_HOLD_TIME_300NS_600NS;
     20e:	2380      	movs	r3, #128	; 0x80
     210:	039b      	lsls	r3, r3, #14
     212:	6053      	str	r3, [r2, #4]
	config->buffer_timeout = 65535;
     214:	2301      	movs	r3, #1
     216:	425b      	negs	r3, r3
     218:	8113      	strh	r3, [r2, #8]
	config->address_mode = I2C_SLAVE_ADDRESS_MODE_MASK;
     21a:	2300      	movs	r3, #0
     21c:	8151      	strh	r1, [r2, #10]
	config->address = 0;
	config->address_mask = 0;
     21e:	81d1      	strh	r1, [r2, #14]
#ifdef FEATURE_I2C_10_BIT_ADDRESS
	config->ten_bit_address = false;
     220:	7413      	strb	r3, [r2, #16]
#endif
	config->enable_general_call_address = false;
     222:	7453      	strb	r3, [r2, #17]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->transfer_speed = I2C_SLAVE_SPEED_STANDARD_AND_FAST;
     224:	6151      	str	r1, [r2, #20]
#endif
#if I2C_SLAVE_CALLBACK_MODE == true
	config->enable_nack_on_address = false;
     226:	7613      	strb	r3, [r2, #24]
#endif
	config->generator_source = GCLK_GENERATOR_0;
     228:	7653      	strb	r3, [r2, #25]
	config->run_in_standby = false;
     22a:	7693      	strb	r3, [r2, #26]
	config->pinmux_pad0 = PINMUX_DEFAULT;
     22c:	61d1      	str	r1, [r2, #28]
	config->pinmux_pad1 = PINMUX_DEFAULT;
     22e:	6211      	str	r1, [r2, #32]
	config->scl_low_timeout  = false;
     230:	3124      	adds	r1, #36	; 0x24
     232:	5453      	strb	r3, [r2, r1]
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
     234:	3101      	adds	r1, #1
     236:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
     238:	3101      	adds	r1, #1
     23a:	5453      	strb	r3, [r2, r1]
	config_i2c_slave.address      = SLAVE_ADDRESS;
     23c:	2312      	movs	r3, #18
     23e:	8193      	strh	r3, [r2, #12]
	volatile status_code code = i2c_slave_init(&i2c_slave_instance, SERCOM0, &config_i2c_slave);
     240:	4c0d      	ldr	r4, [pc, #52]	; (278 <_Z19configure_i2c_slavev+0x74>)
     242:	0025      	movs	r5, r4
     244:	3528      	adds	r5, #40	; 0x28
     246:	490d      	ldr	r1, [pc, #52]	; (27c <_Z19configure_i2c_slavev+0x78>)
     248:	0028      	movs	r0, r5
     24a:	4b0d      	ldr	r3, [pc, #52]	; (280 <_Z19configure_i2c_slavev+0x7c>)
     24c:	4798      	blx	r3
     24e:	466b      	mov	r3, sp
     250:	71d8      	strb	r0, [r3, #7]
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     252:	6aa4      	ldr	r4, [r4, #40]	; 0x28

#if I2C_SLAVE_CALLBACK_MODE == true
	/* Enable global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     254:	0020      	movs	r0, r4
     256:	4b0b      	ldr	r3, [pc, #44]	; (284 <_Z19configure_i2c_slavev+0x80>)
     258:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     25a:	231f      	movs	r3, #31
     25c:	4018      	ands	r0, r3
     25e:	3b1e      	subs	r3, #30
     260:	4083      	lsls	r3, r0
     262:	4a09      	ldr	r2, [pc, #36]	; (288 <_Z19configure_i2c_slavev+0x84>)
     264:	6013      	str	r3, [r2, #0]
#endif

	/* Wait for module to sync */
	_i2c_slave_wait_for_sync(module);
     266:	0028      	movs	r0, r5
     268:	4b08      	ldr	r3, [pc, #32]	; (28c <_Z19configure_i2c_slavev+0x88>)
     26a:	4798      	blx	r3

	/* Enable module */
	i2c_hw->CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;
     26c:	6823      	ldr	r3, [r4, #0]
     26e:	2202      	movs	r2, #2
     270:	4313      	orrs	r3, r2
     272:	6023      	str	r3, [r4, #0]
}
     274:	b00d      	add	sp, #52	; 0x34
     276:	bd30      	pop	{r4, r5, pc}
     278:	20000870 	.word	0x20000870
     27c:	42000800 	.word	0x42000800
     280:	00000655 	.word	0x00000655
     284:	00000e91 	.word	0x00000e91
     288:	e000e100 	.word	0xe000e100
     28c:	0000011d 	.word	0x0000011d

00000290 <_Z29configure_i2c_slave_callbacksv>:
{
     290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	I2C_SLAVE_CALLBACK_READ_REQUEST);
     292:	4c0e      	ldr	r4, [pc, #56]	; (2cc <_Z29configure_i2c_slave_callbacksv+0x3c>)
     294:	2202      	movs	r2, #2
     296:	490e      	ldr	r1, [pc, #56]	; (2d0 <_Z29configure_i2c_slave_callbacksv+0x40>)
     298:	480e      	ldr	r0, [pc, #56]	; (2d4 <_Z29configure_i2c_slave_callbacksv+0x44>)
     29a:	4d0f      	ldr	r5, [pc, #60]	; (2d8 <_Z29configure_i2c_slave_callbacksv+0x48>)
     29c:	47a8      	blx	r5
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
     29e:	0026      	movs	r6, r4
     2a0:	364d      	adds	r6, #77	; 0x4d
     2a2:	7833      	ldrb	r3, [r6, #0]
     2a4:	2204      	movs	r2, #4
     2a6:	4313      	orrs	r3, r2
     2a8:	b2db      	uxtb	r3, r3
     2aa:	7033      	strb	r3, [r6, #0]

	/* Enable address callback */
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
	if (callback_type == I2C_SLAVE_CALLBACK_READ_REQUEST ||
			callback_type == I2C_SLAVE_CALLBACK_WRITE_REQUEST) {
		i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH;
     2ac:	2702      	movs	r7, #2
     2ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     2b0:	759f      	strb	r7, [r3, #22]
	I2C_SLAVE_CALLBACK_WRITE_REQUEST);
     2b2:	2203      	movs	r2, #3
     2b4:	4909      	ldr	r1, [pc, #36]	; (2dc <_Z29configure_i2c_slave_callbacksv+0x4c>)
     2b6:	4807      	ldr	r0, [pc, #28]	; (2d4 <_Z29configure_i2c_slave_callbacksv+0x44>)
     2b8:	47a8      	blx	r5
	module->enabled_callback |= (1 << callback_type);
     2ba:	7833      	ldrb	r3, [r6, #0]
     2bc:	2208      	movs	r2, #8
     2be:	4313      	orrs	r3, r2
     2c0:	b2db      	uxtb	r3, r3
     2c2:	7033      	strb	r3, [r6, #0]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     2c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH;
     2c6:	759f      	strb	r7, [r3, #22]
}
     2c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     2ca:	46c0      	nop			; (mov r8, r8)
     2cc:	20000870 	.word	0x20000870
     2d0:	00000129 	.word	0x00000129
     2d4:	20000898 	.word	0x20000898
     2d8:	000007e5 	.word	0x000007e5
     2dc:	000001a9 	.word	0x000001a9

000002e0 <_Z19configure_gpio_pinsv>:
{
     2e0:	b570      	push	{r4, r5, r6, lr}
     2e2:	b082      	sub	sp, #8
	config->direction  = PORT_PIN_DIR_INPUT;
     2e4:	ac01      	add	r4, sp, #4
     2e6:	2300      	movs	r3, #0
     2e8:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     2ea:	2601      	movs	r6, #1
     2ec:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     2ee:	70a3      	strb	r3, [r4, #2]
	port_pin_set_config(PA24, &config_port_pin);
     2f0:	0021      	movs	r1, r4
     2f2:	2018      	movs	r0, #24
     2f4:	4d0b      	ldr	r5, [pc, #44]	; (324 <_Z19configure_gpio_pinsv+0x44>)
     2f6:	47a8      	blx	r5
	port_pin_set_config(PA25, &config_port_pin);
     2f8:	0021      	movs	r1, r4
     2fa:	2019      	movs	r0, #25
     2fc:	47a8      	blx	r5
	port_pin_set_config(BUTTON_PIN_1, &config_port_pin);
     2fe:	0021      	movs	r1, r4
     300:	2006      	movs	r0, #6
     302:	47a8      	blx	r5
	port_pin_set_config(BUTTON_PIN_2, &config_port_pin);
     304:	0021      	movs	r1, r4
     306:	2007      	movs	r0, #7
     308:	47a8      	blx	r5
	port_pin_set_config(BUTTON_PIN_3, &config_port_pin);
     30a:	0021      	movs	r1, r4
     30c:	2008      	movs	r0, #8
     30e:	47a8      	blx	r5
	port_pin_set_config(BUTTON_PIN_4, &config_port_pin);
     310:	0021      	movs	r1, r4
     312:	200b      	movs	r0, #11
     314:	47a8      	blx	r5
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
     316:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_PIN, &config_port_pin);
     318:	0021      	movs	r1, r4
     31a:	2009      	movs	r0, #9
     31c:	47a8      	blx	r5
}
     31e:	b002      	add	sp, #8
     320:	bd70      	pop	{r4, r5, r6, pc}
     322:	46c0      	nop			; (mov r8, r8)
     324:	00000f8d 	.word	0x00000f8d

00000328 <_Z20configure_i2c_pinmuxv>:
{
     328:	b530      	push	{r4, r5, lr}
     32a:	b083      	sub	sp, #12
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     32c:	ac01      	add	r4, sp, #4
     32e:	2300      	movs	r3, #0
     330:	7063      	strb	r3, [r4, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     332:	2201      	movs	r2, #1
     334:	70a2      	strb	r2, [r4, #2]
	config->powersave    = false;
     336:	70e3      	strb	r3, [r4, #3]
	config_pinmux.mux_position = 1 << 1;
     338:	3302      	adds	r3, #2
     33a:	7023      	strb	r3, [r4, #0]
	system_pinmux_pin_set_config(14, &config_pinmux);
     33c:	0021      	movs	r1, r4
     33e:	200e      	movs	r0, #14
     340:	4d03      	ldr	r5, [pc, #12]	; (350 <_Z20configure_i2c_pinmuxv+0x28>)
     342:	47a8      	blx	r5
	system_pinmux_pin_set_config(15, &config_pinmux);
     344:	0021      	movs	r1, r4
     346:	200f      	movs	r0, #15
     348:	47a8      	blx	r5
}
     34a:	b003      	add	sp, #12
     34c:	bd30      	pop	{r4, r5, pc}
     34e:	46c0      	nop			; (mov r8, r8)
     350:	00001719 	.word	0x00001719

00000354 <main>:
{
     354:	b5f0      	push	{r4, r5, r6, r7, lr}
     356:	b093      	sub	sp, #76	; 0x4c
	SystemInit();
     358:	4ba4      	ldr	r3, [pc, #656]	; (5ec <STACK_SIZE+0x1ec>)
     35a:	4798      	blx	r3
	system_clock_init();
     35c:	4ba4      	ldr	r3, [pc, #656]	; (5f0 <STACK_SIZE+0x1f0>)
     35e:	4798      	blx	r3
	delay_init();
     360:	4ba4      	ldr	r3, [pc, #656]	; (5f4 <STACK_SIZE+0x1f4>)
     362:	4798      	blx	r3
	configure_gpio_pins();
     364:	4ba4      	ldr	r3, [pc, #656]	; (5f8 <STACK_SIZE+0x1f8>)
     366:	4798      	blx	r3
	 configure_i2c_pinmux();
     368:	4ba4      	ldr	r3, [pc, #656]	; (5fc <STACK_SIZE+0x1fc>)
     36a:	4798      	blx	r3
	configure_i2c_slave();
     36c:	4ba4      	ldr	r3, [pc, #656]	; (600 <STACK_SIZE+0x200>)
     36e:	4798      	blx	r3
	configure_i2c_slave_callbacks();
     370:	4ba4      	ldr	r3, [pc, #656]	; (604 <STACK_SIZE+0x204>)
     372:	4798      	blx	r3
	memset(pixels, 0, sizeof(pixels));
     374:	220c      	movs	r2, #12
     376:	2100      	movs	r1, #0
     378:	a805      	add	r0, sp, #20
     37a:	4ba3      	ldr	r3, [pc, #652]	; (608 <STACK_SIZE+0x208>)
     37c:	4798      	blx	r3
	ws2812b ledStrip(&pixels[0], 4, NEO_PIN);
     37e:	230a      	movs	r3, #10
     380:	2204      	movs	r2, #4
     382:	a905      	add	r1, sp, #20
     384:	a801      	add	r0, sp, #4
     386:	4ca1      	ldr	r4, [pc, #644]	; (60c <STACK_SIZE+0x20c>)
     388:	47a0      	blx	r4
	ledStrip.setLEDColor(0, colorRGB(0xEEA255));
     38a:	49a1      	ldr	r1, [pc, #644]	; (610 <STACK_SIZE+0x210>)
     38c:	a808      	add	r0, sp, #32
     38e:	4da1      	ldr	r5, [pc, #644]	; (614 <STACK_SIZE+0x214>)
     390:	47a8      	blx	r5
     392:	9a08      	ldr	r2, [sp, #32]
     394:	2100      	movs	r1, #0
     396:	a801      	add	r0, sp, #4
     398:	4c9f      	ldr	r4, [pc, #636]	; (618 <STACK_SIZE+0x218>)
     39a:	47a0      	blx	r4
	ledStrip.setLEDColor(2, colorRGB(0x0011FF));
     39c:	499f      	ldr	r1, [pc, #636]	; (61c <STACK_SIZE+0x21c>)
     39e:	a809      	add	r0, sp, #36	; 0x24
     3a0:	47a8      	blx	r5
     3a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
     3a4:	2102      	movs	r1, #2
     3a6:	a801      	add	r0, sp, #4
     3a8:	47a0      	blx	r4
	ledStrip.write();
     3aa:	a801      	add	r0, sp, #4
     3ac:	4b9c      	ldr	r3, [pc, #624]	; (620 <STACK_SIZE+0x220>)
     3ae:	4798      	blx	r3
     3b0:	e09c      	b.n	4ec <STACK_SIZE+0xec>
			buffer.write(0x01 | BUTTON_PRESSED);
     3b2:	2181      	movs	r1, #129	; 0x81
     3b4:	0010      	movs	r0, r2
     3b6:	3008      	adds	r0, #8
     3b8:	4b9a      	ldr	r3, [pc, #616]	; (624 <STACK_SIZE+0x224>)
     3ba:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     3bc:	2280      	movs	r2, #128	; 0x80
     3be:	0092      	lsls	r2, r2, #2
     3c0:	4b99      	ldr	r3, [pc, #612]	; (628 <STACK_SIZE+0x228>)
     3c2:	619a      	str	r2, [r3, #24]
			ledStrip.setLEDColor(1, colorRGB(0xFF8000));
     3c4:	4999      	ldr	r1, [pc, #612]	; (62c <STACK_SIZE+0x22c>)
     3c6:	a80a      	add	r0, sp, #40	; 0x28
     3c8:	4b92      	ldr	r3, [pc, #584]	; (614 <STACK_SIZE+0x214>)
     3ca:	4798      	blx	r3
     3cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
     3ce:	2101      	movs	r1, #1
     3d0:	a801      	add	r0, sp, #4
     3d2:	4b91      	ldr	r3, [pc, #580]	; (618 <STACK_SIZE+0x218>)
     3d4:	4798      	blx	r3
			ledStrip.write();
     3d6:	a801      	add	r0, sp, #4
     3d8:	4b91      	ldr	r3, [pc, #580]	; (620 <STACK_SIZE+0x220>)
     3da:	4798      	blx	r3
     3dc:	e0a6      	b.n	52c <STACK_SIZE+0x12c>
			buffer.write(0x02 | BUTTON_PRESSED);
     3de:	2182      	movs	r1, #130	; 0x82
     3e0:	4893      	ldr	r0, [pc, #588]	; (630 <STACK_SIZE+0x230>)
     3e2:	3008      	adds	r0, #8
     3e4:	4b8f      	ldr	r3, [pc, #572]	; (624 <STACK_SIZE+0x224>)
     3e6:	4798      	blx	r3
     3e8:	2280      	movs	r2, #128	; 0x80
     3ea:	0092      	lsls	r2, r2, #2
     3ec:	4b8e      	ldr	r3, [pc, #568]	; (628 <STACK_SIZE+0x228>)
     3ee:	619a      	str	r2, [r3, #24]
			ledStrip.setLEDColor(0, colorRGB(0xFF8000));
     3f0:	498e      	ldr	r1, [pc, #568]	; (62c <STACK_SIZE+0x22c>)
     3f2:	a80b      	add	r0, sp, #44	; 0x2c
     3f4:	4b87      	ldr	r3, [pc, #540]	; (614 <STACK_SIZE+0x214>)
     3f6:	4798      	blx	r3
     3f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
     3fa:	2100      	movs	r1, #0
     3fc:	a801      	add	r0, sp, #4
     3fe:	4b86      	ldr	r3, [pc, #536]	; (618 <STACK_SIZE+0x218>)
     400:	4798      	blx	r3
			ledStrip.write();
     402:	a801      	add	r0, sp, #4
     404:	4b86      	ldr	r3, [pc, #536]	; (620 <STACK_SIZE+0x220>)
     406:	4798      	blx	r3
     408:	e09b      	b.n	542 <STACK_SIZE+0x142>
			buffer.write(0x03 | BUTTON_PRESSED);
     40a:	2183      	movs	r1, #131	; 0x83
     40c:	4888      	ldr	r0, [pc, #544]	; (630 <STACK_SIZE+0x230>)
     40e:	3008      	adds	r0, #8
     410:	4b84      	ldr	r3, [pc, #528]	; (624 <STACK_SIZE+0x224>)
     412:	4798      	blx	r3
     414:	2280      	movs	r2, #128	; 0x80
     416:	0092      	lsls	r2, r2, #2
     418:	4b83      	ldr	r3, [pc, #524]	; (628 <STACK_SIZE+0x228>)
     41a:	619a      	str	r2, [r3, #24]
			ledStrip.setLEDColor(2, colorRGB(0xFF8000));
     41c:	4983      	ldr	r1, [pc, #524]	; (62c <STACK_SIZE+0x22c>)
     41e:	a80c      	add	r0, sp, #48	; 0x30
     420:	4b7c      	ldr	r3, [pc, #496]	; (614 <STACK_SIZE+0x214>)
     422:	4798      	blx	r3
     424:	9a0c      	ldr	r2, [sp, #48]	; 0x30
     426:	2102      	movs	r1, #2
     428:	a801      	add	r0, sp, #4
     42a:	4b7b      	ldr	r3, [pc, #492]	; (618 <STACK_SIZE+0x218>)
     42c:	4798      	blx	r3
			ledStrip.write();
     42e:	a801      	add	r0, sp, #4
     430:	4b7b      	ldr	r3, [pc, #492]	; (620 <STACK_SIZE+0x220>)
     432:	4798      	blx	r3
     434:	e090      	b.n	558 <STACK_SIZE+0x158>
			buffer.write(0x04 | BUTTON_PRESSED);
     436:	2184      	movs	r1, #132	; 0x84
     438:	487d      	ldr	r0, [pc, #500]	; (630 <STACK_SIZE+0x230>)
     43a:	3008      	adds	r0, #8
     43c:	4b79      	ldr	r3, [pc, #484]	; (624 <STACK_SIZE+0x224>)
     43e:	4798      	blx	r3
     440:	2280      	movs	r2, #128	; 0x80
     442:	0092      	lsls	r2, r2, #2
     444:	4b78      	ldr	r3, [pc, #480]	; (628 <STACK_SIZE+0x228>)
     446:	619a      	str	r2, [r3, #24]
			ledStrip.setLEDColor(3, colorRGB(0xFF8000));
     448:	4978      	ldr	r1, [pc, #480]	; (62c <STACK_SIZE+0x22c>)
     44a:	a80d      	add	r0, sp, #52	; 0x34
     44c:	4b71      	ldr	r3, [pc, #452]	; (614 <STACK_SIZE+0x214>)
     44e:	4798      	blx	r3
     450:	9a0d      	ldr	r2, [sp, #52]	; 0x34
     452:	2103      	movs	r1, #3
     454:	a801      	add	r0, sp, #4
     456:	4b70      	ldr	r3, [pc, #448]	; (618 <STACK_SIZE+0x218>)
     458:	4798      	blx	r3
			ledStrip.write();
     45a:	a801      	add	r0, sp, #4
     45c:	4b70      	ldr	r3, [pc, #448]	; (620 <STACK_SIZE+0x220>)
     45e:	4798      	blx	r3
     460:	e085      	b.n	56e <STACK_SIZE+0x16e>
			buffer.write(0x01 | BUTTON_RELEASED);
     462:	2141      	movs	r1, #65	; 0x41
     464:	0010      	movs	r0, r2
     466:	3008      	adds	r0, #8
     468:	4b6e      	ldr	r3, [pc, #440]	; (624 <STACK_SIZE+0x224>)
     46a:	4798      	blx	r3
	} else {
		port_base->OUTCLR.reg = pin_mask;
     46c:	2280      	movs	r2, #128	; 0x80
     46e:	0092      	lsls	r2, r2, #2
     470:	4b6d      	ldr	r3, [pc, #436]	; (628 <STACK_SIZE+0x228>)
     472:	615a      	str	r2, [r3, #20]
			ledStrip.setLEDColor(1, colorRGB(0x000000));
     474:	2100      	movs	r1, #0
     476:	a80e      	add	r0, sp, #56	; 0x38
     478:	4b66      	ldr	r3, [pc, #408]	; (614 <STACK_SIZE+0x214>)
     47a:	4798      	blx	r3
     47c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
     47e:	2101      	movs	r1, #1
     480:	a801      	add	r0, sp, #4
     482:	4b65      	ldr	r3, [pc, #404]	; (618 <STACK_SIZE+0x218>)
     484:	4798      	blx	r3
			ledStrip.write();
     486:	a801      	add	r0, sp, #4
     488:	4b65      	ldr	r3, [pc, #404]	; (620 <STACK_SIZE+0x220>)
     48a:	4798      	blx	r3
     48c:	e079      	b.n	582 <STACK_SIZE+0x182>
			buffer.write(0x02 | BUTTON_RELEASED);
     48e:	2142      	movs	r1, #66	; 0x42
     490:	4867      	ldr	r0, [pc, #412]	; (630 <STACK_SIZE+0x230>)
     492:	3008      	adds	r0, #8
     494:	4b63      	ldr	r3, [pc, #396]	; (624 <STACK_SIZE+0x224>)
     496:	4798      	blx	r3
     498:	2280      	movs	r2, #128	; 0x80
     49a:	0092      	lsls	r2, r2, #2
     49c:	4b62      	ldr	r3, [pc, #392]	; (628 <STACK_SIZE+0x228>)
     49e:	615a      	str	r2, [r3, #20]
			ledStrip.setLEDColor(0, colorRGB(0x000000));
     4a0:	2100      	movs	r1, #0
     4a2:	a80f      	add	r0, sp, #60	; 0x3c
     4a4:	4b5b      	ldr	r3, [pc, #364]	; (614 <STACK_SIZE+0x214>)
     4a6:	4798      	blx	r3
     4a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
     4aa:	2100      	movs	r1, #0
     4ac:	a801      	add	r0, sp, #4
     4ae:	4b5a      	ldr	r3, [pc, #360]	; (618 <STACK_SIZE+0x218>)
     4b0:	4798      	blx	r3
			ledStrip.write();
     4b2:	a801      	add	r0, sp, #4
     4b4:	4b5a      	ldr	r3, [pc, #360]	; (620 <STACK_SIZE+0x220>)
     4b6:	4798      	blx	r3
     4b8:	e06e      	b.n	598 <STACK_SIZE+0x198>
			buffer.write(0x03 | BUTTON_RELEASED);
     4ba:	2143      	movs	r1, #67	; 0x43
     4bc:	485c      	ldr	r0, [pc, #368]	; (630 <STACK_SIZE+0x230>)
     4be:	3008      	adds	r0, #8
     4c0:	4b58      	ldr	r3, [pc, #352]	; (624 <STACK_SIZE+0x224>)
     4c2:	4798      	blx	r3
     4c4:	2280      	movs	r2, #128	; 0x80
     4c6:	0092      	lsls	r2, r2, #2
     4c8:	4b57      	ldr	r3, [pc, #348]	; (628 <STACK_SIZE+0x228>)
     4ca:	615a      	str	r2, [r3, #20]
			ledStrip.setLEDColor(2, colorRGB(0x000000));
     4cc:	2100      	movs	r1, #0
     4ce:	a810      	add	r0, sp, #64	; 0x40
     4d0:	4b50      	ldr	r3, [pc, #320]	; (614 <STACK_SIZE+0x214>)
     4d2:	4798      	blx	r3
     4d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
     4d6:	2102      	movs	r1, #2
     4d8:	a801      	add	r0, sp, #4
     4da:	4b4f      	ldr	r3, [pc, #316]	; (618 <STACK_SIZE+0x218>)
     4dc:	4798      	blx	r3
			ledStrip.write();
     4de:	a801      	add	r0, sp, #4
     4e0:	4b4f      	ldr	r3, [pc, #316]	; (620 <STACK_SIZE+0x220>)
     4e2:	4798      	blx	r3
     4e4:	e062      	b.n	5ac <STACK_SIZE+0x1ac>
		delay_cycles_ms(1);
     4e6:	2001      	movs	r0, #1
     4e8:	4b52      	ldr	r3, [pc, #328]	; (634 <STACK_SIZE+0x234>)
     4ea:	4798      	blx	r3
		volatile uint32_t clk_speed = system_gclk_gen_get_hz(0);
     4ec:	2000      	movs	r0, #0
     4ee:	4b52      	ldr	r3, [pc, #328]	; (638 <STACK_SIZE+0x238>)
     4f0:	4798      	blx	r3
     4f2:	9000      	str	r0, [sp, #0]
		last_button_level = current_button_level;
     4f4:	4c4e      	ldr	r4, [pc, #312]	; (630 <STACK_SIZE+0x230>)
     4f6:	6e23      	ldr	r3, [r4, #96]	; 0x60
     4f8:	65e3      	str	r3, [r4, #92]	; 0x5c
		current_button_level.button_1 = port_pin_get_input_level(BUTTON_PIN_1);
     4fa:	2006      	movs	r0, #6
     4fc:	4d4f      	ldr	r5, [pc, #316]	; (63c <STACK_SIZE+0x23c>)
     4fe:	47a8      	blx	r5
     500:	2760      	movs	r7, #96	; 0x60
     502:	55e0      	strb	r0, [r4, r7]
		current_button_level.button_2 = port_pin_get_input_level(BUTTON_PIN_2);
     504:	2007      	movs	r0, #7
     506:	47a8      	blx	r5
     508:	0026      	movs	r6, r4
     50a:	3660      	adds	r6, #96	; 0x60
     50c:	7070      	strb	r0, [r6, #1]
		current_button_level.button_3 = port_pin_get_input_level(BUTTON_PIN_3);
     50e:	2008      	movs	r0, #8
     510:	47a8      	blx	r5
     512:	70b0      	strb	r0, [r6, #2]
		current_button_level.button_4 = port_pin_get_input_level(BUTTON_PIN_4);
     514:	200b      	movs	r0, #11
     516:	47a8      	blx	r5
     518:	70f0      	strb	r0, [r6, #3]
		if(!current_button_level.button_1 && last_button_level.button_1){
     51a:	5de3      	ldrb	r3, [r4, r7]
     51c:	2b00      	cmp	r3, #0
     51e:	d105      	bne.n	52c <STACK_SIZE+0x12c>
     520:	335c      	adds	r3, #92	; 0x5c
     522:	4a43      	ldr	r2, [pc, #268]	; (630 <STACK_SIZE+0x230>)
     524:	5cd3      	ldrb	r3, [r2, r3]
     526:	2b00      	cmp	r3, #0
     528:	d000      	beq.n	52c <STACK_SIZE+0x12c>
     52a:	e742      	b.n	3b2 <main+0x5e>
		if(!current_button_level.button_2 && last_button_level.button_2){
     52c:	4b40      	ldr	r3, [pc, #256]	; (630 <STACK_SIZE+0x230>)
     52e:	3360      	adds	r3, #96	; 0x60
     530:	785b      	ldrb	r3, [r3, #1]
     532:	2b00      	cmp	r3, #0
     534:	d105      	bne.n	542 <STACK_SIZE+0x142>
     536:	4b3e      	ldr	r3, [pc, #248]	; (630 <STACK_SIZE+0x230>)
     538:	335c      	adds	r3, #92	; 0x5c
     53a:	785b      	ldrb	r3, [r3, #1]
     53c:	2b00      	cmp	r3, #0
     53e:	d000      	beq.n	542 <STACK_SIZE+0x142>
     540:	e74d      	b.n	3de <main+0x8a>
		if(!current_button_level.button_3 && last_button_level.button_3){
     542:	4b3b      	ldr	r3, [pc, #236]	; (630 <STACK_SIZE+0x230>)
     544:	3360      	adds	r3, #96	; 0x60
     546:	789b      	ldrb	r3, [r3, #2]
     548:	2b00      	cmp	r3, #0
     54a:	d105      	bne.n	558 <STACK_SIZE+0x158>
     54c:	4b38      	ldr	r3, [pc, #224]	; (630 <STACK_SIZE+0x230>)
     54e:	335c      	adds	r3, #92	; 0x5c
     550:	789b      	ldrb	r3, [r3, #2]
     552:	2b00      	cmp	r3, #0
     554:	d000      	beq.n	558 <STACK_SIZE+0x158>
     556:	e758      	b.n	40a <STACK_SIZE+0xa>
		if(!current_button_level.button_4 && last_button_level.button_4){
     558:	4b35      	ldr	r3, [pc, #212]	; (630 <STACK_SIZE+0x230>)
     55a:	3360      	adds	r3, #96	; 0x60
     55c:	78db      	ldrb	r3, [r3, #3]
     55e:	2b00      	cmp	r3, #0
     560:	d105      	bne.n	56e <STACK_SIZE+0x16e>
     562:	4b33      	ldr	r3, [pc, #204]	; (630 <STACK_SIZE+0x230>)
     564:	335c      	adds	r3, #92	; 0x5c
     566:	78db      	ldrb	r3, [r3, #3]
     568:	2b00      	cmp	r3, #0
     56a:	d000      	beq.n	56e <STACK_SIZE+0x16e>
     56c:	e763      	b.n	436 <STACK_SIZE+0x36>
		if(current_button_level.button_1 && !last_button_level.button_1){
     56e:	2360      	movs	r3, #96	; 0x60
     570:	4a2f      	ldr	r2, [pc, #188]	; (630 <STACK_SIZE+0x230>)
     572:	5cd3      	ldrb	r3, [r2, r3]
     574:	2b00      	cmp	r3, #0
     576:	d004      	beq.n	582 <STACK_SIZE+0x182>
     578:	235c      	movs	r3, #92	; 0x5c
     57a:	5cd3      	ldrb	r3, [r2, r3]
     57c:	2b00      	cmp	r3, #0
     57e:	d100      	bne.n	582 <STACK_SIZE+0x182>
     580:	e76f      	b.n	462 <STACK_SIZE+0x62>
		if(current_button_level.button_2 && !last_button_level.button_2){
     582:	4b2b      	ldr	r3, [pc, #172]	; (630 <STACK_SIZE+0x230>)
     584:	3360      	adds	r3, #96	; 0x60
     586:	785b      	ldrb	r3, [r3, #1]
     588:	2b00      	cmp	r3, #0
     58a:	d005      	beq.n	598 <STACK_SIZE+0x198>
     58c:	4b28      	ldr	r3, [pc, #160]	; (630 <STACK_SIZE+0x230>)
     58e:	335c      	adds	r3, #92	; 0x5c
     590:	785b      	ldrb	r3, [r3, #1]
     592:	2b00      	cmp	r3, #0
     594:	d100      	bne.n	598 <STACK_SIZE+0x198>
     596:	e77a      	b.n	48e <STACK_SIZE+0x8e>
		if(current_button_level.button_3 && !last_button_level.button_3){
     598:	4b25      	ldr	r3, [pc, #148]	; (630 <STACK_SIZE+0x230>)
     59a:	3360      	adds	r3, #96	; 0x60
     59c:	789b      	ldrb	r3, [r3, #2]
     59e:	2b00      	cmp	r3, #0
     5a0:	d004      	beq.n	5ac <STACK_SIZE+0x1ac>
     5a2:	4b23      	ldr	r3, [pc, #140]	; (630 <STACK_SIZE+0x230>)
     5a4:	335c      	adds	r3, #92	; 0x5c
     5a6:	789b      	ldrb	r3, [r3, #2]
     5a8:	2b00      	cmp	r3, #0
     5aa:	d086      	beq.n	4ba <STACK_SIZE+0xba>
		if(current_button_level.button_4 && !last_button_level.button_4){
     5ac:	4b20      	ldr	r3, [pc, #128]	; (630 <STACK_SIZE+0x230>)
     5ae:	3360      	adds	r3, #96	; 0x60
     5b0:	78db      	ldrb	r3, [r3, #3]
     5b2:	2b00      	cmp	r3, #0
     5b4:	d097      	beq.n	4e6 <STACK_SIZE+0xe6>
     5b6:	4b1e      	ldr	r3, [pc, #120]	; (630 <STACK_SIZE+0x230>)
     5b8:	335c      	adds	r3, #92	; 0x5c
     5ba:	78db      	ldrb	r3, [r3, #3]
     5bc:	2b00      	cmp	r3, #0
     5be:	d192      	bne.n	4e6 <STACK_SIZE+0xe6>
			buffer.write(0x04 | BUTTON_RELEASED);
     5c0:	2144      	movs	r1, #68	; 0x44
     5c2:	481b      	ldr	r0, [pc, #108]	; (630 <STACK_SIZE+0x230>)
     5c4:	3008      	adds	r0, #8
     5c6:	4b17      	ldr	r3, [pc, #92]	; (624 <STACK_SIZE+0x224>)
     5c8:	4798      	blx	r3
     5ca:	2280      	movs	r2, #128	; 0x80
     5cc:	0092      	lsls	r2, r2, #2
     5ce:	4b16      	ldr	r3, [pc, #88]	; (628 <STACK_SIZE+0x228>)
     5d0:	615a      	str	r2, [r3, #20]
			ledStrip.setLEDColor(3, colorRGB(0x000000));
     5d2:	2100      	movs	r1, #0
     5d4:	a811      	add	r0, sp, #68	; 0x44
     5d6:	4b0f      	ldr	r3, [pc, #60]	; (614 <STACK_SIZE+0x214>)
     5d8:	4798      	blx	r3
     5da:	9a11      	ldr	r2, [sp, #68]	; 0x44
     5dc:	2103      	movs	r1, #3
     5de:	a801      	add	r0, sp, #4
     5e0:	4b0d      	ldr	r3, [pc, #52]	; (618 <STACK_SIZE+0x218>)
     5e2:	4798      	blx	r3
			ledStrip.write();
     5e4:	a801      	add	r0, sp, #4
     5e6:	4b0e      	ldr	r3, [pc, #56]	; (620 <STACK_SIZE+0x220>)
     5e8:	4798      	blx	r3
     5ea:	e77c      	b.n	4e6 <STACK_SIZE+0xe6>
     5ec:	0000181d 	.word	0x0000181d
     5f0:	00001295 	.word	0x00001295
     5f4:	00000f21 	.word	0x00000f21
     5f8:	000002e1 	.word	0x000002e1
     5fc:	00000329 	.word	0x00000329
     600:	00000205 	.word	0x00000205
     604:	00000291 	.word	0x00000291
     608:	00002121 	.word	0x00002121
     60c:	00000bd9 	.word	0x00000bd9
     610:	00eea255 	.word	0x00eea255
     614:	00000b81 	.word	0x00000b81
     618:	00000b8d 	.word	0x00000b8d
     61c:	000011ff 	.word	0x000011ff
     620:	00000cb9 	.word	0x00000cb9
     624:	00000b25 	.word	0x00000b25
     628:	41004400 	.word	0x41004400
     62c:	00ff8000 	.word	0x00ff8000
     630:	20000870 	.word	0x20000870
     634:	00000f61 	.word	0x00000f61
     638:	00001509 	.word	0x00001509
     63c:	000000ed 	.word	0x000000ed

00000640 <_GLOBAL__sub_I_last_button_level>:
}
     640:	b510      	push	{r4, lr}
     642:	4902      	ldr	r1, [pc, #8]	; (64c <_GLOBAL__sub_I_last_button_level+0xc>)
     644:	2001      	movs	r0, #1
     646:	4b02      	ldr	r3, [pc, #8]	; (650 <_GLOBAL__sub_I_last_button_level+0x10>)
     648:	4798      	blx	r3
     64a:	bd10      	pop	{r4, pc}
     64c:	0000ffff 	.word	0x0000ffff
     650:	000001c5 	.word	0x000001c5

00000654 <i2c_slave_init>:
     654:	b5f0      	push	{r4, r5, r6, r7, lr}
     656:	46ce      	mov	lr, r9
     658:	4647      	mov	r7, r8
     65a:	b580      	push	{r7, lr}
     65c:	b083      	sub	sp, #12
     65e:	0005      	movs	r5, r0
     660:	000c      	movs	r4, r1
     662:	0016      	movs	r6, r2
     664:	6029      	str	r1, [r5, #0]
     666:	680b      	ldr	r3, [r1, #0]
     668:	201c      	movs	r0, #28
     66a:	079b      	lsls	r3, r3, #30
     66c:	d504      	bpl.n	678 <i2c_slave_init+0x24>
     66e:	b003      	add	sp, #12
     670:	bc0c      	pop	{r2, r3}
     672:	4690      	mov	r8, r2
     674:	4699      	mov	r9, r3
     676:	bdf0      	pop	{r4, r5, r6, r7, pc}
     678:	680b      	ldr	r3, [r1, #0]
     67a:	3817      	subs	r0, #23
     67c:	07db      	lsls	r3, r3, #31
     67e:	d4f6      	bmi.n	66e <i2c_slave_init+0x1a>
     680:	0008      	movs	r0, r1
     682:	4b4d      	ldr	r3, [pc, #308]	; (7b8 <i2c_slave_init+0x164>)
     684:	4699      	mov	r9, r3
     686:	4798      	blx	r3
     688:	4a4c      	ldr	r2, [pc, #304]	; (7bc <i2c_slave_init+0x168>)
     68a:	6a11      	ldr	r1, [r2, #32]
     68c:	1c83      	adds	r3, r0, #2
     68e:	2701      	movs	r7, #1
     690:	46b8      	mov	r8, r7
     692:	409f      	lsls	r7, r3
     694:	003b      	movs	r3, r7
     696:	430b      	orrs	r3, r1
     698:	6213      	str	r3, [r2, #32]
     69a:	a901      	add	r1, sp, #4
     69c:	7e73      	ldrb	r3, [r6, #25]
     69e:	700b      	strb	r3, [r1, #0]
     6a0:	300e      	adds	r0, #14
     6a2:	b2c3      	uxtb	r3, r0
     6a4:	001f      	movs	r7, r3
     6a6:	0018      	movs	r0, r3
     6a8:	4b45      	ldr	r3, [pc, #276]	; (7c0 <i2c_slave_init+0x16c>)
     6aa:	4798      	blx	r3
     6ac:	0038      	movs	r0, r7
     6ae:	4b45      	ldr	r3, [pc, #276]	; (7c4 <i2c_slave_init+0x170>)
     6b0:	4798      	blx	r3
     6b2:	7e70      	ldrb	r0, [r6, #25]
     6b4:	2100      	movs	r1, #0
     6b6:	4b44      	ldr	r3, [pc, #272]	; (7c8 <i2c_slave_init+0x174>)
     6b8:	4798      	blx	r3
     6ba:	6828      	ldr	r0, [r5, #0]
     6bc:	47c8      	blx	r9
     6be:	0007      	movs	r7, r0
     6c0:	4942      	ldr	r1, [pc, #264]	; (7cc <i2c_slave_init+0x178>)
     6c2:	4b43      	ldr	r3, [pc, #268]	; (7d0 <i2c_slave_init+0x17c>)
     6c4:	4798      	blx	r3
     6c6:	00bf      	lsls	r7, r7, #2
     6c8:	4b42      	ldr	r3, [pc, #264]	; (7d4 <i2c_slave_init+0x180>)
     6ca:	50fd      	str	r5, [r7, r3]
     6cc:	2300      	movs	r3, #0
     6ce:	2224      	movs	r2, #36	; 0x24
     6d0:	54ab      	strb	r3, [r5, r2]
     6d2:	3201      	adds	r2, #1
     6d4:	54ab      	strb	r3, [r5, r2]
     6d6:	84eb      	strh	r3, [r5, #38]	; 0x26
     6d8:	7e33      	ldrb	r3, [r6, #24]
     6da:	726b      	strb	r3, [r5, #9]
     6dc:	2310      	movs	r3, #16
     6de:	6023      	str	r3, [r4, #0]
     6e0:	682c      	ldr	r4, [r5, #0]
     6e2:	8933      	ldrh	r3, [r6, #8]
     6e4:	80eb      	strh	r3, [r5, #6]
     6e6:	7c33      	ldrb	r3, [r6, #16]
     6e8:	722b      	strb	r3, [r5, #8]
     6ea:	2380      	movs	r3, #128	; 0x80
     6ec:	466a      	mov	r2, sp
     6ee:	7013      	strb	r3, [r2, #0]
     6f0:	2300      	movs	r3, #0
     6f2:	7053      	strb	r3, [r2, #1]
     6f4:	466b      	mov	r3, sp
     6f6:	4642      	mov	r2, r8
     6f8:	709a      	strb	r2, [r3, #2]
     6fa:	2300      	movs	r3, #0
     6fc:	466a      	mov	r2, sp
     6fe:	70d3      	strb	r3, [r2, #3]
     700:	69f0      	ldr	r0, [r6, #28]
     702:	6a35      	ldr	r5, [r6, #32]
     704:	2800      	cmp	r0, #0
     706:	d04b      	beq.n	7a0 <i2c_slave_init+0x14c>
     708:	466b      	mov	r3, sp
     70a:	7018      	strb	r0, [r3, #0]
     70c:	2302      	movs	r3, #2
     70e:	466a      	mov	r2, sp
     710:	7053      	strb	r3, [r2, #1]
     712:	0c00      	lsrs	r0, r0, #16
     714:	b2c0      	uxtb	r0, r0
     716:	4669      	mov	r1, sp
     718:	4b2f      	ldr	r3, [pc, #188]	; (7d8 <i2c_slave_init+0x184>)
     71a:	4798      	blx	r3
     71c:	2d00      	cmp	r5, #0
     71e:	d044      	beq.n	7aa <i2c_slave_init+0x156>
     720:	466b      	mov	r3, sp
     722:	701d      	strb	r5, [r3, #0]
     724:	2302      	movs	r3, #2
     726:	466a      	mov	r2, sp
     728:	7053      	strb	r3, [r2, #1]
     72a:	0c2d      	lsrs	r5, r5, #16
     72c:	b2e8      	uxtb	r0, r5
     72e:	4669      	mov	r1, sp
     730:	4b29      	ldr	r3, [pc, #164]	; (7d8 <i2c_slave_init+0x184>)
     732:	4798      	blx	r3
     734:	7eb3      	ldrb	r3, [r6, #26]
     736:	2280      	movs	r2, #128	; 0x80
     738:	2b00      	cmp	r3, #0
     73a:	d104      	bne.n	746 <i2c_slave_init+0xf2>
     73c:	4b27      	ldr	r3, [pc, #156]	; (7dc <i2c_slave_init+0x188>)
     73e:	789b      	ldrb	r3, [r3, #2]
     740:	079b      	lsls	r3, r3, #30
     742:	0fdb      	lsrs	r3, r3, #31
     744:	01da      	lsls	r2, r3, #7
     746:	2325      	movs	r3, #37	; 0x25
     748:	5cf3      	ldrb	r3, [r6, r3]
     74a:	2b00      	cmp	r3, #0
     74c:	d104      	bne.n	758 <i2c_slave_init+0x104>
     74e:	2380      	movs	r3, #128	; 0x80
     750:	049b      	lsls	r3, r3, #18
     752:	6971      	ldr	r1, [r6, #20]
     754:	4299      	cmp	r1, r3
     756:	d102      	bne.n	75e <i2c_slave_init+0x10a>
     758:	2380      	movs	r3, #128	; 0x80
     75a:	051b      	lsls	r3, r3, #20
     75c:	431a      	orrs	r2, r3
     75e:	6820      	ldr	r0, [r4, #0]
     760:	6873      	ldr	r3, [r6, #4]
     762:	6971      	ldr	r1, [r6, #20]
     764:	430b      	orrs	r3, r1
     766:	2124      	movs	r1, #36	; 0x24
     768:	5c71      	ldrb	r1, [r6, r1]
     76a:	0789      	lsls	r1, r1, #30
     76c:	430b      	orrs	r3, r1
     76e:	2126      	movs	r1, #38	; 0x26
     770:	5c71      	ldrb	r1, [r6, r1]
     772:	05c9      	lsls	r1, r1, #23
     774:	430b      	orrs	r3, r1
     776:	4303      	orrs	r3, r0
     778:	4313      	orrs	r3, r2
     77a:	6023      	str	r3, [r4, #0]
     77c:	8972      	ldrh	r2, [r6, #10]
     77e:	2380      	movs	r3, #128	; 0x80
     780:	005b      	lsls	r3, r3, #1
     782:	4313      	orrs	r3, r2
     784:	6063      	str	r3, [r4, #4]
     786:	89b3      	ldrh	r3, [r6, #12]
     788:	005b      	lsls	r3, r3, #1
     78a:	89f2      	ldrh	r2, [r6, #14]
     78c:	0452      	lsls	r2, r2, #17
     78e:	4313      	orrs	r3, r2
     790:	7c72      	ldrb	r2, [r6, #17]
     792:	4313      	orrs	r3, r2
     794:	7c32      	ldrb	r2, [r6, #16]
     796:	03d2      	lsls	r2, r2, #15
     798:	4313      	orrs	r3, r2
     79a:	6263      	str	r3, [r4, #36]	; 0x24
     79c:	2000      	movs	r0, #0
     79e:	e766      	b.n	66e <i2c_slave_init+0x1a>
     7a0:	2100      	movs	r1, #0
     7a2:	0020      	movs	r0, r4
     7a4:	4b0e      	ldr	r3, [pc, #56]	; (7e0 <i2c_slave_init+0x18c>)
     7a6:	4798      	blx	r3
     7a8:	e7ae      	b.n	708 <i2c_slave_init+0xb4>
     7aa:	2101      	movs	r1, #1
     7ac:	0020      	movs	r0, r4
     7ae:	4b0c      	ldr	r3, [pc, #48]	; (7e0 <i2c_slave_init+0x18c>)
     7b0:	4798      	blx	r3
     7b2:	0005      	movs	r5, r0
     7b4:	e7b4      	b.n	720 <i2c_slave_init+0xcc>
     7b6:	46c0      	nop			; (mov r8, r8)
     7b8:	00000e31 	.word	0x00000e31
     7bc:	40000400 	.word	0x40000400
     7c0:	00001621 	.word	0x00001621
     7c4:	00001595 	.word	0x00001595
     7c8:	00000d65 	.word	0x00000d65
     7cc:	00000851 	.word	0x00000851
     7d0:	00000e59 	.word	0x00000e59
     7d4:	200009c0 	.word	0x200009c0
     7d8:	00001719 	.word	0x00001719
     7dc:	41002000 	.word	0x41002000
     7e0:	00000db1 	.word	0x00000db1

000007e4 <i2c_slave_register_callback>:
     7e4:	b510      	push	{r4, lr}
     7e6:	1c93      	adds	r3, r2, #2
     7e8:	009b      	lsls	r3, r3, #2
     7ea:	18c3      	adds	r3, r0, r3
     7ec:	6059      	str	r1, [r3, #4]
     7ee:	2424      	movs	r4, #36	; 0x24
     7f0:	5d03      	ldrb	r3, [r0, r4]
     7f2:	2101      	movs	r1, #1
     7f4:	4091      	lsls	r1, r2
     7f6:	430b      	orrs	r3, r1
     7f8:	b2db      	uxtb	r3, r3
     7fa:	5503      	strb	r3, [r0, r4]
     7fc:	bd10      	pop	{r4, pc}

000007fe <i2c_slave_read_packet_job>:
     7fe:	8d02      	ldrh	r2, [r0, #40]	; 0x28
     800:	2305      	movs	r3, #5
     802:	2a00      	cmp	r2, #0
     804:	d001      	beq.n	80a <i2c_slave_read_packet_job+0xc>
     806:	0018      	movs	r0, r3
     808:	4770      	bx	lr
     80a:	684b      	ldr	r3, [r1, #4]
     80c:	62c3      	str	r3, [r0, #44]	; 0x2c
     80e:	880b      	ldrh	r3, [r1, #0]
     810:	8503      	strh	r3, [r0, #40]	; 0x28
     812:	880b      	ldrh	r3, [r1, #0]
     814:	84c3      	strh	r3, [r0, #38]	; 0x26
     816:	3205      	adds	r2, #5
     818:	2331      	movs	r3, #49	; 0x31
     81a:	54c2      	strb	r2, [r0, r3]
     81c:	6803      	ldr	r3, [r0, #0]
     81e:	3202      	adds	r2, #2
     820:	759a      	strb	r2, [r3, #22]
     822:	2300      	movs	r3, #0
     824:	e7ef      	b.n	806 <i2c_slave_read_packet_job+0x8>

00000826 <i2c_slave_write_packet_job>:
     826:	8d02      	ldrh	r2, [r0, #40]	; 0x28
     828:	2305      	movs	r3, #5
     82a:	2a00      	cmp	r2, #0
     82c:	d001      	beq.n	832 <i2c_slave_write_packet_job+0xc>
     82e:	0018      	movs	r0, r3
     830:	4770      	bx	lr
     832:	684b      	ldr	r3, [r1, #4]
     834:	62c3      	str	r3, [r0, #44]	; 0x2c
     836:	880b      	ldrh	r3, [r1, #0]
     838:	8503      	strh	r3, [r0, #40]	; 0x28
     83a:	880b      	ldrh	r3, [r1, #0]
     83c:	84c3      	strh	r3, [r0, #38]	; 0x26
     83e:	3205      	adds	r2, #5
     840:	2331      	movs	r3, #49	; 0x31
     842:	54c2      	strb	r2, [r0, r3]
     844:	6803      	ldr	r3, [r0, #0]
     846:	3202      	adds	r2, #2
     848:	759a      	strb	r2, [r3, #22]
     84a:	2300      	movs	r3, #0
     84c:	e7ef      	b.n	82e <i2c_slave_write_packet_job+0x8>
	...

00000850 <_i2c_slave_interrupt_handler>:
     850:	b570      	push	{r4, r5, r6, lr}
     852:	0080      	lsls	r0, r0, #2
     854:	4b9b      	ldr	r3, [pc, #620]	; (ac4 <_i2c_slave_interrupt_handler+0x274>)
     856:	58c4      	ldr	r4, [r0, r3]
     858:	6825      	ldr	r5, [r4, #0]
     85a:	2325      	movs	r3, #37	; 0x25
     85c:	5ce3      	ldrb	r3, [r4, r3]
     85e:	2224      	movs	r2, #36	; 0x24
     860:	5ca6      	ldrb	r6, [r4, r2]
     862:	401e      	ands	r6, r3
     864:	7e2b      	ldrb	r3, [r5, #24]
     866:	079b      	lsls	r3, r3, #30
     868:	d400      	bmi.n	86c <_i2c_slave_interrupt_handler+0x1c>
     86a:	e095      	b.n	998 <_i2c_slave_interrupt_handler+0x148>
     86c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     86e:	b29b      	uxth	r3, r3
     870:	8d22      	ldrh	r2, [r4, #40]	; 0x28
     872:	4293      	cmp	r3, r2
     874:	d00d      	beq.n	892 <_i2c_slave_interrupt_handler+0x42>
     876:	2330      	movs	r3, #48	; 0x30
     878:	5ce3      	ldrb	r3, [r4, r3]
     87a:	2b00      	cmp	r3, #0
     87c:	d109      	bne.n	892 <_i2c_slave_interrupt_handler+0x42>
     87e:	2231      	movs	r2, #49	; 0x31
     880:	54a3      	strb	r3, [r4, r2]
     882:	84e3      	strh	r3, [r4, #38]	; 0x26
     884:	8523      	strh	r3, [r4, #40]	; 0x28
     886:	07b3      	lsls	r3, r6, #30
     888:	d50b      	bpl.n	8a2 <_i2c_slave_interrupt_handler+0x52>
     88a:	6923      	ldr	r3, [r4, #16]
     88c:	0020      	movs	r0, r4
     88e:	4798      	blx	r3
     890:	e007      	b.n	8a2 <_i2c_slave_interrupt_handler+0x52>
     892:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     894:	b29b      	uxth	r3, r3
     896:	429a      	cmp	r2, r3
     898:	d003      	beq.n	8a2 <_i2c_slave_interrupt_handler+0x52>
     89a:	2330      	movs	r3, #48	; 0x30
     89c:	5ce3      	ldrb	r3, [r4, r3]
     89e:	2b01      	cmp	r3, #1
     8a0:	d022      	beq.n	8e8 <_i2c_slave_interrupt_handler+0x98>
     8a2:	8b6a      	ldrh	r2, [r5, #26]
     8a4:	2343      	movs	r3, #67	; 0x43
     8a6:	421a      	tst	r2, r3
     8a8:	d004      	beq.n	8b4 <_i2c_slave_interrupt_handler+0x64>
     8aa:	2210      	movs	r2, #16
     8ac:	3b12      	subs	r3, #18
     8ae:	54e2      	strb	r2, [r4, r3]
     8b0:	06b3      	lsls	r3, r6, #26
     8b2:	d424      	bmi.n	8fe <_i2c_slave_interrupt_handler+0xae>
     8b4:	7a63      	ldrb	r3, [r4, #9]
     8b6:	2b00      	cmp	r3, #0
     8b8:	d125      	bne.n	906 <_i2c_slave_interrupt_handler+0xb6>
     8ba:	8b6b      	ldrh	r3, [r5, #26]
     8bc:	071b      	lsls	r3, r3, #28
     8be:	d54a      	bpl.n	956 <_i2c_slave_interrupt_handler+0x106>
     8c0:	2201      	movs	r2, #1
     8c2:	2330      	movs	r3, #48	; 0x30
     8c4:	54e2      	strb	r2, [r4, r3]
     8c6:	0773      	lsls	r3, r6, #29
     8c8:	d438      	bmi.n	93c <_i2c_slave_interrupt_handler+0xec>
     8ca:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     8cc:	b29b      	uxth	r3, r3
     8ce:	2b00      	cmp	r3, #0
     8d0:	d138      	bne.n	944 <_i2c_slave_interrupt_handler+0xf4>
     8d2:	6825      	ldr	r5, [r4, #0]
     8d4:	4b7c      	ldr	r3, [pc, #496]	; (ac8 <_i2c_slave_interrupt_handler+0x278>)
     8d6:	4798      	blx	r3
     8d8:	2300      	movs	r3, #0
     8da:	836b      	strh	r3, [r5, #26]
     8dc:	2380      	movs	r3, #128	; 0x80
     8de:	02db      	lsls	r3, r3, #11
     8e0:	606b      	str	r3, [r5, #4]
     8e2:	4b7a      	ldr	r3, [pc, #488]	; (acc <_i2c_slave_interrupt_handler+0x27c>)
     8e4:	4798      	blx	r3
     8e6:	e018      	b.n	91a <_i2c_slave_interrupt_handler+0xca>
     8e8:	2300      	movs	r3, #0
     8ea:	2231      	movs	r2, #49	; 0x31
     8ec:	54a3      	strb	r3, [r4, r2]
     8ee:	84e3      	strh	r3, [r4, #38]	; 0x26
     8f0:	8523      	strh	r3, [r4, #40]	; 0x28
     8f2:	07f3      	lsls	r3, r6, #31
     8f4:	d5d5      	bpl.n	8a2 <_i2c_slave_interrupt_handler+0x52>
     8f6:	68e3      	ldr	r3, [r4, #12]
     8f8:	0020      	movs	r0, r4
     8fa:	4798      	blx	r3
     8fc:	e7d1      	b.n	8a2 <_i2c_slave_interrupt_handler+0x52>
     8fe:	6a23      	ldr	r3, [r4, #32]
     900:	0020      	movs	r0, r4
     902:	4798      	blx	r3
     904:	e7d6      	b.n	8b4 <_i2c_slave_interrupt_handler+0x64>
     906:	6825      	ldr	r5, [r4, #0]
     908:	4b6f      	ldr	r3, [pc, #444]	; (ac8 <_i2c_slave_interrupt_handler+0x278>)
     90a:	4798      	blx	r3
     90c:	2300      	movs	r3, #0
     90e:	836b      	strh	r3, [r5, #26]
     910:	2380      	movs	r3, #128	; 0x80
     912:	02db      	lsls	r3, r3, #11
     914:	606b      	str	r3, [r5, #4]
     916:	4b6d      	ldr	r3, [pc, #436]	; (acc <_i2c_slave_interrupt_handler+0x27c>)
     918:	4798      	blx	r3
     91a:	6823      	ldr	r3, [r4, #0]
     91c:	7e1a      	ldrb	r2, [r3, #24]
     91e:	07d2      	lsls	r2, r2, #31
     920:	d501      	bpl.n	926 <_i2c_slave_interrupt_handler+0xd6>
     922:	2201      	movs	r2, #1
     924:	761a      	strb	r2, [r3, #24]
     926:	2202      	movs	r2, #2
     928:	761a      	strb	r2, [r3, #24]
     92a:	6824      	ldr	r4, [r4, #0]
     92c:	4b66      	ldr	r3, [pc, #408]	; (ac8 <_i2c_slave_interrupt_handler+0x278>)
     92e:	4798      	blx	r3
     930:	2300      	movs	r3, #0
     932:	8363      	strh	r3, [r4, #26]
     934:	6063      	str	r3, [r4, #4]
     936:	4b65      	ldr	r3, [pc, #404]	; (acc <_i2c_slave_interrupt_handler+0x27c>)
     938:	4798      	blx	r3
     93a:	bd70      	pop	{r4, r5, r6, pc}
     93c:	6963      	ldr	r3, [r4, #20]
     93e:	0020      	movs	r0, r4
     940:	4798      	blx	r3
     942:	e7c2      	b.n	8ca <_i2c_slave_interrupt_handler+0x7a>
     944:	6825      	ldr	r5, [r4, #0]
     946:	4b60      	ldr	r3, [pc, #384]	; (ac8 <_i2c_slave_interrupt_handler+0x278>)
     948:	4798      	blx	r3
     94a:	2300      	movs	r3, #0
     94c:	836b      	strh	r3, [r5, #26]
     94e:	606b      	str	r3, [r5, #4]
     950:	4b5e      	ldr	r3, [pc, #376]	; (acc <_i2c_slave_interrupt_handler+0x27c>)
     952:	4798      	blx	r3
     954:	e7e1      	b.n	91a <_i2c_slave_interrupt_handler+0xca>
     956:	2200      	movs	r2, #0
     958:	2330      	movs	r3, #48	; 0x30
     95a:	54e2      	strb	r2, [r4, r3]
     95c:	0733      	lsls	r3, r6, #28
     95e:	d40e      	bmi.n	97e <_i2c_slave_interrupt_handler+0x12e>
     960:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     962:	b29b      	uxth	r3, r3
     964:	2b00      	cmp	r3, #0
     966:	d10e      	bne.n	986 <_i2c_slave_interrupt_handler+0x136>
     968:	6825      	ldr	r5, [r4, #0]
     96a:	4b57      	ldr	r3, [pc, #348]	; (ac8 <_i2c_slave_interrupt_handler+0x278>)
     96c:	4798      	blx	r3
     96e:	2300      	movs	r3, #0
     970:	836b      	strh	r3, [r5, #26]
     972:	2380      	movs	r3, #128	; 0x80
     974:	02db      	lsls	r3, r3, #11
     976:	606b      	str	r3, [r5, #4]
     978:	4b54      	ldr	r3, [pc, #336]	; (acc <_i2c_slave_interrupt_handler+0x27c>)
     97a:	4798      	blx	r3
     97c:	e7cd      	b.n	91a <_i2c_slave_interrupt_handler+0xca>
     97e:	69a3      	ldr	r3, [r4, #24]
     980:	0020      	movs	r0, r4
     982:	4798      	blx	r3
     984:	e7ec      	b.n	960 <_i2c_slave_interrupt_handler+0x110>
     986:	6825      	ldr	r5, [r4, #0]
     988:	4b4f      	ldr	r3, [pc, #316]	; (ac8 <_i2c_slave_interrupt_handler+0x278>)
     98a:	4798      	blx	r3
     98c:	2300      	movs	r3, #0
     98e:	836b      	strh	r3, [r5, #26]
     990:	606b      	str	r3, [r5, #4]
     992:	4b4e      	ldr	r3, [pc, #312]	; (acc <_i2c_slave_interrupt_handler+0x27c>)
     994:	4798      	blx	r3
     996:	e7c0      	b.n	91a <_i2c_slave_interrupt_handler+0xca>
     998:	7e2b      	ldrb	r3, [r5, #24]
     99a:	07db      	lsls	r3, r3, #31
     99c:	d52e      	bpl.n	9fc <_i2c_slave_interrupt_handler+0x1ac>
     99e:	2301      	movs	r3, #1
     9a0:	762b      	strb	r3, [r5, #24]
     9a2:	3304      	adds	r3, #4
     9a4:	752b      	strb	r3, [r5, #20]
     9a6:	3320      	adds	r3, #32
     9a8:	5ce3      	ldrb	r3, [r4, r3]
     9aa:	075b      	lsls	r3, r3, #29
     9ac:	d405      	bmi.n	9ba <_i2c_slave_interrupt_handler+0x16a>
     9ae:	2325      	movs	r3, #37	; 0x25
     9b0:	5ce3      	ldrb	r3, [r4, r3]
     9b2:	071b      	lsls	r3, r3, #28
     9b4:	d401      	bmi.n	9ba <_i2c_slave_interrupt_handler+0x16a>
     9b6:	2302      	movs	r3, #2
     9b8:	752b      	strb	r3, [r5, #20]
     9ba:	2331      	movs	r3, #49	; 0x31
     9bc:	5ce3      	ldrb	r3, [r4, r3]
     9be:	2b1e      	cmp	r3, #30
     9c0:	d0bb      	beq.n	93a <_i2c_slave_interrupt_handler+0xea>
     9c2:	2331      	movs	r3, #49	; 0x31
     9c4:	5ce3      	ldrb	r3, [r4, r3]
     9c6:	2b10      	cmp	r3, #16
     9c8:	d0b7      	beq.n	93a <_i2c_slave_interrupt_handler+0xea>
     9ca:	2300      	movs	r3, #0
     9cc:	2231      	movs	r2, #49	; 0x31
     9ce:	54a3      	strb	r3, [r4, r2]
     9d0:	84e3      	strh	r3, [r4, #38]	; 0x26
     9d2:	8523      	strh	r3, [r4, #40]	; 0x28
     9d4:	07b3      	lsls	r3, r6, #30
     9d6:	d503      	bpl.n	9e0 <_i2c_slave_interrupt_handler+0x190>
     9d8:	2330      	movs	r3, #48	; 0x30
     9da:	5ce3      	ldrb	r3, [r4, r3]
     9dc:	2b00      	cmp	r3, #0
     9de:	d009      	beq.n	9f4 <_i2c_slave_interrupt_handler+0x1a4>
     9e0:	07f3      	lsls	r3, r6, #31
     9e2:	d5aa      	bpl.n	93a <_i2c_slave_interrupt_handler+0xea>
     9e4:	2330      	movs	r3, #48	; 0x30
     9e6:	5ce3      	ldrb	r3, [r4, r3]
     9e8:	2b01      	cmp	r3, #1
     9ea:	d1a6      	bne.n	93a <_i2c_slave_interrupt_handler+0xea>
     9ec:	68e3      	ldr	r3, [r4, #12]
     9ee:	0020      	movs	r0, r4
     9f0:	4798      	blx	r3
     9f2:	e7a2      	b.n	93a <_i2c_slave_interrupt_handler+0xea>
     9f4:	6923      	ldr	r3, [r4, #16]
     9f6:	0020      	movs	r0, r4
     9f8:	4798      	blx	r3
     9fa:	e79e      	b.n	93a <_i2c_slave_interrupt_handler+0xea>
     9fc:	7e2b      	ldrb	r3, [r5, #24]
     9fe:	075b      	lsls	r3, r3, #29
     a00:	d59b      	bpl.n	93a <_i2c_slave_interrupt_handler+0xea>
     a02:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     a04:	2b00      	cmp	r3, #0
     a06:	d01e      	beq.n	a46 <_i2c_slave_interrupt_handler+0x1f6>
     a08:	2230      	movs	r2, #48	; 0x30
     a0a:	5ca2      	ldrb	r2, [r4, r2]
     a0c:	2a01      	cmp	r2, #1
     a0e:	d013      	beq.n	a38 <_i2c_slave_interrupt_handler+0x1e8>
     a10:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     a12:	b29b      	uxth	r3, r3
     a14:	2b00      	cmp	r3, #0
     a16:	d100      	bne.n	a1a <_i2c_slave_interrupt_handler+0x1ca>
     a18:	e78f      	b.n	93a <_i2c_slave_interrupt_handler+0xea>
     a1a:	2330      	movs	r3, #48	; 0x30
     a1c:	5ce3      	ldrb	r3, [r4, r3]
     a1e:	2b00      	cmp	r3, #0
     a20:	d044      	beq.n	aac <_i2c_slave_interrupt_handler+0x25c>
     a22:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     a24:	1c5a      	adds	r2, r3, #1
     a26:	62e2      	str	r2, [r4, #44]	; 0x2c
     a28:	781b      	ldrb	r3, [r3, #0]
     a2a:	b2db      	uxtb	r3, r3
     a2c:	2228      	movs	r2, #40	; 0x28
     a2e:	54ab      	strb	r3, [r5, r2]
     a30:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     a32:	3b01      	subs	r3, #1
     a34:	8523      	strh	r3, [r4, #40]	; 0x28
     a36:	e780      	b.n	93a <_i2c_slave_interrupt_handler+0xea>
     a38:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
     a3a:	b292      	uxth	r2, r2
     a3c:	4293      	cmp	r3, r2
     a3e:	d2e7      	bcs.n	a10 <_i2c_slave_interrupt_handler+0x1c0>
     a40:	8b6b      	ldrh	r3, [r5, #26]
     a42:	075b      	lsls	r3, r3, #29
     a44:	d5e4      	bpl.n	a10 <_i2c_slave_interrupt_handler+0x1c0>
     a46:	2300      	movs	r3, #0
     a48:	8523      	strh	r3, [r4, #40]	; 0x28
     a4a:	84e3      	strh	r3, [r4, #38]	; 0x26
     a4c:	3330      	adds	r3, #48	; 0x30
     a4e:	5ce3      	ldrb	r3, [r4, r3]
     a50:	2b00      	cmp	r3, #0
     a52:	d117      	bne.n	a84 <_i2c_slave_interrupt_handler+0x234>
     a54:	4b1c      	ldr	r3, [pc, #112]	; (ac8 <_i2c_slave_interrupt_handler+0x278>)
     a56:	4798      	blx	r3
     a58:	2300      	movs	r3, #0
     a5a:	836b      	strh	r3, [r5, #26]
     a5c:	2380      	movs	r3, #128	; 0x80
     a5e:	02db      	lsls	r3, r3, #11
     a60:	606b      	str	r3, [r5, #4]
     a62:	4b1a      	ldr	r3, [pc, #104]	; (acc <_i2c_slave_interrupt_handler+0x27c>)
     a64:	4798      	blx	r3
     a66:	686a      	ldr	r2, [r5, #4]
     a68:	2380      	movs	r3, #128	; 0x80
     a6a:	029b      	lsls	r3, r3, #10
     a6c:	4313      	orrs	r3, r2
     a6e:	606b      	str	r3, [r5, #4]
     a70:	221e      	movs	r2, #30
     a72:	2331      	movs	r3, #49	; 0x31
     a74:	54e2      	strb	r2, [r4, r3]
     a76:	06f3      	lsls	r3, r6, #27
     a78:	d400      	bmi.n	a7c <_i2c_slave_interrupt_handler+0x22c>
     a7a:	e75e      	b.n	93a <_i2c_slave_interrupt_handler+0xea>
     a7c:	69e3      	ldr	r3, [r4, #28]
     a7e:	0020      	movs	r0, r4
     a80:	4798      	blx	r3
     a82:	e75a      	b.n	93a <_i2c_slave_interrupt_handler+0xea>
     a84:	4b10      	ldr	r3, [pc, #64]	; (ac8 <_i2c_slave_interrupt_handler+0x278>)
     a86:	4798      	blx	r3
     a88:	2300      	movs	r3, #0
     a8a:	836b      	strh	r3, [r5, #26]
     a8c:	2380      	movs	r3, #128	; 0x80
     a8e:	02db      	lsls	r3, r3, #11
     a90:	606b      	str	r3, [r5, #4]
     a92:	4b0e      	ldr	r3, [pc, #56]	; (acc <_i2c_slave_interrupt_handler+0x27c>)
     a94:	4798      	blx	r3
     a96:	686a      	ldr	r2, [r5, #4]
     a98:	2380      	movs	r3, #128	; 0x80
     a9a:	029b      	lsls	r3, r3, #10
     a9c:	4313      	orrs	r3, r2
     a9e:	606b      	str	r3, [r5, #4]
     aa0:	2331      	movs	r3, #49	; 0x31
     aa2:	2200      	movs	r2, #0
     aa4:	54e2      	strb	r2, [r4, r3]
     aa6:	3b2d      	subs	r3, #45	; 0x2d
     aa8:	752b      	strb	r3, [r5, #20]
     aaa:	e746      	b.n	93a <_i2c_slave_interrupt_handler+0xea>
     aac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     aae:	1c53      	adds	r3, r2, #1
     ab0:	62e3      	str	r3, [r4, #44]	; 0x2c
     ab2:	2328      	movs	r3, #40	; 0x28
     ab4:	5ceb      	ldrb	r3, [r5, r3]
     ab6:	b2db      	uxtb	r3, r3
     ab8:	7013      	strb	r3, [r2, #0]
     aba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     abc:	3b01      	subs	r3, #1
     abe:	8523      	strh	r3, [r4, #40]	; 0x28
     ac0:	e73b      	b.n	93a <_i2c_slave_interrupt_handler+0xea>
     ac2:	46c0      	nop			; (mov r8, r8)
     ac4:	200009c0 	.word	0x200009c0
     ac8:	00000fb1 	.word	0x00000fb1
     acc:	00000ff1 	.word	0x00000ff1

00000ad0 <_ZN14CircularBufferC1Eh>:
     ad0:	7281      	strb	r1, [r0, #10]
     ad2:	2300      	movs	r3, #0
     ad4:	72c3      	strb	r3, [r0, #11]
     ad6:	7303      	strb	r3, [r0, #12]
     ad8:	4770      	bx	lr

00000ada <_ZN14CircularBufferD1Ev>:
     ada:	4770      	bx	lr

00000adc <_ZN14CircularBuffer4sizeEv>:
     adc:	7b03      	ldrb	r3, [r0, #12]
     ade:	7ac1      	ldrb	r1, [r0, #11]
     ae0:	428b      	cmp	r3, r1
     ae2:	da05      	bge.n	af0 <_ZN14CircularBuffer4sizeEv+0x14>
     ae4:	7a82      	ldrb	r2, [r0, #10]
     ae6:	1a5b      	subs	r3, r3, r1
     ae8:	b2d8      	uxtb	r0, r3
     aea:	1810      	adds	r0, r2, r0
     aec:	b2c0      	uxtb	r0, r0
     aee:	4770      	bx	lr
     af0:	1a5b      	subs	r3, r3, r1
     af2:	b2d8      	uxtb	r0, r3
     af4:	e7fb      	b.n	aee <_ZN14CircularBuffer4sizeEv+0x12>

00000af6 <_ZNK14CircularBuffer7isEmptyEv>:
     af6:	7ac3      	ldrb	r3, [r0, #11]
     af8:	7b00      	ldrb	r0, [r0, #12]
     afa:	1ac0      	subs	r0, r0, r3
     afc:	4243      	negs	r3, r0
     afe:	4158      	adcs	r0, r3
     b00:	b2c0      	uxtb	r0, r0
     b02:	4770      	bx	lr

00000b04 <_ZNK14CircularBuffer6isFullEv>:
     b04:	b510      	push	{r4, lr}
     b06:	0004      	movs	r4, r0
     b08:	7b00      	ldrb	r0, [r0, #12]
     b0a:	3001      	adds	r0, #1
     b0c:	7aa1      	ldrb	r1, [r4, #10]
     b0e:	4b04      	ldr	r3, [pc, #16]	; (b20 <_ZNK14CircularBuffer6isFullEv+0x1c>)
     b10:	4798      	blx	r3
     b12:	7ae0      	ldrb	r0, [r4, #11]
     b14:	1a40      	subs	r0, r0, r1
     b16:	4241      	negs	r1, r0
     b18:	4148      	adcs	r0, r1
     b1a:	b2c0      	uxtb	r0, r0
     b1c:	bd10      	pop	{r4, pc}
     b1e:	46c0      	nop			; (mov r8, r8)
     b20:	00001b41 	.word	0x00001b41

00000b24 <_ZN14CircularBuffer5writeEh>:
     b24:	b570      	push	{r4, r5, r6, lr}
     b26:	0004      	movs	r4, r0
     b28:	000d      	movs	r5, r1
     b2a:	4b07      	ldr	r3, [pc, #28]	; (b48 <_ZN14CircularBuffer5writeEh+0x24>)
     b2c:	4798      	blx	r3
     b2e:	2800      	cmp	r0, #0
     b30:	d108      	bne.n	b44 <_ZN14CircularBuffer5writeEh+0x20>
     b32:	7b20      	ldrb	r0, [r4, #12]
     b34:	5425      	strb	r5, [r4, r0]
     b36:	3001      	adds	r0, #1
     b38:	7aa1      	ldrb	r1, [r4, #10]
     b3a:	4b04      	ldr	r3, [pc, #16]	; (b4c <_ZN14CircularBuffer5writeEh+0x28>)
     b3c:	4798      	blx	r3
     b3e:	7321      	strb	r1, [r4, #12]
     b40:	2001      	movs	r0, #1
     b42:	bd70      	pop	{r4, r5, r6, pc}
     b44:	2000      	movs	r0, #0
     b46:	e7fc      	b.n	b42 <_ZN14CircularBuffer5writeEh+0x1e>
     b48:	00000b05 	.word	0x00000b05
     b4c:	00001b41 	.word	0x00001b41

00000b50 <_ZN14CircularBuffer4readERh>:
     b50:	b570      	push	{r4, r5, r6, lr}
     b52:	0004      	movs	r4, r0
     b54:	000d      	movs	r5, r1
     b56:	4b08      	ldr	r3, [pc, #32]	; (b78 <_ZN14CircularBuffer4readERh+0x28>)
     b58:	4798      	blx	r3
     b5a:	2800      	cmp	r0, #0
     b5c:	d10a      	bne.n	b74 <_ZN14CircularBuffer4readERh+0x24>
     b5e:	7ae3      	ldrb	r3, [r4, #11]
     b60:	5ce3      	ldrb	r3, [r4, r3]
     b62:	702b      	strb	r3, [r5, #0]
     b64:	7ae0      	ldrb	r0, [r4, #11]
     b66:	3001      	adds	r0, #1
     b68:	7aa1      	ldrb	r1, [r4, #10]
     b6a:	4b04      	ldr	r3, [pc, #16]	; (b7c <_ZN14CircularBuffer4readERh+0x2c>)
     b6c:	4798      	blx	r3
     b6e:	72e1      	strb	r1, [r4, #11]
     b70:	2001      	movs	r0, #1
     b72:	bd70      	pop	{r4, r5, r6, pc}
     b74:	2000      	movs	r0, #0
     b76:	e7fc      	b.n	b72 <_ZN14CircularBuffer4readERh+0x22>
     b78:	00000af7 	.word	0x00000af7
     b7c:	00001b41 	.word	0x00001b41

00000b80 <_ZN8colorRGBC1Em>:


#include "ws2812b.h"

colorRGB::colorRGB(uint32_t colorHEX){
	R = (colorHEX >> 16) & 0xFF;
     b80:	0c0b      	lsrs	r3, r1, #16
     b82:	7003      	strb	r3, [r0, #0]
	G = (colorHEX >> 8) & 0xFF;
     b84:	0a0b      	lsrs	r3, r1, #8
     b86:	7043      	strb	r3, [r0, #1]
	B = colorHEX & 0xFF;
     b88:	7081      	strb	r1, [r0, #2]
}
     b8a:	4770      	bx	lr

00000b8c <_ZN7ws2812b11setLEDColorEh8colorRGB>:
{
	if(pixelsIsDynamic)
		delete pixels;
} //~ws2812b

void ws2812b::setLEDColor(uint8_t led_num, colorRGB color){
     b8c:	b530      	push	{r4, r5, lr}
     b8e:	b083      	sub	sp, #12
     b90:	9201      	str	r2, [sp, #4]
	if(led_num>=num_leds)
     b92:	8803      	ldrh	r3, [r0, #0]
     b94:	4299      	cmp	r1, r3
     b96:	da0d      	bge.n	bb4 <_ZN7ws2812b11setLEDColorEh8colorRGB+0x28>
		return;
	//color order is GRB
	
	pixels[led_num*3+1] = color.R;
     b98:	004b      	lsls	r3, r1, #1
     b9a:	1859      	adds	r1, r3, r1
     b9c:	1c4a      	adds	r2, r1, #1
     b9e:	ab01      	add	r3, sp, #4
     ba0:	781c      	ldrb	r4, [r3, #0]
     ba2:	6845      	ldr	r5, [r0, #4]
     ba4:	54ac      	strb	r4, [r5, r2]
	pixels[led_num*3] = color.G;
     ba6:	785a      	ldrb	r2, [r3, #1]
     ba8:	6844      	ldr	r4, [r0, #4]
     baa:	5462      	strb	r2, [r4, r1]
	pixels[led_num*3+2] = color.B;
     bac:	6842      	ldr	r2, [r0, #4]
     bae:	3102      	adds	r1, #2
     bb0:	789b      	ldrb	r3, [r3, #2]
     bb2:	5453      	strb	r3, [r2, r1]
}
     bb4:	b003      	add	sp, #12
     bb6:	bd30      	pop	{r4, r5, pc}

00000bb8 <_ZN7ws2812b13configureGPIOEv>:
void ws2812b::write(){
	
	ws2812_write();
}

void ws2812b::configureGPIO(){
     bb8:	b500      	push	{lr}
     bba:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
     bbc:	a901      	add	r1, sp, #4
     bbe:	2301      	movs	r3, #1
     bc0:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
     bc2:	2200      	movs	r2, #0
     bc4:	708a      	strb	r2, [r1, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
     bc6:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(led_pin, &config_port_pin);
     bc8:	7a00      	ldrb	r0, [r0, #8]
     bca:	4b02      	ldr	r3, [pc, #8]	; (bd4 <_ZN7ws2812b13configureGPIOEv+0x1c>)
     bcc:	4798      	blx	r3
}
     bce:	b003      	add	sp, #12
     bd0:	bd00      	pop	{pc}
     bd2:	46c0      	nop			; (mov r8, r8)
     bd4:	00000f8d 	.word	0x00000f8d

00000bd8 <_ZN7ws2812bC1EPhth>:
ws2812b::ws2812b(uint8_t* pixels_, uint16_t num_leds_, uint8_t led_pin_){
     bd8:	b510      	push	{r4, lr}
     bda:	0004      	movs	r4, r0
     bdc:	2000      	movs	r0, #0
     bde:	60e0      	str	r0, [r4, #12]
	led_pin = led_pin_;
     be0:	7223      	strb	r3, [r4, #8]
	num_leds = num_leds_;
     be2:	8022      	strh	r2, [r4, #0]
	pixels = pixels_;
     be4:	6061      	str	r1, [r4, #4]
	pixelsIsDynamic = false;
     be6:	70a0      	strb	r0, [r4, #2]
	configureGPIO();
     be8:	0020      	movs	r0, r4
     bea:	4b02      	ldr	r3, [pc, #8]	; (bf4 <_ZN7ws2812bC1EPhth+0x1c>)
     bec:	4798      	blx	r3
};
     bee:	0020      	movs	r0, r4
     bf0:	bd10      	pop	{r4, pc}
     bf2:	46c0      	nop			; (mov r8, r8)
     bf4:	00000bb9 	.word	0x00000bb9

00000bf8 <_ZN7ws2812b12ws2812_writeEv>:
	.45us	: .45/.125 = 3.6	-> 4 cycles = 0.5us
	.8us		: .8/.125 = 6.4		-> 6 cycles = 0.75us
	.85us	: .85/.125 = 6.8	-> 7 cycles = 0.875us
	*/
void ws2812b::ws2812_write()
{
     bf8:	b530      	push	{r4, r5, lr}
	if(pixels == NULL)
     bfa:	6843      	ldr	r3, [r0, #4]
     bfc:	2b00      	cmp	r3, #0
     bfe:	d100      	bne.n	c02 <_ZN7ws2812b12ws2812_writeEv+0xa>
     c00:	e057      	b.n	cb2 <_ZN7ws2812b12ws2812_writeEv+0xba>
		return;
	uint16_t numBytes = num_leds*3;
     c02:	8805      	ldrh	r5, [r0, #0]
     c04:	006a      	lsls	r2, r5, #1
     c06:	18ad      	adds	r5, r5, r2
     c08:	b2ad      	uxth	r5, r5
	uint8_t  *ptr, *end, p, bitMask;
	uint32_t  pinMask;

	PortGroup *const port_base = port_get_group_from_gpio_pin(led_pin);
     c0a:	7a00      	ldrb	r0, [r0, #8]
	uint8_t port_index  = (gpio_pin / 128);
     c0c:	09c2      	lsrs	r2, r0, #7
	uint8_t group_index = (gpio_pin / 32);
     c0e:	0941      	lsrs	r1, r0, #5
	if (port_index < PORT_INST_NUM) {
     c10:	2a00      	cmp	r2, #0
     c12:	dd07      	ble.n	c24 <_ZN7ws2812b12ws2812_writeEv+0x2c>
		return NULL;
     c14:	2100      	movs	r1, #0

	 volatile uint32_t *set = &(port_base->OUTSET.reg);
	 volatile uint32_t *clr = &(port_base->OUTCLR.reg);
	

	pinMask =  1ul << led_pin;
     c16:	2201      	movs	r2, #1
     c18:	4082      	lsls	r2, r0
	ptr     =  pixels;
	end     =  ptr + numBytes;
     c1a:	195d      	adds	r5, r3, r5
	p       = *ptr++;
     c1c:	1c58      	adds	r0, r3, #1
     c1e:	781c      	ldrb	r4, [r3, #0]
	bitMask =  0x80;
     c20:	2380      	movs	r3, #128	; 0x80
     c22:	e01f      	b.n	c64 <_ZN7ws2812b12ws2812_writeEv+0x6c>
		return &(ports[port_index]->Group[group_index]);
     c24:	01c9      	lsls	r1, r1, #7
     c26:	4a23      	ldr	r2, [pc, #140]	; (cb4 <_ZN7ws2812b12ws2812_writeEv+0xbc>)
     c28:	4694      	mov	ip, r2
     c2a:	4461      	add	r1, ip
     c2c:	e7f3      	b.n	c16 <_ZN7ws2812b12ws2812_writeEv+0x1e>
		 asm("nop; nop; nop; nop; nop; nop; nop; nop;");
		 if(p & bitMask) {
			 asm("nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop;");
			 *clr = pinMask;
			 } else {
			 *clr = pinMask;
     c2e:	614a      	str	r2, [r1, #20]
			 asm("nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop;");
     c30:	46c0      	nop			; (mov r8, r8)
     c32:	46c0      	nop			; (mov r8, r8)
     c34:	46c0      	nop			; (mov r8, r8)
     c36:	46c0      	nop			; (mov r8, r8)
     c38:	46c0      	nop			; (mov r8, r8)
     c3a:	46c0      	nop			; (mov r8, r8)
     c3c:	46c0      	nop			; (mov r8, r8)
     c3e:	46c0      	nop			; (mov r8, r8)
     c40:	46c0      	nop			; (mov r8, r8)
     c42:	46c0      	nop			; (mov r8, r8)
     c44:	46c0      	nop			; (mov r8, r8)
     c46:	46c0      	nop			; (mov r8, r8)
     c48:	46c0      	nop			; (mov r8, r8)
     c4a:	46c0      	nop			; (mov r8, r8)
     c4c:	46c0      	nop			; (mov r8, r8)
     c4e:	46c0      	nop			; (mov r8, r8)
     c50:	46c0      	nop			; (mov r8, r8)
     c52:	46c0      	nop			; (mov r8, r8)
     c54:	46c0      	nop			; (mov r8, r8)
     c56:	46c0      	nop			; (mov r8, r8)
     c58:	e024      	b.n	ca4 <_ZN7ws2812b12ws2812_writeEv+0xac>
		 }
		 
		 if(bitMask >>= 1) {
			 asm("nop; nop; nop; nop;");
			 } else {
			 if(ptr >= end) break;
     c5a:	42a8      	cmp	r0, r5
     c5c:	d229      	bcs.n	cb2 <_ZN7ws2812b12ws2812_writeEv+0xba>
			 p       = *ptr++;
     c5e:	7804      	ldrb	r4, [r0, #0]
     c60:	3001      	adds	r0, #1
			 bitMask = 0x80;
     c62:	2380      	movs	r3, #128	; 0x80
		 *set = pinMask;
     c64:	618a      	str	r2, [r1, #24]
		 asm("nop; nop; nop; nop; nop; nop; nop; nop;");
     c66:	46c0      	nop			; (mov r8, r8)
     c68:	46c0      	nop			; (mov r8, r8)
     c6a:	46c0      	nop			; (mov r8, r8)
     c6c:	46c0      	nop			; (mov r8, r8)
     c6e:	46c0      	nop			; (mov r8, r8)
     c70:	46c0      	nop			; (mov r8, r8)
     c72:	46c0      	nop			; (mov r8, r8)
     c74:	46c0      	nop			; (mov r8, r8)
		 if(p & bitMask) {
     c76:	4223      	tst	r3, r4
     c78:	d0d9      	beq.n	c2e <_ZN7ws2812b12ws2812_writeEv+0x36>
			 asm("nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop;");
     c7a:	46c0      	nop			; (mov r8, r8)
     c7c:	46c0      	nop			; (mov r8, r8)
     c7e:	46c0      	nop			; (mov r8, r8)
     c80:	46c0      	nop			; (mov r8, r8)
     c82:	46c0      	nop			; (mov r8, r8)
     c84:	46c0      	nop			; (mov r8, r8)
     c86:	46c0      	nop			; (mov r8, r8)
     c88:	46c0      	nop			; (mov r8, r8)
     c8a:	46c0      	nop			; (mov r8, r8)
     c8c:	46c0      	nop			; (mov r8, r8)
     c8e:	46c0      	nop			; (mov r8, r8)
     c90:	46c0      	nop			; (mov r8, r8)
     c92:	46c0      	nop			; (mov r8, r8)
     c94:	46c0      	nop			; (mov r8, r8)
     c96:	46c0      	nop			; (mov r8, r8)
     c98:	46c0      	nop			; (mov r8, r8)
     c9a:	46c0      	nop			; (mov r8, r8)
     c9c:	46c0      	nop			; (mov r8, r8)
     c9e:	46c0      	nop			; (mov r8, r8)
     ca0:	46c0      	nop			; (mov r8, r8)
			 *clr = pinMask;
     ca2:	614a      	str	r2, [r1, #20]
		 if(bitMask >>= 1) {
     ca4:	085b      	lsrs	r3, r3, #1
     ca6:	d0d8      	beq.n	c5a <_ZN7ws2812b12ws2812_writeEv+0x62>
			 asm("nop; nop; nop; nop;");
     ca8:	46c0      	nop			; (mov r8, r8)
     caa:	46c0      	nop			; (mov r8, r8)
     cac:	46c0      	nop			; (mov r8, r8)
     cae:	46c0      	nop			; (mov r8, r8)
     cb0:	e7d8      	b.n	c64 <_ZN7ws2812b12ws2812_writeEv+0x6c>
		 }
	}
	//delay_cycles(2100); //this is a horrible way to do it. will change in the future
     cb2:	bd30      	pop	{r4, r5, pc}
     cb4:	41004400 	.word	0x41004400

00000cb8 <_ZN7ws2812b5writeEv>:
void ws2812b::write(){
     cb8:	b510      	push	{r4, lr}
	ws2812_write();
     cba:	4b01      	ldr	r3, [pc, #4]	; (cc0 <_ZN7ws2812b5writeEv+0x8>)
     cbc:	4798      	blx	r3
}
     cbe:	bd10      	pop	{r4, pc}
     cc0:	00000bf9 	.word	0x00000bf9

00000cc4 <WDT_Handler>:
     cc4:	b510      	push	{r4, lr}
     cc6:	2201      	movs	r2, #1
     cc8:	4b03      	ldr	r3, [pc, #12]	; (cd8 <WDT_Handler+0x14>)
     cca:	719a      	strb	r2, [r3, #6]
     ccc:	4b03      	ldr	r3, [pc, #12]	; (cdc <WDT_Handler+0x18>)
     cce:	681b      	ldr	r3, [r3, #0]
     cd0:	2b00      	cmp	r3, #0
     cd2:	d000      	beq.n	cd6 <WDT_Handler+0x12>
     cd4:	4798      	blx	r3
     cd6:	bd10      	pop	{r4, pc}
     cd8:	40001000 	.word	0x40001000
     cdc:	200009b4 	.word	0x200009b4

00000ce0 <_tc_interrupt_handler>:
     ce0:	b570      	push	{r4, r5, r6, lr}
     ce2:	0080      	lsls	r0, r0, #2
     ce4:	4b16      	ldr	r3, [pc, #88]	; (d40 <_tc_interrupt_handler+0x60>)
     ce6:	58c4      	ldr	r4, [r0, r3]
     ce8:	6823      	ldr	r3, [r4, #0]
     cea:	7b9d      	ldrb	r5, [r3, #14]
     cec:	7e22      	ldrb	r2, [r4, #24]
     cee:	7e63      	ldrb	r3, [r4, #25]
     cf0:	4013      	ands	r3, r2
     cf2:	401d      	ands	r5, r3
     cf4:	07eb      	lsls	r3, r5, #31
     cf6:	d406      	bmi.n	d06 <_tc_interrupt_handler+0x26>
     cf8:	07ab      	lsls	r3, r5, #30
     cfa:	d40b      	bmi.n	d14 <_tc_interrupt_handler+0x34>
     cfc:	06eb      	lsls	r3, r5, #27
     cfe:	d410      	bmi.n	d22 <_tc_interrupt_handler+0x42>
     d00:	06ab      	lsls	r3, r5, #26
     d02:	d415      	bmi.n	d30 <_tc_interrupt_handler+0x50>
     d04:	bd70      	pop	{r4, r5, r6, pc}
     d06:	0020      	movs	r0, r4
     d08:	68a3      	ldr	r3, [r4, #8]
     d0a:	4798      	blx	r3
     d0c:	2301      	movs	r3, #1
     d0e:	6822      	ldr	r2, [r4, #0]
     d10:	7393      	strb	r3, [r2, #14]
     d12:	e7f1      	b.n	cf8 <_tc_interrupt_handler+0x18>
     d14:	0020      	movs	r0, r4
     d16:	68e3      	ldr	r3, [r4, #12]
     d18:	4798      	blx	r3
     d1a:	2302      	movs	r3, #2
     d1c:	6822      	ldr	r2, [r4, #0]
     d1e:	7393      	strb	r3, [r2, #14]
     d20:	e7ec      	b.n	cfc <_tc_interrupt_handler+0x1c>
     d22:	0020      	movs	r0, r4
     d24:	6923      	ldr	r3, [r4, #16]
     d26:	4798      	blx	r3
     d28:	2310      	movs	r3, #16
     d2a:	6822      	ldr	r2, [r4, #0]
     d2c:	7393      	strb	r3, [r2, #14]
     d2e:	e7e7      	b.n	d00 <_tc_interrupt_handler+0x20>
     d30:	0020      	movs	r0, r4
     d32:	6963      	ldr	r3, [r4, #20]
     d34:	4798      	blx	r3
     d36:	6823      	ldr	r3, [r4, #0]
     d38:	2220      	movs	r2, #32
     d3a:	739a      	strb	r2, [r3, #14]
     d3c:	e7e2      	b.n	d04 <_tc_interrupt_handler+0x24>
     d3e:	46c0      	nop			; (mov r8, r8)
     d40:	200009b8 	.word	0x200009b8

00000d44 <TC1_Handler>:
     d44:	b510      	push	{r4, lr}
     d46:	2000      	movs	r0, #0
     d48:	4b01      	ldr	r3, [pc, #4]	; (d50 <TC1_Handler+0xc>)
     d4a:	4798      	blx	r3
     d4c:	bd10      	pop	{r4, pc}
     d4e:	46c0      	nop			; (mov r8, r8)
     d50:	00000ce1 	.word	0x00000ce1

00000d54 <TC2_Handler>:
     d54:	b510      	push	{r4, lr}
     d56:	2001      	movs	r0, #1
     d58:	4b01      	ldr	r3, [pc, #4]	; (d60 <TC2_Handler+0xc>)
     d5a:	4798      	blx	r3
     d5c:	bd10      	pop	{r4, pc}
     d5e:	46c0      	nop			; (mov r8, r8)
     d60:	00000ce1 	.word	0x00000ce1

00000d64 <sercom_set_gclk_generator>:
     d64:	b510      	push	{r4, lr}
     d66:	b082      	sub	sp, #8
     d68:	0004      	movs	r4, r0
     d6a:	4b0e      	ldr	r3, [pc, #56]	; (da4 <sercom_set_gclk_generator+0x40>)
     d6c:	781b      	ldrb	r3, [r3, #0]
     d6e:	2b00      	cmp	r3, #0
     d70:	d007      	beq.n	d82 <sercom_set_gclk_generator+0x1e>
     d72:	2900      	cmp	r1, #0
     d74:	d105      	bne.n	d82 <sercom_set_gclk_generator+0x1e>
     d76:	4b0b      	ldr	r3, [pc, #44]	; (da4 <sercom_set_gclk_generator+0x40>)
     d78:	785b      	ldrb	r3, [r3, #1]
     d7a:	4283      	cmp	r3, r0
     d7c:	d010      	beq.n	da0 <sercom_set_gclk_generator+0x3c>
     d7e:	201d      	movs	r0, #29
     d80:	e00c      	b.n	d9c <sercom_set_gclk_generator+0x38>
     d82:	a901      	add	r1, sp, #4
     d84:	700c      	strb	r4, [r1, #0]
     d86:	200d      	movs	r0, #13
     d88:	4b07      	ldr	r3, [pc, #28]	; (da8 <sercom_set_gclk_generator+0x44>)
     d8a:	4798      	blx	r3
     d8c:	200d      	movs	r0, #13
     d8e:	4b07      	ldr	r3, [pc, #28]	; (dac <sercom_set_gclk_generator+0x48>)
     d90:	4798      	blx	r3
     d92:	4b04      	ldr	r3, [pc, #16]	; (da4 <sercom_set_gclk_generator+0x40>)
     d94:	705c      	strb	r4, [r3, #1]
     d96:	2201      	movs	r2, #1
     d98:	701a      	strb	r2, [r3, #0]
     d9a:	2000      	movs	r0, #0
     d9c:	b002      	add	sp, #8
     d9e:	bd10      	pop	{r4, pc}
     da0:	2000      	movs	r0, #0
     da2:	e7fb      	b.n	d9c <sercom_set_gclk_generator+0x38>
     da4:	20000910 	.word	0x20000910
     da8:	00001621 	.word	0x00001621
     dac:	00001595 	.word	0x00001595

00000db0 <_sercom_get_default_pad>:
     db0:	4b15      	ldr	r3, [pc, #84]	; (e08 <_sercom_get_default_pad+0x58>)
     db2:	4298      	cmp	r0, r3
     db4:	d004      	beq.n	dc0 <_sercom_get_default_pad+0x10>
     db6:	4b15      	ldr	r3, [pc, #84]	; (e0c <_sercom_get_default_pad+0x5c>)
     db8:	4298      	cmp	r0, r3
     dba:	d011      	beq.n	de0 <_sercom_get_default_pad+0x30>
     dbc:	2000      	movs	r0, #0
     dbe:	4770      	bx	lr
     dc0:	2901      	cmp	r1, #1
     dc2:	d007      	beq.n	dd4 <_sercom_get_default_pad+0x24>
     dc4:	2900      	cmp	r1, #0
     dc6:	d01b      	beq.n	e00 <_sercom_get_default_pad+0x50>
     dc8:	2902      	cmp	r1, #2
     dca:	d005      	beq.n	dd8 <_sercom_get_default_pad+0x28>
     dcc:	2903      	cmp	r1, #3
     dce:	d005      	beq.n	ddc <_sercom_get_default_pad+0x2c>
     dd0:	2000      	movs	r0, #0
     dd2:	e7f4      	b.n	dbe <_sercom_get_default_pad+0xe>
     dd4:	480e      	ldr	r0, [pc, #56]	; (e10 <_sercom_get_default_pad+0x60>)
     dd6:	e7f2      	b.n	dbe <_sercom_get_default_pad+0xe>
     dd8:	480e      	ldr	r0, [pc, #56]	; (e14 <_sercom_get_default_pad+0x64>)
     dda:	e7f0      	b.n	dbe <_sercom_get_default_pad+0xe>
     ddc:	480e      	ldr	r0, [pc, #56]	; (e18 <_sercom_get_default_pad+0x68>)
     dde:	e7ee      	b.n	dbe <_sercom_get_default_pad+0xe>
     de0:	2901      	cmp	r1, #1
     de2:	d007      	beq.n	df4 <_sercom_get_default_pad+0x44>
     de4:	2900      	cmp	r1, #0
     de6:	d00d      	beq.n	e04 <_sercom_get_default_pad+0x54>
     de8:	2902      	cmp	r1, #2
     dea:	d005      	beq.n	df8 <_sercom_get_default_pad+0x48>
     dec:	2903      	cmp	r1, #3
     dee:	d005      	beq.n	dfc <_sercom_get_default_pad+0x4c>
     df0:	2000      	movs	r0, #0
     df2:	e7e4      	b.n	dbe <_sercom_get_default_pad+0xe>
     df4:	4809      	ldr	r0, [pc, #36]	; (e1c <_sercom_get_default_pad+0x6c>)
     df6:	e7e2      	b.n	dbe <_sercom_get_default_pad+0xe>
     df8:	4809      	ldr	r0, [pc, #36]	; (e20 <_sercom_get_default_pad+0x70>)
     dfa:	e7e0      	b.n	dbe <_sercom_get_default_pad+0xe>
     dfc:	4809      	ldr	r0, [pc, #36]	; (e24 <_sercom_get_default_pad+0x74>)
     dfe:	e7de      	b.n	dbe <_sercom_get_default_pad+0xe>
     e00:	4809      	ldr	r0, [pc, #36]	; (e28 <_sercom_get_default_pad+0x78>)
     e02:	e7dc      	b.n	dbe <_sercom_get_default_pad+0xe>
     e04:	4809      	ldr	r0, [pc, #36]	; (e2c <_sercom_get_default_pad+0x7c>)
     e06:	e7da      	b.n	dbe <_sercom_get_default_pad+0xe>
     e08:	42000800 	.word	0x42000800
     e0c:	42000c00 	.word	0x42000c00
     e10:	00050003 	.word	0x00050003
     e14:	00080003 	.word	0x00080003
     e18:	00090003 	.word	0x00090003
     e1c:	001f0002 	.word	0x001f0002
     e20:	00180002 	.word	0x00180002
     e24:	00190002 	.word	0x00190002
     e28:	00040003 	.word	0x00040003
     e2c:	001e0002 	.word	0x001e0002

00000e30 <_sercom_get_sercom_inst_index>:
     e30:	4b06      	ldr	r3, [pc, #24]	; (e4c <_sercom_get_sercom_inst_index+0x1c>)
     e32:	4298      	cmp	r0, r3
     e34:	d008      	beq.n	e48 <_sercom_get_sercom_inst_index+0x18>
     e36:	4a06      	ldr	r2, [pc, #24]	; (e50 <_sercom_get_sercom_inst_index+0x20>)
     e38:	2300      	movs	r3, #0
     e3a:	4290      	cmp	r0, r2
     e3c:	d001      	beq.n	e42 <_sercom_get_sercom_inst_index+0x12>
     e3e:	0018      	movs	r0, r3
     e40:	4770      	bx	lr
     e42:	3301      	adds	r3, #1
     e44:	b2db      	uxtb	r3, r3
     e46:	e7fa      	b.n	e3e <_sercom_get_sercom_inst_index+0xe>
     e48:	2300      	movs	r3, #0
     e4a:	e7fb      	b.n	e44 <_sercom_get_sercom_inst_index+0x14>
     e4c:	42000800 	.word	0x42000800
     e50:	42000c00 	.word	0x42000c00

00000e54 <_sercom_default_handler>:
     e54:	4770      	bx	lr
	...

00000e58 <_sercom_set_handler>:
     e58:	b530      	push	{r4, r5, lr}
     e5a:	4b09      	ldr	r3, [pc, #36]	; (e80 <_sercom_set_handler+0x28>)
     e5c:	781b      	ldrb	r3, [r3, #0]
     e5e:	2b00      	cmp	r3, #0
     e60:	d10a      	bne.n	e78 <_sercom_set_handler+0x20>
     e62:	4c08      	ldr	r4, [pc, #32]	; (e84 <_sercom_set_handler+0x2c>)
     e64:	4d08      	ldr	r5, [pc, #32]	; (e88 <_sercom_set_handler+0x30>)
     e66:	6025      	str	r5, [r4, #0]
     e68:	4b08      	ldr	r3, [pc, #32]	; (e8c <_sercom_set_handler+0x34>)
     e6a:	2200      	movs	r2, #0
     e6c:	601a      	str	r2, [r3, #0]
     e6e:	6065      	str	r5, [r4, #4]
     e70:	605a      	str	r2, [r3, #4]
     e72:	3201      	adds	r2, #1
     e74:	4b02      	ldr	r3, [pc, #8]	; (e80 <_sercom_set_handler+0x28>)
     e76:	701a      	strb	r2, [r3, #0]
     e78:	0080      	lsls	r0, r0, #2
     e7a:	4b02      	ldr	r3, [pc, #8]	; (e84 <_sercom_set_handler+0x2c>)
     e7c:	50c1      	str	r1, [r0, r3]
     e7e:	bd30      	pop	{r4, r5, pc}
     e80:	20000912 	.word	0x20000912
     e84:	20000914 	.word	0x20000914
     e88:	00000e55 	.word	0x00000e55
     e8c:	200009c0 	.word	0x200009c0

00000e90 <_sercom_get_interrupt_vector>:
     e90:	b510      	push	{r4, lr}
     e92:	b082      	sub	sp, #8
     e94:	ac01      	add	r4, sp, #4
     e96:	2309      	movs	r3, #9
     e98:	7023      	strb	r3, [r4, #0]
     e9a:	3301      	adds	r3, #1
     e9c:	7063      	strb	r3, [r4, #1]
     e9e:	4b02      	ldr	r3, [pc, #8]	; (ea8 <_sercom_get_interrupt_vector+0x18>)
     ea0:	4798      	blx	r3
     ea2:	5620      	ldrsb	r0, [r4, r0]
     ea4:	b002      	add	sp, #8
     ea6:	bd10      	pop	{r4, pc}
     ea8:	00000e31 	.word	0x00000e31

00000eac <SERCOM0_Handler>:
     eac:	b510      	push	{r4, lr}
     eae:	4b02      	ldr	r3, [pc, #8]	; (eb8 <SERCOM0_Handler+0xc>)
     eb0:	681b      	ldr	r3, [r3, #0]
     eb2:	2000      	movs	r0, #0
     eb4:	4798      	blx	r3
     eb6:	bd10      	pop	{r4, pc}
     eb8:	20000914 	.word	0x20000914

00000ebc <SERCOM1_Handler>:
     ebc:	b510      	push	{r4, lr}
     ebe:	4b02      	ldr	r3, [pc, #8]	; (ec8 <SERCOM1_Handler+0xc>)
     ec0:	685b      	ldr	r3, [r3, #4]
     ec2:	2001      	movs	r0, #1
     ec4:	4798      	blx	r3
     ec6:	bd10      	pop	{r4, pc}
     ec8:	20000914 	.word	0x20000914

00000ecc <EIC_Handler>:
     ecc:	b570      	push	{r4, r5, r6, lr}
     ece:	2200      	movs	r2, #0
     ed0:	4b10      	ldr	r3, [pc, #64]	; (f14 <EIC_Handler+0x48>)
     ed2:	701a      	strb	r2, [r3, #0]
     ed4:	2300      	movs	r3, #0
     ed6:	4910      	ldr	r1, [pc, #64]	; (f18 <EIC_Handler+0x4c>)
     ed8:	251f      	movs	r5, #31
     eda:	4e10      	ldr	r6, [pc, #64]	; (f1c <EIC_Handler+0x50>)
     edc:	4c0d      	ldr	r4, [pc, #52]	; (f14 <EIC_Handler+0x48>)
     ede:	e00a      	b.n	ef6 <EIC_Handler+0x2a>
     ee0:	490d      	ldr	r1, [pc, #52]	; (f18 <EIC_Handler+0x4c>)
     ee2:	e008      	b.n	ef6 <EIC_Handler+0x2a>
     ee4:	7823      	ldrb	r3, [r4, #0]
     ee6:	3301      	adds	r3, #1
     ee8:	b2db      	uxtb	r3, r3
     eea:	7023      	strb	r3, [r4, #0]
     eec:	2b0f      	cmp	r3, #15
     eee:	d810      	bhi.n	f12 <EIC_Handler+0x46>
     ef0:	2100      	movs	r1, #0
     ef2:	2b1f      	cmp	r3, #31
     ef4:	d9f4      	bls.n	ee0 <EIC_Handler+0x14>
     ef6:	0028      	movs	r0, r5
     ef8:	4018      	ands	r0, r3
     efa:	2201      	movs	r2, #1
     efc:	4082      	lsls	r2, r0
     efe:	6908      	ldr	r0, [r1, #16]
     f00:	4210      	tst	r0, r2
     f02:	d0ef      	beq.n	ee4 <EIC_Handler+0x18>
     f04:	610a      	str	r2, [r1, #16]
     f06:	009b      	lsls	r3, r3, #2
     f08:	599b      	ldr	r3, [r3, r6]
     f0a:	2b00      	cmp	r3, #0
     f0c:	d0ea      	beq.n	ee4 <EIC_Handler+0x18>
     f0e:	4798      	blx	r3
     f10:	e7e8      	b.n	ee4 <EIC_Handler+0x18>
     f12:	bd70      	pop	{r4, r5, r6, pc}
     f14:	200009c8 	.word	0x200009c8
     f18:	40001800 	.word	0x40001800
     f1c:	20000974 	.word	0x20000974

00000f20 <delay_init>:
     f20:	b570      	push	{r4, r5, r6, lr}
     f22:	2000      	movs	r0, #0
     f24:	4b08      	ldr	r3, [pc, #32]	; (f48 <delay_init+0x28>)
     f26:	4798      	blx	r3
     f28:	0005      	movs	r5, r0
     f2a:	4c08      	ldr	r4, [pc, #32]	; (f4c <delay_init+0x2c>)
     f2c:	21fa      	movs	r1, #250	; 0xfa
     f2e:	0089      	lsls	r1, r1, #2
     f30:	47a0      	blx	r4
     f32:	4b07      	ldr	r3, [pc, #28]	; (f50 <delay_init+0x30>)
     f34:	6018      	str	r0, [r3, #0]
     f36:	4907      	ldr	r1, [pc, #28]	; (f54 <delay_init+0x34>)
     f38:	0028      	movs	r0, r5
     f3a:	47a0      	blx	r4
     f3c:	4b06      	ldr	r3, [pc, #24]	; (f58 <delay_init+0x38>)
     f3e:	6018      	str	r0, [r3, #0]
     f40:	2205      	movs	r2, #5
     f42:	4b06      	ldr	r3, [pc, #24]	; (f5c <delay_init+0x3c>)
     f44:	601a      	str	r2, [r3, #0]
     f46:	bd70      	pop	{r4, r5, r6, pc}
     f48:	00001509 	.word	0x00001509
     f4c:	00001861 	.word	0x00001861
     f50:	20000004 	.word	0x20000004
     f54:	000f4240 	.word	0x000f4240
     f58:	20000008 	.word	0x20000008
     f5c:	e000e010 	.word	0xe000e010

00000f60 <delay_cycles_ms>:
     f60:	b530      	push	{r4, r5, lr}
     f62:	4b08      	ldr	r3, [pc, #32]	; (f84 <delay_cycles_ms+0x24>)
     f64:	681c      	ldr	r4, [r3, #0]
     f66:	4a08      	ldr	r2, [pc, #32]	; (f88 <delay_cycles_ms+0x28>)
     f68:	2500      	movs	r5, #0
     f6a:	2180      	movs	r1, #128	; 0x80
     f6c:	0249      	lsls	r1, r1, #9
     f6e:	3801      	subs	r0, #1
     f70:	d307      	bcc.n	f82 <delay_cycles_ms+0x22>
     f72:	2c00      	cmp	r4, #0
     f74:	d0fb      	beq.n	f6e <delay_cycles_ms+0xe>
     f76:	6054      	str	r4, [r2, #4]
     f78:	6095      	str	r5, [r2, #8]
     f7a:	6813      	ldr	r3, [r2, #0]
     f7c:	420b      	tst	r3, r1
     f7e:	d0fc      	beq.n	f7a <delay_cycles_ms+0x1a>
     f80:	e7f5      	b.n	f6e <delay_cycles_ms+0xe>
     f82:	bd30      	pop	{r4, r5, pc}
     f84:	20000004 	.word	0x20000004
     f88:	e000e010 	.word	0xe000e010

00000f8c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     f8c:	b500      	push	{lr}
     f8e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     f90:	ab01      	add	r3, sp, #4
     f92:	2280      	movs	r2, #128	; 0x80
     f94:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     f96:	780a      	ldrb	r2, [r1, #0]
     f98:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     f9a:	784a      	ldrb	r2, [r1, #1]
     f9c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     f9e:	788a      	ldrb	r2, [r1, #2]
     fa0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     fa2:	0019      	movs	r1, r3
     fa4:	4b01      	ldr	r3, [pc, #4]	; (fac <port_pin_set_config+0x20>)
     fa6:	4798      	blx	r3
}
     fa8:	b003      	add	sp, #12
     faa:	bd00      	pop	{pc}
     fac:	00001719 	.word	0x00001719

00000fb0 <cpu_irq_enter_critical>:
     fb0:	4b0c      	ldr	r3, [pc, #48]	; (fe4 <cpu_irq_enter_critical+0x34>)
     fb2:	681b      	ldr	r3, [r3, #0]
     fb4:	2b00      	cmp	r3, #0
     fb6:	d106      	bne.n	fc6 <cpu_irq_enter_critical+0x16>
     fb8:	f3ef 8310 	mrs	r3, PRIMASK
     fbc:	2b00      	cmp	r3, #0
     fbe:	d007      	beq.n	fd0 <cpu_irq_enter_critical+0x20>
     fc0:	2200      	movs	r2, #0
     fc2:	4b09      	ldr	r3, [pc, #36]	; (fe8 <cpu_irq_enter_critical+0x38>)
     fc4:	701a      	strb	r2, [r3, #0]
     fc6:	4a07      	ldr	r2, [pc, #28]	; (fe4 <cpu_irq_enter_critical+0x34>)
     fc8:	6813      	ldr	r3, [r2, #0]
     fca:	3301      	adds	r3, #1
     fcc:	6013      	str	r3, [r2, #0]
     fce:	4770      	bx	lr
     fd0:	b672      	cpsid	i
     fd2:	f3bf 8f5f 	dmb	sy
     fd6:	2200      	movs	r2, #0
     fd8:	4b04      	ldr	r3, [pc, #16]	; (fec <cpu_irq_enter_critical+0x3c>)
     fda:	701a      	strb	r2, [r3, #0]
     fdc:	3201      	adds	r2, #1
     fde:	4b02      	ldr	r3, [pc, #8]	; (fe8 <cpu_irq_enter_critical+0x38>)
     fe0:	701a      	strb	r2, [r3, #0]
     fe2:	e7f0      	b.n	fc6 <cpu_irq_enter_critical+0x16>
     fe4:	2000091c 	.word	0x2000091c
     fe8:	20000920 	.word	0x20000920
     fec:	2000000c 	.word	0x2000000c

00000ff0 <cpu_irq_leave_critical>:
     ff0:	4b08      	ldr	r3, [pc, #32]	; (1014 <cpu_irq_leave_critical+0x24>)
     ff2:	681a      	ldr	r2, [r3, #0]
     ff4:	3a01      	subs	r2, #1
     ff6:	601a      	str	r2, [r3, #0]
     ff8:	681b      	ldr	r3, [r3, #0]
     ffa:	2b00      	cmp	r3, #0
     ffc:	d109      	bne.n	1012 <cpu_irq_leave_critical+0x22>
     ffe:	4b06      	ldr	r3, [pc, #24]	; (1018 <cpu_irq_leave_critical+0x28>)
    1000:	781b      	ldrb	r3, [r3, #0]
    1002:	2b00      	cmp	r3, #0
    1004:	d005      	beq.n	1012 <cpu_irq_leave_critical+0x22>
    1006:	2201      	movs	r2, #1
    1008:	4b04      	ldr	r3, [pc, #16]	; (101c <cpu_irq_leave_critical+0x2c>)
    100a:	701a      	strb	r2, [r3, #0]
    100c:	f3bf 8f5f 	dmb	sy
    1010:	b662      	cpsie	i
    1012:	4770      	bx	lr
    1014:	2000091c 	.word	0x2000091c
    1018:	20000920 	.word	0x20000920
    101c:	2000000c 	.word	0x2000000c

00001020 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1020:	b510      	push	{r4, lr}
	switch (clock_source) {
    1022:	2808      	cmp	r0, #8
    1024:	d803      	bhi.n	102e <system_clock_source_get_hz+0xe>
    1026:	0080      	lsls	r0, r0, #2
    1028:	4b1c      	ldr	r3, [pc, #112]	; (109c <system_clock_source_get_hz+0x7c>)
    102a:	581b      	ldr	r3, [r3, r0]
    102c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    102e:	2000      	movs	r0, #0
    1030:	e032      	b.n	1098 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    1032:	4b1b      	ldr	r3, [pc, #108]	; (10a0 <system_clock_source_get_hz+0x80>)
    1034:	6918      	ldr	r0, [r3, #16]
    1036:	e02f      	b.n	1098 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1038:	4b1a      	ldr	r3, [pc, #104]	; (10a4 <system_clock_source_get_hz+0x84>)
    103a:	6a1b      	ldr	r3, [r3, #32]
    103c:	059b      	lsls	r3, r3, #22
    103e:	0f9b      	lsrs	r3, r3, #30
    1040:	4819      	ldr	r0, [pc, #100]	; (10a8 <system_clock_source_get_hz+0x88>)
    1042:	40d8      	lsrs	r0, r3
    1044:	e028      	b.n	1098 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    1046:	4b16      	ldr	r3, [pc, #88]	; (10a0 <system_clock_source_get_hz+0x80>)
    1048:	6958      	ldr	r0, [r3, #20]
    104a:	e025      	b.n	1098 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    104c:	4b14      	ldr	r3, [pc, #80]	; (10a0 <system_clock_source_get_hz+0x80>)
    104e:	681b      	ldr	r3, [r3, #0]
			return 0;
    1050:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1052:	079b      	lsls	r3, r3, #30
    1054:	d520      	bpl.n	1098 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1056:	4913      	ldr	r1, [pc, #76]	; (10a4 <system_clock_source_get_hz+0x84>)
    1058:	2210      	movs	r2, #16
    105a:	68cb      	ldr	r3, [r1, #12]
    105c:	421a      	tst	r2, r3
    105e:	d0fc      	beq.n	105a <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    1060:	4b0f      	ldr	r3, [pc, #60]	; (10a0 <system_clock_source_get_hz+0x80>)
    1062:	681a      	ldr	r2, [r3, #0]
    1064:	2324      	movs	r3, #36	; 0x24
    1066:	4013      	ands	r3, r2
    1068:	2b04      	cmp	r3, #4
    106a:	d001      	beq.n	1070 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    106c:	480f      	ldr	r0, [pc, #60]	; (10ac <system_clock_source_get_hz+0x8c>)
    106e:	e013      	b.n	1098 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1070:	2000      	movs	r0, #0
    1072:	4b0f      	ldr	r3, [pc, #60]	; (10b0 <system_clock_source_get_hz+0x90>)
    1074:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1076:	4b0a      	ldr	r3, [pc, #40]	; (10a0 <system_clock_source_get_hz+0x80>)
    1078:	689b      	ldr	r3, [r3, #8]
    107a:	041b      	lsls	r3, r3, #16
    107c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    107e:	4358      	muls	r0, r3
    1080:	e00a      	b.n	1098 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1082:	2350      	movs	r3, #80	; 0x50
    1084:	4a07      	ldr	r2, [pc, #28]	; (10a4 <system_clock_source_get_hz+0x84>)
    1086:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1088:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    108a:	075b      	lsls	r3, r3, #29
    108c:	d504      	bpl.n	1098 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    108e:	4b04      	ldr	r3, [pc, #16]	; (10a0 <system_clock_source_get_hz+0x80>)
    1090:	68d8      	ldr	r0, [r3, #12]
    1092:	e001      	b.n	1098 <system_clock_source_get_hz+0x78>
		return 32768UL;
    1094:	2080      	movs	r0, #128	; 0x80
    1096:	0200      	lsls	r0, r0, #8
	}
}
    1098:	bd10      	pop	{r4, pc}
    109a:	46c0      	nop			; (mov r8, r8)
    109c:	000025ac 	.word	0x000025ac
    10a0:	20000924 	.word	0x20000924
    10a4:	40000800 	.word	0x40000800
    10a8:	007a1200 	.word	0x007a1200
    10ac:	02dc6c00 	.word	0x02dc6c00
    10b0:	0000163d 	.word	0x0000163d

000010b4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    10b4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    10b6:	490c      	ldr	r1, [pc, #48]	; (10e8 <system_clock_source_osc8m_set_config+0x34>)
    10b8:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    10ba:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    10bc:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    10be:	7840      	ldrb	r0, [r0, #1]
    10c0:	2201      	movs	r2, #1
    10c2:	4010      	ands	r0, r2
    10c4:	0180      	lsls	r0, r0, #6
    10c6:	2640      	movs	r6, #64	; 0x40
    10c8:	43b3      	bics	r3, r6
    10ca:	4303      	orrs	r3, r0
    10cc:	402a      	ands	r2, r5
    10ce:	01d2      	lsls	r2, r2, #7
    10d0:	2080      	movs	r0, #128	; 0x80
    10d2:	4383      	bics	r3, r0
    10d4:	4313      	orrs	r3, r2
    10d6:	2203      	movs	r2, #3
    10d8:	4022      	ands	r2, r4
    10da:	0212      	lsls	r2, r2, #8
    10dc:	4803      	ldr	r0, [pc, #12]	; (10ec <system_clock_source_osc8m_set_config+0x38>)
    10de:	4003      	ands	r3, r0
    10e0:	4313      	orrs	r3, r2
    10e2:	620b      	str	r3, [r1, #32]
}
    10e4:	bd70      	pop	{r4, r5, r6, pc}
    10e6:	46c0      	nop			; (mov r8, r8)
    10e8:	40000800 	.word	0x40000800
    10ec:	fffffcff 	.word	0xfffffcff

000010f0 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    10f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    10f2:	46ce      	mov	lr, r9
    10f4:	4647      	mov	r7, r8
    10f6:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    10f8:	4b19      	ldr	r3, [pc, #100]	; (1160 <system_clock_source_osc32k_set_config+0x70>)
    10fa:	4699      	mov	r9, r3
    10fc:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    10fe:	7841      	ldrb	r1, [r0, #1]
    1100:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    1102:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1104:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1106:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    1108:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    110a:	7880      	ldrb	r0, [r0, #2]
    110c:	2101      	movs	r1, #1
    110e:	4008      	ands	r0, r1
    1110:	0080      	lsls	r0, r0, #2
    1112:	2204      	movs	r2, #4
    1114:	4393      	bics	r3, r2
    1116:	4303      	orrs	r3, r0
    1118:	4660      	mov	r0, ip
    111a:	4008      	ands	r0, r1
    111c:	00c0      	lsls	r0, r0, #3
    111e:	3204      	adds	r2, #4
    1120:	4393      	bics	r3, r2
    1122:	4303      	orrs	r3, r0
    1124:	0038      	movs	r0, r7
    1126:	4008      	ands	r0, r1
    1128:	0180      	lsls	r0, r0, #6
    112a:	2740      	movs	r7, #64	; 0x40
    112c:	43bb      	bics	r3, r7
    112e:	4303      	orrs	r3, r0
    1130:	0030      	movs	r0, r6
    1132:	4008      	ands	r0, r1
    1134:	01c0      	lsls	r0, r0, #7
    1136:	2680      	movs	r6, #128	; 0x80
    1138:	43b3      	bics	r3, r6
    113a:	4303      	orrs	r3, r0
    113c:	2007      	movs	r0, #7
    113e:	4005      	ands	r5, r0
    1140:	022d      	lsls	r5, r5, #8
    1142:	4808      	ldr	r0, [pc, #32]	; (1164 <system_clock_source_osc32k_set_config+0x74>)
    1144:	4003      	ands	r3, r0
    1146:	432b      	orrs	r3, r5
    1148:	4021      	ands	r1, r4
    114a:	0309      	lsls	r1, r1, #12
    114c:	4806      	ldr	r0, [pc, #24]	; (1168 <system_clock_source_osc32k_set_config+0x78>)
    114e:	4003      	ands	r3, r0
    1150:	430b      	orrs	r3, r1
    1152:	464a      	mov	r2, r9
    1154:	6193      	str	r3, [r2, #24]
}
    1156:	bc0c      	pop	{r2, r3}
    1158:	4690      	mov	r8, r2
    115a:	4699      	mov	r9, r3
    115c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    115e:	46c0      	nop			; (mov r8, r8)
    1160:	40000800 	.word	0x40000800
    1164:	fffff8ff 	.word	0xfffff8ff
    1168:	ffffefff 	.word	0xffffefff

0000116c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    116c:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    116e:	7a03      	ldrb	r3, [r0, #8]
    1170:	069b      	lsls	r3, r3, #26
    1172:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    1174:	8942      	ldrh	r2, [r0, #10]
    1176:	0592      	lsls	r2, r2, #22
    1178:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    117a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    117c:	4918      	ldr	r1, [pc, #96]	; (11e0 <system_clock_source_dfll_set_config+0x74>)
    117e:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1180:	7983      	ldrb	r3, [r0, #6]
    1182:	79c2      	ldrb	r2, [r0, #7]
    1184:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    1186:	8842      	ldrh	r2, [r0, #2]
    1188:	8884      	ldrh	r4, [r0, #4]
    118a:	4322      	orrs	r2, r4
    118c:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    118e:	7842      	ldrb	r2, [r0, #1]
    1190:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    1192:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    1194:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1196:	7803      	ldrb	r3, [r0, #0]
    1198:	2b04      	cmp	r3, #4
    119a:	d011      	beq.n	11c0 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    119c:	2b20      	cmp	r3, #32
    119e:	d10e      	bne.n	11be <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    11a0:	7b03      	ldrb	r3, [r0, #12]
    11a2:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    11a4:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    11a6:	4313      	orrs	r3, r2
    11a8:	89c2      	ldrh	r2, [r0, #14]
    11aa:	0412      	lsls	r2, r2, #16
    11ac:	490d      	ldr	r1, [pc, #52]	; (11e4 <system_clock_source_dfll_set_config+0x78>)
    11ae:	400a      	ands	r2, r1
    11b0:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    11b2:	4a0b      	ldr	r2, [pc, #44]	; (11e0 <system_clock_source_dfll_set_config+0x74>)
    11b4:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    11b6:	6811      	ldr	r1, [r2, #0]
    11b8:	4b0b      	ldr	r3, [pc, #44]	; (11e8 <system_clock_source_dfll_set_config+0x7c>)
    11ba:	430b      	orrs	r3, r1
    11bc:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    11be:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    11c0:	7b03      	ldrb	r3, [r0, #12]
    11c2:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    11c4:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    11c6:	4313      	orrs	r3, r2
    11c8:	89c2      	ldrh	r2, [r0, #14]
    11ca:	0412      	lsls	r2, r2, #16
    11cc:	4905      	ldr	r1, [pc, #20]	; (11e4 <system_clock_source_dfll_set_config+0x78>)
    11ce:	400a      	ands	r2, r1
    11d0:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    11d2:	4a03      	ldr	r2, [pc, #12]	; (11e0 <system_clock_source_dfll_set_config+0x74>)
    11d4:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    11d6:	6813      	ldr	r3, [r2, #0]
    11d8:	2104      	movs	r1, #4
    11da:	430b      	orrs	r3, r1
    11dc:	6013      	str	r3, [r2, #0]
    11de:	e7ee      	b.n	11be <system_clock_source_dfll_set_config+0x52>
    11e0:	20000924 	.word	0x20000924
    11e4:	03ff0000 	.word	0x03ff0000
    11e8:	00000424 	.word	0x00000424

000011ec <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    11ec:	2808      	cmp	r0, #8
    11ee:	d803      	bhi.n	11f8 <system_clock_source_enable+0xc>
    11f0:	0080      	lsls	r0, r0, #2
    11f2:	4b25      	ldr	r3, [pc, #148]	; (1288 <system_clock_source_enable+0x9c>)
    11f4:	581b      	ldr	r3, [r3, r0]
    11f6:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    11f8:	2017      	movs	r0, #23
    11fa:	e044      	b.n	1286 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    11fc:	4a23      	ldr	r2, [pc, #140]	; (128c <system_clock_source_enable+0xa0>)
    11fe:	6a13      	ldr	r3, [r2, #32]
    1200:	2102      	movs	r1, #2
    1202:	430b      	orrs	r3, r1
    1204:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1206:	2000      	movs	r0, #0
    1208:	e03d      	b.n	1286 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    120a:	4a20      	ldr	r2, [pc, #128]	; (128c <system_clock_source_enable+0xa0>)
    120c:	6993      	ldr	r3, [r2, #24]
    120e:	2102      	movs	r1, #2
    1210:	430b      	orrs	r3, r1
    1212:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1214:	2000      	movs	r0, #0
		break;
    1216:	e036      	b.n	1286 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1218:	4a1c      	ldr	r2, [pc, #112]	; (128c <system_clock_source_enable+0xa0>)
    121a:	8a13      	ldrh	r3, [r2, #16]
    121c:	2102      	movs	r1, #2
    121e:	430b      	orrs	r3, r1
    1220:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1222:	2000      	movs	r0, #0
		break;
    1224:	e02f      	b.n	1286 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1226:	4a19      	ldr	r2, [pc, #100]	; (128c <system_clock_source_enable+0xa0>)
    1228:	8a93      	ldrh	r3, [r2, #20]
    122a:	2102      	movs	r1, #2
    122c:	430b      	orrs	r3, r1
    122e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1230:	2000      	movs	r0, #0
		break;
    1232:	e028      	b.n	1286 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1234:	4916      	ldr	r1, [pc, #88]	; (1290 <system_clock_source_enable+0xa4>)
    1236:	680b      	ldr	r3, [r1, #0]
    1238:	2202      	movs	r2, #2
    123a:	4313      	orrs	r3, r2
    123c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    123e:	4b13      	ldr	r3, [pc, #76]	; (128c <system_clock_source_enable+0xa0>)
    1240:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1242:	0019      	movs	r1, r3
    1244:	320e      	adds	r2, #14
    1246:	68cb      	ldr	r3, [r1, #12]
    1248:	421a      	tst	r2, r3
    124a:	d0fc      	beq.n	1246 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    124c:	4a10      	ldr	r2, [pc, #64]	; (1290 <system_clock_source_enable+0xa4>)
    124e:	6891      	ldr	r1, [r2, #8]
    1250:	4b0e      	ldr	r3, [pc, #56]	; (128c <system_clock_source_enable+0xa0>)
    1252:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1254:	6852      	ldr	r2, [r2, #4]
    1256:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1258:	2200      	movs	r2, #0
    125a:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    125c:	0019      	movs	r1, r3
    125e:	3210      	adds	r2, #16
    1260:	68cb      	ldr	r3, [r1, #12]
    1262:	421a      	tst	r2, r3
    1264:	d0fc      	beq.n	1260 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1266:	4b0a      	ldr	r3, [pc, #40]	; (1290 <system_clock_source_enable+0xa4>)
    1268:	681b      	ldr	r3, [r3, #0]
    126a:	b29b      	uxth	r3, r3
    126c:	4a07      	ldr	r2, [pc, #28]	; (128c <system_clock_source_enable+0xa0>)
    126e:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1270:	2000      	movs	r0, #0
    1272:	e008      	b.n	1286 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1274:	4905      	ldr	r1, [pc, #20]	; (128c <system_clock_source_enable+0xa0>)
    1276:	2244      	movs	r2, #68	; 0x44
    1278:	5c8b      	ldrb	r3, [r1, r2]
    127a:	2002      	movs	r0, #2
    127c:	4303      	orrs	r3, r0
    127e:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1280:	2000      	movs	r0, #0
		break;
    1282:	e000      	b.n	1286 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1284:	2000      	movs	r0, #0
}
    1286:	4770      	bx	lr
    1288:	000025d0 	.word	0x000025d0
    128c:	40000800 	.word	0x40000800
    1290:	20000924 	.word	0x20000924

00001294 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1294:	b5f0      	push	{r4, r5, r6, r7, lr}
    1296:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1298:	22c2      	movs	r2, #194	; 0xc2
    129a:	00d2      	lsls	r2, r2, #3
    129c:	4b44      	ldr	r3, [pc, #272]	; (13b0 <system_clock_init+0x11c>)
    129e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    12a0:	4944      	ldr	r1, [pc, #272]	; (13b4 <system_clock_init+0x120>)
    12a2:	684b      	ldr	r3, [r1, #4]
    12a4:	221e      	movs	r2, #30
    12a6:	4393      	bics	r3, r2
    12a8:	3a1c      	subs	r2, #28
    12aa:	4313      	orrs	r3, r2
    12ac:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    12ae:	ab01      	add	r3, sp, #4
    12b0:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    12b2:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    12b4:	4d40      	ldr	r5, [pc, #256]	; (13b8 <system_clock_init+0x124>)
    12b6:	b2e0      	uxtb	r0, r4
    12b8:	a901      	add	r1, sp, #4
    12ba:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    12bc:	3401      	adds	r4, #1
    12be:	2c18      	cmp	r4, #24
    12c0:	d1f9      	bne.n	12b6 <system_clock_init+0x22>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			(*(uint32_t *)FUSES_OSC32K_ADDR >> FUSES_OSC32K_Pos);
    12c2:	4d3e      	ldr	r5, [pc, #248]	; (13bc <system_clock_init+0x128>)
    12c4:	682b      	ldr	r3, [r5, #0]
    12c6:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
    12c8:	4939      	ldr	r1, [pc, #228]	; (13b0 <system_clock_init+0x11c>)
    12ca:	698a      	ldr	r2, [r1, #24]
    12cc:	0e5b      	lsrs	r3, r3, #25
    12ce:	041b      	lsls	r3, r3, #16
    12d0:	483b      	ldr	r0, [pc, #236]	; (13c0 <system_clock_init+0x12c>)
    12d2:	4002      	ands	r2, r0
    12d4:	4313      	orrs	r3, r2
    12d6:	618b      	str	r3, [r1, #24]
	config->enable_32khz_output = true;
    12d8:	a80a      	add	r0, sp, #40	; 0x28
    12da:	2301      	movs	r3, #1
    12dc:	7083      	strb	r3, [r0, #2]
	config->run_in_standby      = false;
    12de:	2400      	movs	r4, #0
    12e0:	70c4      	strb	r4, [r0, #3]
	config->on_demand           = true;
    12e2:	7103      	strb	r3, [r0, #4]
	config->write_once          = false;
    12e4:	7144      	strb	r4, [r0, #5]

	struct system_clock_source_osc32k_config osc32k_conf;
	system_clock_source_osc32k_get_config_defaults(&osc32k_conf);

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
    12e6:	3305      	adds	r3, #5
    12e8:	7003      	strb	r3, [r0, #0]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
    12ea:	7044      	strb	r4, [r0, #1]
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    12ec:	4b35      	ldr	r3, [pc, #212]	; (13c4 <system_clock_init+0x130>)
    12ee:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    12f0:	2004      	movs	r0, #4
    12f2:	4b35      	ldr	r3, [pc, #212]	; (13c8 <system_clock_init+0x134>)
    12f4:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    12f6:	ab05      	add	r3, sp, #20
    12f8:	2200      	movs	r2, #0
    12fa:	805c      	strh	r4, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    12fc:	809c      	strh	r4, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    12fe:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1300:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    1302:	213f      	movs	r1, #63	; 0x3f
    1304:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1306:	393b      	subs	r1, #59	; 0x3b
    1308:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    130a:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    130c:	682b      	ldr	r3, [r5, #0]
    130e:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1310:	2b3f      	cmp	r3, #63	; 0x3f
    1312:	d04b      	beq.n	13ac <system_clock_init+0x118>
		coarse = 0x1f;
	}

	dfll_conf.coarse_value = coarse;
    1314:	a805      	add	r0, sp, #20
    1316:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1318:	23b7      	movs	r3, #183	; 0xb7
    131a:	00db      	lsls	r3, r3, #3
    131c:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    131e:	2307      	movs	r3, #7
    1320:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1322:	3338      	adds	r3, #56	; 0x38
    1324:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1326:	4b29      	ldr	r3, [pc, #164]	; (13cc <system_clock_init+0x138>)
    1328:	4798      	blx	r3
	config->run_in_standby  = false;
    132a:	a804      	add	r0, sp, #16
    132c:	2500      	movs	r5, #0
    132e:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    1330:	2601      	movs	r6, #1
    1332:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1334:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1336:	4b26      	ldr	r3, [pc, #152]	; (13d0 <system_clock_init+0x13c>)
    1338:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    133a:	2006      	movs	r0, #6
    133c:	4f22      	ldr	r7, [pc, #136]	; (13c8 <system_clock_init+0x134>)
    133e:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1340:	4b24      	ldr	r3, [pc, #144]	; (13d4 <system_clock_init+0x140>)
    1342:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1344:	ac01      	add	r4, sp, #4
    1346:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    1348:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    134a:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    134c:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    134e:	2304      	movs	r3, #4
    1350:	7023      	strb	r3, [r4, #0]
    1352:	0021      	movs	r1, r4
    1354:	2001      	movs	r0, #1
    1356:	4b20      	ldr	r3, [pc, #128]	; (13d8 <system_clock_init+0x144>)
    1358:	4798      	blx	r3
    135a:	2001      	movs	r0, #1
    135c:	4b1f      	ldr	r3, [pc, #124]	; (13dc <system_clock_init+0x148>)
    135e:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1360:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1362:	0021      	movs	r1, r4
    1364:	2000      	movs	r0, #0
    1366:	4b14      	ldr	r3, [pc, #80]	; (13b8 <system_clock_init+0x124>)
    1368:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    136a:	2000      	movs	r0, #0
    136c:	4b1c      	ldr	r3, [pc, #112]	; (13e0 <system_clock_init+0x14c>)
    136e:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1370:	2007      	movs	r0, #7
    1372:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1374:	490e      	ldr	r1, [pc, #56]	; (13b0 <system_clock_init+0x11c>)
    1376:	22d0      	movs	r2, #208	; 0xd0
    1378:	68cb      	ldr	r3, [r1, #12]
    137a:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    137c:	2bd0      	cmp	r3, #208	; 0xd0
    137e:	d1fb      	bne.n	1378 <system_clock_init+0xe4>
	PM->CPUSEL.reg = (uint32_t)divider;
    1380:	4a18      	ldr	r2, [pc, #96]	; (13e4 <system_clock_init+0x150>)
    1382:	2300      	movs	r3, #0
    1384:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1386:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1388:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    138a:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    138c:	a901      	add	r1, sp, #4
    138e:	2201      	movs	r2, #1
    1390:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1392:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    1394:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1396:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1398:	3307      	adds	r3, #7
    139a:	700b      	strb	r3, [r1, #0]
    139c:	2000      	movs	r0, #0
    139e:	4b0e      	ldr	r3, [pc, #56]	; (13d8 <system_clock_init+0x144>)
    13a0:	4798      	blx	r3
    13a2:	2000      	movs	r0, #0
    13a4:	4b0d      	ldr	r3, [pc, #52]	; (13dc <system_clock_init+0x148>)
    13a6:	4798      	blx	r3
#endif
}
    13a8:	b00d      	add	sp, #52	; 0x34
    13aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    13ac:	3b20      	subs	r3, #32
    13ae:	e7b1      	b.n	1314 <system_clock_init+0x80>
    13b0:	40000800 	.word	0x40000800
    13b4:	41004000 	.word	0x41004000
    13b8:	00001621 	.word	0x00001621
    13bc:	00806024 	.word	0x00806024
    13c0:	ff80ffff 	.word	0xff80ffff
    13c4:	000010f1 	.word	0x000010f1
    13c8:	000011ed 	.word	0x000011ed
    13cc:	0000116d 	.word	0x0000116d
    13d0:	000010b5 	.word	0x000010b5
    13d4:	000013e9 	.word	0x000013e9
    13d8:	0000140d 	.word	0x0000140d
    13dc:	000014c5 	.word	0x000014c5
    13e0:	00001595 	.word	0x00001595
    13e4:	40000400 	.word	0x40000400

000013e8 <system_gclk_init>:
    13e8:	4a06      	ldr	r2, [pc, #24]	; (1404 <system_gclk_init+0x1c>)
    13ea:	6993      	ldr	r3, [r2, #24]
    13ec:	2108      	movs	r1, #8
    13ee:	430b      	orrs	r3, r1
    13f0:	6193      	str	r3, [r2, #24]
    13f2:	2201      	movs	r2, #1
    13f4:	4b04      	ldr	r3, [pc, #16]	; (1408 <system_gclk_init+0x20>)
    13f6:	701a      	strb	r2, [r3, #0]
    13f8:	0019      	movs	r1, r3
    13fa:	780b      	ldrb	r3, [r1, #0]
    13fc:	4213      	tst	r3, r2
    13fe:	d1fc      	bne.n	13fa <system_gclk_init+0x12>
    1400:	4770      	bx	lr
    1402:	46c0      	nop			; (mov r8, r8)
    1404:	40000400 	.word	0x40000400
    1408:	40000c00 	.word	0x40000c00

0000140c <system_gclk_gen_set_config>:
    140c:	b570      	push	{r4, r5, r6, lr}
    140e:	0006      	movs	r6, r0
    1410:	0004      	movs	r4, r0
    1412:	780d      	ldrb	r5, [r1, #0]
    1414:	022d      	lsls	r5, r5, #8
    1416:	4305      	orrs	r5, r0
    1418:	784b      	ldrb	r3, [r1, #1]
    141a:	2b00      	cmp	r3, #0
    141c:	d002      	beq.n	1424 <system_gclk_gen_set_config+0x18>
    141e:	2380      	movs	r3, #128	; 0x80
    1420:	02db      	lsls	r3, r3, #11
    1422:	431d      	orrs	r5, r3
    1424:	7a4b      	ldrb	r3, [r1, #9]
    1426:	2b00      	cmp	r3, #0
    1428:	d002      	beq.n	1430 <system_gclk_gen_set_config+0x24>
    142a:	2380      	movs	r3, #128	; 0x80
    142c:	031b      	lsls	r3, r3, #12
    142e:	431d      	orrs	r5, r3
    1430:	6848      	ldr	r0, [r1, #4]
    1432:	2801      	cmp	r0, #1
    1434:	d910      	bls.n	1458 <system_gclk_gen_set_config+0x4c>
    1436:	1e43      	subs	r3, r0, #1
    1438:	4218      	tst	r0, r3
    143a:	d134      	bne.n	14a6 <system_gclk_gen_set_config+0x9a>
    143c:	2802      	cmp	r0, #2
    143e:	d930      	bls.n	14a2 <system_gclk_gen_set_config+0x96>
    1440:	2302      	movs	r3, #2
    1442:	2200      	movs	r2, #0
    1444:	3201      	adds	r2, #1
    1446:	005b      	lsls	r3, r3, #1
    1448:	4298      	cmp	r0, r3
    144a:	d8fb      	bhi.n	1444 <system_gclk_gen_set_config+0x38>
    144c:	0212      	lsls	r2, r2, #8
    144e:	4332      	orrs	r2, r6
    1450:	0014      	movs	r4, r2
    1452:	2380      	movs	r3, #128	; 0x80
    1454:	035b      	lsls	r3, r3, #13
    1456:	431d      	orrs	r5, r3
    1458:	7a0b      	ldrb	r3, [r1, #8]
    145a:	2b00      	cmp	r3, #0
    145c:	d002      	beq.n	1464 <system_gclk_gen_set_config+0x58>
    145e:	2380      	movs	r3, #128	; 0x80
    1460:	039b      	lsls	r3, r3, #14
    1462:	431d      	orrs	r5, r3
    1464:	4a13      	ldr	r2, [pc, #76]	; (14b4 <system_gclk_gen_set_config+0xa8>)
    1466:	7853      	ldrb	r3, [r2, #1]
    1468:	b25b      	sxtb	r3, r3
    146a:	2b00      	cmp	r3, #0
    146c:	dbfb      	blt.n	1466 <system_gclk_gen_set_config+0x5a>
    146e:	4b12      	ldr	r3, [pc, #72]	; (14b8 <system_gclk_gen_set_config+0xac>)
    1470:	4798      	blx	r3
    1472:	4b12      	ldr	r3, [pc, #72]	; (14bc <system_gclk_gen_set_config+0xb0>)
    1474:	701e      	strb	r6, [r3, #0]
    1476:	4a0f      	ldr	r2, [pc, #60]	; (14b4 <system_gclk_gen_set_config+0xa8>)
    1478:	7853      	ldrb	r3, [r2, #1]
    147a:	b25b      	sxtb	r3, r3
    147c:	2b00      	cmp	r3, #0
    147e:	dbfb      	blt.n	1478 <system_gclk_gen_set_config+0x6c>
    1480:	4b0c      	ldr	r3, [pc, #48]	; (14b4 <system_gclk_gen_set_config+0xa8>)
    1482:	609c      	str	r4, [r3, #8]
    1484:	001a      	movs	r2, r3
    1486:	7853      	ldrb	r3, [r2, #1]
    1488:	b25b      	sxtb	r3, r3
    148a:	2b00      	cmp	r3, #0
    148c:	dbfb      	blt.n	1486 <system_gclk_gen_set_config+0x7a>
    148e:	4a09      	ldr	r2, [pc, #36]	; (14b4 <system_gclk_gen_set_config+0xa8>)
    1490:	6853      	ldr	r3, [r2, #4]
    1492:	2180      	movs	r1, #128	; 0x80
    1494:	0249      	lsls	r1, r1, #9
    1496:	400b      	ands	r3, r1
    1498:	431d      	orrs	r5, r3
    149a:	6055      	str	r5, [r2, #4]
    149c:	4b08      	ldr	r3, [pc, #32]	; (14c0 <system_gclk_gen_set_config+0xb4>)
    149e:	4798      	blx	r3
    14a0:	bd70      	pop	{r4, r5, r6, pc}
    14a2:	2200      	movs	r2, #0
    14a4:	e7d2      	b.n	144c <system_gclk_gen_set_config+0x40>
    14a6:	0204      	lsls	r4, r0, #8
    14a8:	4334      	orrs	r4, r6
    14aa:	2380      	movs	r3, #128	; 0x80
    14ac:	029b      	lsls	r3, r3, #10
    14ae:	431d      	orrs	r5, r3
    14b0:	e7d2      	b.n	1458 <system_gclk_gen_set_config+0x4c>
    14b2:	46c0      	nop			; (mov r8, r8)
    14b4:	40000c00 	.word	0x40000c00
    14b8:	00000fb1 	.word	0x00000fb1
    14bc:	40000c08 	.word	0x40000c08
    14c0:	00000ff1 	.word	0x00000ff1

000014c4 <system_gclk_gen_enable>:
    14c4:	b510      	push	{r4, lr}
    14c6:	0004      	movs	r4, r0
    14c8:	4a0b      	ldr	r2, [pc, #44]	; (14f8 <system_gclk_gen_enable+0x34>)
    14ca:	7853      	ldrb	r3, [r2, #1]
    14cc:	b25b      	sxtb	r3, r3
    14ce:	2b00      	cmp	r3, #0
    14d0:	dbfb      	blt.n	14ca <system_gclk_gen_enable+0x6>
    14d2:	4b0a      	ldr	r3, [pc, #40]	; (14fc <system_gclk_gen_enable+0x38>)
    14d4:	4798      	blx	r3
    14d6:	4b0a      	ldr	r3, [pc, #40]	; (1500 <system_gclk_gen_enable+0x3c>)
    14d8:	701c      	strb	r4, [r3, #0]
    14da:	4a07      	ldr	r2, [pc, #28]	; (14f8 <system_gclk_gen_enable+0x34>)
    14dc:	7853      	ldrb	r3, [r2, #1]
    14de:	b25b      	sxtb	r3, r3
    14e0:	2b00      	cmp	r3, #0
    14e2:	dbfb      	blt.n	14dc <system_gclk_gen_enable+0x18>
    14e4:	4a04      	ldr	r2, [pc, #16]	; (14f8 <system_gclk_gen_enable+0x34>)
    14e6:	6851      	ldr	r1, [r2, #4]
    14e8:	2380      	movs	r3, #128	; 0x80
    14ea:	025b      	lsls	r3, r3, #9
    14ec:	430b      	orrs	r3, r1
    14ee:	6053      	str	r3, [r2, #4]
    14f0:	4b04      	ldr	r3, [pc, #16]	; (1504 <system_gclk_gen_enable+0x40>)
    14f2:	4798      	blx	r3
    14f4:	bd10      	pop	{r4, pc}
    14f6:	46c0      	nop			; (mov r8, r8)
    14f8:	40000c00 	.word	0x40000c00
    14fc:	00000fb1 	.word	0x00000fb1
    1500:	40000c04 	.word	0x40000c04
    1504:	00000ff1 	.word	0x00000ff1

00001508 <system_gclk_gen_get_hz>:
    1508:	b570      	push	{r4, r5, r6, lr}
    150a:	0004      	movs	r4, r0
    150c:	4a1a      	ldr	r2, [pc, #104]	; (1578 <system_gclk_gen_get_hz+0x70>)
    150e:	7853      	ldrb	r3, [r2, #1]
    1510:	b25b      	sxtb	r3, r3
    1512:	2b00      	cmp	r3, #0
    1514:	dbfb      	blt.n	150e <system_gclk_gen_get_hz+0x6>
    1516:	4b19      	ldr	r3, [pc, #100]	; (157c <system_gclk_gen_get_hz+0x74>)
    1518:	4798      	blx	r3
    151a:	4b19      	ldr	r3, [pc, #100]	; (1580 <system_gclk_gen_get_hz+0x78>)
    151c:	701c      	strb	r4, [r3, #0]
    151e:	4a16      	ldr	r2, [pc, #88]	; (1578 <system_gclk_gen_get_hz+0x70>)
    1520:	7853      	ldrb	r3, [r2, #1]
    1522:	b25b      	sxtb	r3, r3
    1524:	2b00      	cmp	r3, #0
    1526:	dbfb      	blt.n	1520 <system_gclk_gen_get_hz+0x18>
    1528:	4e13      	ldr	r6, [pc, #76]	; (1578 <system_gclk_gen_get_hz+0x70>)
    152a:	6870      	ldr	r0, [r6, #4]
    152c:	04c0      	lsls	r0, r0, #19
    152e:	0ec0      	lsrs	r0, r0, #27
    1530:	4b14      	ldr	r3, [pc, #80]	; (1584 <system_gclk_gen_get_hz+0x7c>)
    1532:	4798      	blx	r3
    1534:	0005      	movs	r5, r0
    1536:	4b12      	ldr	r3, [pc, #72]	; (1580 <system_gclk_gen_get_hz+0x78>)
    1538:	701c      	strb	r4, [r3, #0]
    153a:	6876      	ldr	r6, [r6, #4]
    153c:	02f6      	lsls	r6, r6, #11
    153e:	0ff6      	lsrs	r6, r6, #31
    1540:	4b11      	ldr	r3, [pc, #68]	; (1588 <system_gclk_gen_get_hz+0x80>)
    1542:	701c      	strb	r4, [r3, #0]
    1544:	4a0c      	ldr	r2, [pc, #48]	; (1578 <system_gclk_gen_get_hz+0x70>)
    1546:	7853      	ldrb	r3, [r2, #1]
    1548:	b25b      	sxtb	r3, r3
    154a:	2b00      	cmp	r3, #0
    154c:	dbfb      	blt.n	1546 <system_gclk_gen_get_hz+0x3e>
    154e:	4b0a      	ldr	r3, [pc, #40]	; (1578 <system_gclk_gen_get_hz+0x70>)
    1550:	689c      	ldr	r4, [r3, #8]
    1552:	0224      	lsls	r4, r4, #8
    1554:	0c24      	lsrs	r4, r4, #16
    1556:	4b0d      	ldr	r3, [pc, #52]	; (158c <system_gclk_gen_get_hz+0x84>)
    1558:	4798      	blx	r3
    155a:	2e00      	cmp	r6, #0
    155c:	d107      	bne.n	156e <system_gclk_gen_get_hz+0x66>
    155e:	2c01      	cmp	r4, #1
    1560:	d907      	bls.n	1572 <system_gclk_gen_get_hz+0x6a>
    1562:	0021      	movs	r1, r4
    1564:	0028      	movs	r0, r5
    1566:	4b0a      	ldr	r3, [pc, #40]	; (1590 <system_gclk_gen_get_hz+0x88>)
    1568:	4798      	blx	r3
    156a:	0005      	movs	r5, r0
    156c:	e001      	b.n	1572 <system_gclk_gen_get_hz+0x6a>
    156e:	3401      	adds	r4, #1
    1570:	40e5      	lsrs	r5, r4
    1572:	0028      	movs	r0, r5
    1574:	bd70      	pop	{r4, r5, r6, pc}
    1576:	46c0      	nop			; (mov r8, r8)
    1578:	40000c00 	.word	0x40000c00
    157c:	00000fb1 	.word	0x00000fb1
    1580:	40000c04 	.word	0x40000c04
    1584:	00001021 	.word	0x00001021
    1588:	40000c08 	.word	0x40000c08
    158c:	00000ff1 	.word	0x00000ff1
    1590:	00001861 	.word	0x00001861

00001594 <system_gclk_chan_enable>:
    1594:	b510      	push	{r4, lr}
    1596:	0004      	movs	r4, r0
    1598:	4b06      	ldr	r3, [pc, #24]	; (15b4 <system_gclk_chan_enable+0x20>)
    159a:	4798      	blx	r3
    159c:	4b06      	ldr	r3, [pc, #24]	; (15b8 <system_gclk_chan_enable+0x24>)
    159e:	701c      	strb	r4, [r3, #0]
    15a0:	4a06      	ldr	r2, [pc, #24]	; (15bc <system_gclk_chan_enable+0x28>)
    15a2:	8853      	ldrh	r3, [r2, #2]
    15a4:	2180      	movs	r1, #128	; 0x80
    15a6:	01c9      	lsls	r1, r1, #7
    15a8:	430b      	orrs	r3, r1
    15aa:	8053      	strh	r3, [r2, #2]
    15ac:	4b04      	ldr	r3, [pc, #16]	; (15c0 <system_gclk_chan_enable+0x2c>)
    15ae:	4798      	blx	r3
    15b0:	bd10      	pop	{r4, pc}
    15b2:	46c0      	nop			; (mov r8, r8)
    15b4:	00000fb1 	.word	0x00000fb1
    15b8:	40000c02 	.word	0x40000c02
    15bc:	40000c00 	.word	0x40000c00
    15c0:	00000ff1 	.word	0x00000ff1

000015c4 <system_gclk_chan_disable>:
    15c4:	b510      	push	{r4, lr}
    15c6:	0004      	movs	r4, r0
    15c8:	4b0f      	ldr	r3, [pc, #60]	; (1608 <system_gclk_chan_disable+0x44>)
    15ca:	4798      	blx	r3
    15cc:	4b0f      	ldr	r3, [pc, #60]	; (160c <system_gclk_chan_disable+0x48>)
    15ce:	701c      	strb	r4, [r3, #0]
    15d0:	4a0f      	ldr	r2, [pc, #60]	; (1610 <system_gclk_chan_disable+0x4c>)
    15d2:	8853      	ldrh	r3, [r2, #2]
    15d4:	051b      	lsls	r3, r3, #20
    15d6:	0f18      	lsrs	r0, r3, #28
    15d8:	8853      	ldrh	r3, [r2, #2]
    15da:	490e      	ldr	r1, [pc, #56]	; (1614 <system_gclk_chan_disable+0x50>)
    15dc:	400b      	ands	r3, r1
    15de:	8053      	strh	r3, [r2, #2]
    15e0:	8853      	ldrh	r3, [r2, #2]
    15e2:	490d      	ldr	r1, [pc, #52]	; (1618 <system_gclk_chan_disable+0x54>)
    15e4:	400b      	ands	r3, r1
    15e6:	8053      	strh	r3, [r2, #2]
    15e8:	0011      	movs	r1, r2
    15ea:	2280      	movs	r2, #128	; 0x80
    15ec:	01d2      	lsls	r2, r2, #7
    15ee:	884b      	ldrh	r3, [r1, #2]
    15f0:	4213      	tst	r3, r2
    15f2:	d1fc      	bne.n	15ee <system_gclk_chan_disable+0x2a>
    15f4:	4906      	ldr	r1, [pc, #24]	; (1610 <system_gclk_chan_disable+0x4c>)
    15f6:	884a      	ldrh	r2, [r1, #2]
    15f8:	0203      	lsls	r3, r0, #8
    15fa:	4806      	ldr	r0, [pc, #24]	; (1614 <system_gclk_chan_disable+0x50>)
    15fc:	4002      	ands	r2, r0
    15fe:	4313      	orrs	r3, r2
    1600:	804b      	strh	r3, [r1, #2]
    1602:	4b06      	ldr	r3, [pc, #24]	; (161c <system_gclk_chan_disable+0x58>)
    1604:	4798      	blx	r3
    1606:	bd10      	pop	{r4, pc}
    1608:	00000fb1 	.word	0x00000fb1
    160c:	40000c02 	.word	0x40000c02
    1610:	40000c00 	.word	0x40000c00
    1614:	fffff0ff 	.word	0xfffff0ff
    1618:	ffffbfff 	.word	0xffffbfff
    161c:	00000ff1 	.word	0x00000ff1

00001620 <system_gclk_chan_set_config>:
    1620:	b510      	push	{r4, lr}
    1622:	780c      	ldrb	r4, [r1, #0]
    1624:	0224      	lsls	r4, r4, #8
    1626:	4304      	orrs	r4, r0
    1628:	4b02      	ldr	r3, [pc, #8]	; (1634 <system_gclk_chan_set_config+0x14>)
    162a:	4798      	blx	r3
    162c:	b2a4      	uxth	r4, r4
    162e:	4b02      	ldr	r3, [pc, #8]	; (1638 <system_gclk_chan_set_config+0x18>)
    1630:	805c      	strh	r4, [r3, #2]
    1632:	bd10      	pop	{r4, pc}
    1634:	000015c5 	.word	0x000015c5
    1638:	40000c00 	.word	0x40000c00

0000163c <system_gclk_chan_get_hz>:
    163c:	b510      	push	{r4, lr}
    163e:	0004      	movs	r4, r0
    1640:	4b06      	ldr	r3, [pc, #24]	; (165c <system_gclk_chan_get_hz+0x20>)
    1642:	4798      	blx	r3
    1644:	4b06      	ldr	r3, [pc, #24]	; (1660 <system_gclk_chan_get_hz+0x24>)
    1646:	701c      	strb	r4, [r3, #0]
    1648:	4b06      	ldr	r3, [pc, #24]	; (1664 <system_gclk_chan_get_hz+0x28>)
    164a:	885c      	ldrh	r4, [r3, #2]
    164c:	0524      	lsls	r4, r4, #20
    164e:	0f24      	lsrs	r4, r4, #28
    1650:	4b05      	ldr	r3, [pc, #20]	; (1668 <system_gclk_chan_get_hz+0x2c>)
    1652:	4798      	blx	r3
    1654:	0020      	movs	r0, r4
    1656:	4b05      	ldr	r3, [pc, #20]	; (166c <system_gclk_chan_get_hz+0x30>)
    1658:	4798      	blx	r3
    165a:	bd10      	pop	{r4, pc}
    165c:	00000fb1 	.word	0x00000fb1
    1660:	40000c02 	.word	0x40000c02
    1664:	40000c00 	.word	0x40000c00
    1668:	00000ff1 	.word	0x00000ff1
    166c:	00001509 	.word	0x00001509

00001670 <_system_pinmux_config>:
    1670:	b530      	push	{r4, r5, lr}
    1672:	78d3      	ldrb	r3, [r2, #3]
    1674:	2b00      	cmp	r3, #0
    1676:	d135      	bne.n	16e4 <_system_pinmux_config+0x74>
    1678:	7813      	ldrb	r3, [r2, #0]
    167a:	2b80      	cmp	r3, #128	; 0x80
    167c:	d029      	beq.n	16d2 <_system_pinmux_config+0x62>
    167e:	061b      	lsls	r3, r3, #24
    1680:	2480      	movs	r4, #128	; 0x80
    1682:	0264      	lsls	r4, r4, #9
    1684:	4323      	orrs	r3, r4
    1686:	7854      	ldrb	r4, [r2, #1]
    1688:	2502      	movs	r5, #2
    168a:	43ac      	bics	r4, r5
    168c:	d106      	bne.n	169c <_system_pinmux_config+0x2c>
    168e:	7894      	ldrb	r4, [r2, #2]
    1690:	2c00      	cmp	r4, #0
    1692:	d120      	bne.n	16d6 <_system_pinmux_config+0x66>
    1694:	2480      	movs	r4, #128	; 0x80
    1696:	02a4      	lsls	r4, r4, #10
    1698:	4323      	orrs	r3, r4
    169a:	6041      	str	r1, [r0, #4]
    169c:	7854      	ldrb	r4, [r2, #1]
    169e:	3c01      	subs	r4, #1
    16a0:	2c01      	cmp	r4, #1
    16a2:	d91c      	bls.n	16de <_system_pinmux_config+0x6e>
    16a4:	040d      	lsls	r5, r1, #16
    16a6:	0c2d      	lsrs	r5, r5, #16
    16a8:	24a0      	movs	r4, #160	; 0xa0
    16aa:	05e4      	lsls	r4, r4, #23
    16ac:	432c      	orrs	r4, r5
    16ae:	431c      	orrs	r4, r3
    16b0:	6284      	str	r4, [r0, #40]	; 0x28
    16b2:	0c0d      	lsrs	r5, r1, #16
    16b4:	24d0      	movs	r4, #208	; 0xd0
    16b6:	0624      	lsls	r4, r4, #24
    16b8:	432c      	orrs	r4, r5
    16ba:	431c      	orrs	r4, r3
    16bc:	6284      	str	r4, [r0, #40]	; 0x28
    16be:	78d4      	ldrb	r4, [r2, #3]
    16c0:	2c00      	cmp	r4, #0
    16c2:	d122      	bne.n	170a <_system_pinmux_config+0x9a>
    16c4:	035b      	lsls	r3, r3, #13
    16c6:	d51c      	bpl.n	1702 <_system_pinmux_config+0x92>
    16c8:	7893      	ldrb	r3, [r2, #2]
    16ca:	2b01      	cmp	r3, #1
    16cc:	d01e      	beq.n	170c <_system_pinmux_config+0x9c>
    16ce:	6141      	str	r1, [r0, #20]
    16d0:	e017      	b.n	1702 <_system_pinmux_config+0x92>
    16d2:	2300      	movs	r3, #0
    16d4:	e7d7      	b.n	1686 <_system_pinmux_config+0x16>
    16d6:	24c0      	movs	r4, #192	; 0xc0
    16d8:	02e4      	lsls	r4, r4, #11
    16da:	4323      	orrs	r3, r4
    16dc:	e7dd      	b.n	169a <_system_pinmux_config+0x2a>
    16de:	4c0d      	ldr	r4, [pc, #52]	; (1714 <_system_pinmux_config+0xa4>)
    16e0:	4023      	ands	r3, r4
    16e2:	e7df      	b.n	16a4 <_system_pinmux_config+0x34>
    16e4:	6041      	str	r1, [r0, #4]
    16e6:	040c      	lsls	r4, r1, #16
    16e8:	0c24      	lsrs	r4, r4, #16
    16ea:	23a0      	movs	r3, #160	; 0xa0
    16ec:	05db      	lsls	r3, r3, #23
    16ee:	4323      	orrs	r3, r4
    16f0:	6283      	str	r3, [r0, #40]	; 0x28
    16f2:	0c0c      	lsrs	r4, r1, #16
    16f4:	23d0      	movs	r3, #208	; 0xd0
    16f6:	061b      	lsls	r3, r3, #24
    16f8:	4323      	orrs	r3, r4
    16fa:	6283      	str	r3, [r0, #40]	; 0x28
    16fc:	78d3      	ldrb	r3, [r2, #3]
    16fe:	2b00      	cmp	r3, #0
    1700:	d103      	bne.n	170a <_system_pinmux_config+0x9a>
    1702:	7853      	ldrb	r3, [r2, #1]
    1704:	3b01      	subs	r3, #1
    1706:	2b01      	cmp	r3, #1
    1708:	d902      	bls.n	1710 <_system_pinmux_config+0xa0>
    170a:	bd30      	pop	{r4, r5, pc}
    170c:	6181      	str	r1, [r0, #24]
    170e:	e7f8      	b.n	1702 <_system_pinmux_config+0x92>
    1710:	6081      	str	r1, [r0, #8]
    1712:	e7fa      	b.n	170a <_system_pinmux_config+0x9a>
    1714:	fffbffff 	.word	0xfffbffff

00001718 <system_pinmux_pin_set_config>:
    1718:	b510      	push	{r4, lr}
    171a:	000a      	movs	r2, r1
    171c:	09c1      	lsrs	r1, r0, #7
    171e:	2300      	movs	r3, #0
    1720:	2900      	cmp	r1, #0
    1722:	d104      	bne.n	172e <system_pinmux_pin_set_config+0x16>
    1724:	0943      	lsrs	r3, r0, #5
    1726:	01db      	lsls	r3, r3, #7
    1728:	4905      	ldr	r1, [pc, #20]	; (1740 <system_pinmux_pin_set_config+0x28>)
    172a:	468c      	mov	ip, r1
    172c:	4463      	add	r3, ip
    172e:	241f      	movs	r4, #31
    1730:	4020      	ands	r0, r4
    1732:	2101      	movs	r1, #1
    1734:	4081      	lsls	r1, r0
    1736:	0018      	movs	r0, r3
    1738:	4b02      	ldr	r3, [pc, #8]	; (1744 <system_pinmux_pin_set_config+0x2c>)
    173a:	4798      	blx	r3
    173c:	bd10      	pop	{r4, pc}
    173e:	46c0      	nop			; (mov r8, r8)
    1740:	41004400 	.word	0x41004400
    1744:	00001671 	.word	0x00001671

00001748 <Dummy_Handler>:
    1748:	e7fe      	b.n	1748 <Dummy_Handler>
	...

0000174c <Reset_Handler>:
    174c:	b510      	push	{r4, lr}
    174e:	4a26      	ldr	r2, [pc, #152]	; (17e8 <Reset_Handler+0x9c>)
    1750:	4b26      	ldr	r3, [pc, #152]	; (17ec <Reset_Handler+0xa0>)
    1752:	429a      	cmp	r2, r3
    1754:	d011      	beq.n	177a <Reset_Handler+0x2e>
    1756:	001a      	movs	r2, r3
    1758:	4b25      	ldr	r3, [pc, #148]	; (17f0 <Reset_Handler+0xa4>)
    175a:	429a      	cmp	r2, r3
    175c:	d20d      	bcs.n	177a <Reset_Handler+0x2e>
    175e:	4a25      	ldr	r2, [pc, #148]	; (17f4 <Reset_Handler+0xa8>)
    1760:	3303      	adds	r3, #3
    1762:	1a9b      	subs	r3, r3, r2
    1764:	089b      	lsrs	r3, r3, #2
    1766:	3301      	adds	r3, #1
    1768:	009b      	lsls	r3, r3, #2
    176a:	2200      	movs	r2, #0
    176c:	481f      	ldr	r0, [pc, #124]	; (17ec <Reset_Handler+0xa0>)
    176e:	491e      	ldr	r1, [pc, #120]	; (17e8 <Reset_Handler+0x9c>)
    1770:	588c      	ldr	r4, [r1, r2]
    1772:	5084      	str	r4, [r0, r2]
    1774:	3204      	adds	r2, #4
    1776:	429a      	cmp	r2, r3
    1778:	d1fa      	bne.n	1770 <Reset_Handler+0x24>
    177a:	4a1f      	ldr	r2, [pc, #124]	; (17f8 <Reset_Handler+0xac>)
    177c:	4b1f      	ldr	r3, [pc, #124]	; (17fc <Reset_Handler+0xb0>)
    177e:	429a      	cmp	r2, r3
    1780:	d20a      	bcs.n	1798 <Reset_Handler+0x4c>
    1782:	43d3      	mvns	r3, r2
    1784:	491d      	ldr	r1, [pc, #116]	; (17fc <Reset_Handler+0xb0>)
    1786:	185b      	adds	r3, r3, r1
    1788:	2103      	movs	r1, #3
    178a:	438b      	bics	r3, r1
    178c:	3304      	adds	r3, #4
    178e:	189b      	adds	r3, r3, r2
    1790:	2100      	movs	r1, #0
    1792:	c202      	stmia	r2!, {r1}
    1794:	4293      	cmp	r3, r2
    1796:	d1fc      	bne.n	1792 <Reset_Handler+0x46>
    1798:	4a19      	ldr	r2, [pc, #100]	; (1800 <Reset_Handler+0xb4>)
    179a:	21ff      	movs	r1, #255	; 0xff
    179c:	4b19      	ldr	r3, [pc, #100]	; (1804 <Reset_Handler+0xb8>)
    179e:	438b      	bics	r3, r1
    17a0:	6093      	str	r3, [r2, #8]
    17a2:	39fd      	subs	r1, #253	; 0xfd
    17a4:	2390      	movs	r3, #144	; 0x90
    17a6:	005b      	lsls	r3, r3, #1
    17a8:	4a17      	ldr	r2, [pc, #92]	; (1808 <Reset_Handler+0xbc>)
    17aa:	50d1      	str	r1, [r2, r3]
    17ac:	4b17      	ldr	r3, [pc, #92]	; (180c <Reset_Handler+0xc0>)
    17ae:	7b9a      	ldrb	r2, [r3, #14]
    17b0:	312e      	adds	r1, #46	; 0x2e
    17b2:	438a      	bics	r2, r1
    17b4:	2120      	movs	r1, #32
    17b6:	430a      	orrs	r2, r1
    17b8:	739a      	strb	r2, [r3, #14]
    17ba:	7b9a      	ldrb	r2, [r3, #14]
    17bc:	210c      	movs	r1, #12
    17be:	438a      	bics	r2, r1
    17c0:	2108      	movs	r1, #8
    17c2:	430a      	orrs	r2, r1
    17c4:	739a      	strb	r2, [r3, #14]
    17c6:	7b9a      	ldrb	r2, [r3, #14]
    17c8:	2103      	movs	r1, #3
    17ca:	438a      	bics	r2, r1
    17cc:	2102      	movs	r1, #2
    17ce:	430a      	orrs	r2, r1
    17d0:	739a      	strb	r2, [r3, #14]
    17d2:	4a0f      	ldr	r2, [pc, #60]	; (1810 <Reset_Handler+0xc4>)
    17d4:	6853      	ldr	r3, [r2, #4]
    17d6:	2180      	movs	r1, #128	; 0x80
    17d8:	430b      	orrs	r3, r1
    17da:	6053      	str	r3, [r2, #4]
    17dc:	4b0d      	ldr	r3, [pc, #52]	; (1814 <Reset_Handler+0xc8>)
    17de:	4798      	blx	r3
    17e0:	4b0d      	ldr	r3, [pc, #52]	; (1818 <Reset_Handler+0xcc>)
    17e2:	4798      	blx	r3
    17e4:	e7fe      	b.n	17e4 <Reset_Handler+0x98>
    17e6:	46c0      	nop			; (mov r8, r8)
    17e8:	00002628 	.word	0x00002628
    17ec:	20000000 	.word	0x20000000
    17f0:	20000854 	.word	0x20000854
    17f4:	20000004 	.word	0x20000004
    17f8:	20000854 	.word	0x20000854
    17fc:	200009f4 	.word	0x200009f4
    1800:	e000ed00 	.word	0xe000ed00
    1804:	00000000 	.word	0x00000000
    1808:	41007000 	.word	0x41007000
    180c:	41004800 	.word	0x41004800
    1810:	41004000 	.word	0x41004000
    1814:	00001b5d 	.word	0x00001b5d
    1818:	00000355 	.word	0x00000355

0000181c <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
    181c:	4a01      	ldr	r2, [pc, #4]	; (1824 <SystemInit+0x8>)
    181e:	4b02      	ldr	r3, [pc, #8]	; (1828 <SystemInit+0xc>)
    1820:	601a      	str	r2, [r3, #0]
	return;
}
    1822:	4770      	bx	lr
    1824:	000f4240 	.word	0x000f4240
    1828:	20000010 	.word	0x20000010

0000182c <_sbrk>:
    182c:	0003      	movs	r3, r0
    182e:	4a06      	ldr	r2, [pc, #24]	; (1848 <_sbrk+0x1c>)
    1830:	6812      	ldr	r2, [r2, #0]
    1832:	2a00      	cmp	r2, #0
    1834:	d004      	beq.n	1840 <_sbrk+0x14>
    1836:	4a04      	ldr	r2, [pc, #16]	; (1848 <_sbrk+0x1c>)
    1838:	6810      	ldr	r0, [r2, #0]
    183a:	18c3      	adds	r3, r0, r3
    183c:	6013      	str	r3, [r2, #0]
    183e:	4770      	bx	lr
    1840:	4902      	ldr	r1, [pc, #8]	; (184c <_sbrk+0x20>)
    1842:	4a01      	ldr	r2, [pc, #4]	; (1848 <_sbrk+0x1c>)
    1844:	6011      	str	r1, [r2, #0]
    1846:	e7f6      	b.n	1836 <_sbrk+0xa>
    1848:	2000093c 	.word	0x2000093c
    184c:	20000df8 	.word	0x20000df8

00001850 <__aeabi_atexit>:
    1850:	000b      	movs	r3, r1
    1852:	b510      	push	{r4, lr}
    1854:	0001      	movs	r1, r0
    1856:	0018      	movs	r0, r3
    1858:	f000 f978 	bl	1b4c <__cxa_atexit>
    185c:	bd10      	pop	{r4, pc}
    185e:	46c0      	nop			; (mov r8, r8)

00001860 <__udivsi3>:
    1860:	2200      	movs	r2, #0
    1862:	0843      	lsrs	r3, r0, #1
    1864:	428b      	cmp	r3, r1
    1866:	d374      	bcc.n	1952 <__udivsi3+0xf2>
    1868:	0903      	lsrs	r3, r0, #4
    186a:	428b      	cmp	r3, r1
    186c:	d35f      	bcc.n	192e <__udivsi3+0xce>
    186e:	0a03      	lsrs	r3, r0, #8
    1870:	428b      	cmp	r3, r1
    1872:	d344      	bcc.n	18fe <__udivsi3+0x9e>
    1874:	0b03      	lsrs	r3, r0, #12
    1876:	428b      	cmp	r3, r1
    1878:	d328      	bcc.n	18cc <__udivsi3+0x6c>
    187a:	0c03      	lsrs	r3, r0, #16
    187c:	428b      	cmp	r3, r1
    187e:	d30d      	bcc.n	189c <__udivsi3+0x3c>
    1880:	22ff      	movs	r2, #255	; 0xff
    1882:	0209      	lsls	r1, r1, #8
    1884:	ba12      	rev	r2, r2
    1886:	0c03      	lsrs	r3, r0, #16
    1888:	428b      	cmp	r3, r1
    188a:	d302      	bcc.n	1892 <__udivsi3+0x32>
    188c:	1212      	asrs	r2, r2, #8
    188e:	0209      	lsls	r1, r1, #8
    1890:	d065      	beq.n	195e <__udivsi3+0xfe>
    1892:	0b03      	lsrs	r3, r0, #12
    1894:	428b      	cmp	r3, r1
    1896:	d319      	bcc.n	18cc <__udivsi3+0x6c>
    1898:	e000      	b.n	189c <__udivsi3+0x3c>
    189a:	0a09      	lsrs	r1, r1, #8
    189c:	0bc3      	lsrs	r3, r0, #15
    189e:	428b      	cmp	r3, r1
    18a0:	d301      	bcc.n	18a6 <__udivsi3+0x46>
    18a2:	03cb      	lsls	r3, r1, #15
    18a4:	1ac0      	subs	r0, r0, r3
    18a6:	4152      	adcs	r2, r2
    18a8:	0b83      	lsrs	r3, r0, #14
    18aa:	428b      	cmp	r3, r1
    18ac:	d301      	bcc.n	18b2 <__udivsi3+0x52>
    18ae:	038b      	lsls	r3, r1, #14
    18b0:	1ac0      	subs	r0, r0, r3
    18b2:	4152      	adcs	r2, r2
    18b4:	0b43      	lsrs	r3, r0, #13
    18b6:	428b      	cmp	r3, r1
    18b8:	d301      	bcc.n	18be <__udivsi3+0x5e>
    18ba:	034b      	lsls	r3, r1, #13
    18bc:	1ac0      	subs	r0, r0, r3
    18be:	4152      	adcs	r2, r2
    18c0:	0b03      	lsrs	r3, r0, #12
    18c2:	428b      	cmp	r3, r1
    18c4:	d301      	bcc.n	18ca <__udivsi3+0x6a>
    18c6:	030b      	lsls	r3, r1, #12
    18c8:	1ac0      	subs	r0, r0, r3
    18ca:	4152      	adcs	r2, r2
    18cc:	0ac3      	lsrs	r3, r0, #11
    18ce:	428b      	cmp	r3, r1
    18d0:	d301      	bcc.n	18d6 <__udivsi3+0x76>
    18d2:	02cb      	lsls	r3, r1, #11
    18d4:	1ac0      	subs	r0, r0, r3
    18d6:	4152      	adcs	r2, r2
    18d8:	0a83      	lsrs	r3, r0, #10
    18da:	428b      	cmp	r3, r1
    18dc:	d301      	bcc.n	18e2 <__udivsi3+0x82>
    18de:	028b      	lsls	r3, r1, #10
    18e0:	1ac0      	subs	r0, r0, r3
    18e2:	4152      	adcs	r2, r2
    18e4:	0a43      	lsrs	r3, r0, #9
    18e6:	428b      	cmp	r3, r1
    18e8:	d301      	bcc.n	18ee <__udivsi3+0x8e>
    18ea:	024b      	lsls	r3, r1, #9
    18ec:	1ac0      	subs	r0, r0, r3
    18ee:	4152      	adcs	r2, r2
    18f0:	0a03      	lsrs	r3, r0, #8
    18f2:	428b      	cmp	r3, r1
    18f4:	d301      	bcc.n	18fa <__udivsi3+0x9a>
    18f6:	020b      	lsls	r3, r1, #8
    18f8:	1ac0      	subs	r0, r0, r3
    18fa:	4152      	adcs	r2, r2
    18fc:	d2cd      	bcs.n	189a <__udivsi3+0x3a>
    18fe:	09c3      	lsrs	r3, r0, #7
    1900:	428b      	cmp	r3, r1
    1902:	d301      	bcc.n	1908 <__udivsi3+0xa8>
    1904:	01cb      	lsls	r3, r1, #7
    1906:	1ac0      	subs	r0, r0, r3
    1908:	4152      	adcs	r2, r2
    190a:	0983      	lsrs	r3, r0, #6
    190c:	428b      	cmp	r3, r1
    190e:	d301      	bcc.n	1914 <__udivsi3+0xb4>
    1910:	018b      	lsls	r3, r1, #6
    1912:	1ac0      	subs	r0, r0, r3
    1914:	4152      	adcs	r2, r2
    1916:	0943      	lsrs	r3, r0, #5
    1918:	428b      	cmp	r3, r1
    191a:	d301      	bcc.n	1920 <__udivsi3+0xc0>
    191c:	014b      	lsls	r3, r1, #5
    191e:	1ac0      	subs	r0, r0, r3
    1920:	4152      	adcs	r2, r2
    1922:	0903      	lsrs	r3, r0, #4
    1924:	428b      	cmp	r3, r1
    1926:	d301      	bcc.n	192c <__udivsi3+0xcc>
    1928:	010b      	lsls	r3, r1, #4
    192a:	1ac0      	subs	r0, r0, r3
    192c:	4152      	adcs	r2, r2
    192e:	08c3      	lsrs	r3, r0, #3
    1930:	428b      	cmp	r3, r1
    1932:	d301      	bcc.n	1938 <__udivsi3+0xd8>
    1934:	00cb      	lsls	r3, r1, #3
    1936:	1ac0      	subs	r0, r0, r3
    1938:	4152      	adcs	r2, r2
    193a:	0883      	lsrs	r3, r0, #2
    193c:	428b      	cmp	r3, r1
    193e:	d301      	bcc.n	1944 <__udivsi3+0xe4>
    1940:	008b      	lsls	r3, r1, #2
    1942:	1ac0      	subs	r0, r0, r3
    1944:	4152      	adcs	r2, r2
    1946:	0843      	lsrs	r3, r0, #1
    1948:	428b      	cmp	r3, r1
    194a:	d301      	bcc.n	1950 <__udivsi3+0xf0>
    194c:	004b      	lsls	r3, r1, #1
    194e:	1ac0      	subs	r0, r0, r3
    1950:	4152      	adcs	r2, r2
    1952:	1a41      	subs	r1, r0, r1
    1954:	d200      	bcs.n	1958 <__udivsi3+0xf8>
    1956:	4601      	mov	r1, r0
    1958:	4152      	adcs	r2, r2
    195a:	4610      	mov	r0, r2
    195c:	4770      	bx	lr
    195e:	e7ff      	b.n	1960 <__udivsi3+0x100>
    1960:	b501      	push	{r0, lr}
    1962:	2000      	movs	r0, #0
    1964:	f000 f8f0 	bl	1b48 <__aeabi_idiv0>
    1968:	bd02      	pop	{r1, pc}
    196a:	46c0      	nop			; (mov r8, r8)

0000196c <__aeabi_uidivmod>:
    196c:	2900      	cmp	r1, #0
    196e:	d0f7      	beq.n	1960 <__udivsi3+0x100>
    1970:	e776      	b.n	1860 <__udivsi3>
    1972:	4770      	bx	lr

00001974 <__divsi3>:
    1974:	4603      	mov	r3, r0
    1976:	430b      	orrs	r3, r1
    1978:	d47f      	bmi.n	1a7a <__divsi3+0x106>
    197a:	2200      	movs	r2, #0
    197c:	0843      	lsrs	r3, r0, #1
    197e:	428b      	cmp	r3, r1
    1980:	d374      	bcc.n	1a6c <__divsi3+0xf8>
    1982:	0903      	lsrs	r3, r0, #4
    1984:	428b      	cmp	r3, r1
    1986:	d35f      	bcc.n	1a48 <__divsi3+0xd4>
    1988:	0a03      	lsrs	r3, r0, #8
    198a:	428b      	cmp	r3, r1
    198c:	d344      	bcc.n	1a18 <__divsi3+0xa4>
    198e:	0b03      	lsrs	r3, r0, #12
    1990:	428b      	cmp	r3, r1
    1992:	d328      	bcc.n	19e6 <__divsi3+0x72>
    1994:	0c03      	lsrs	r3, r0, #16
    1996:	428b      	cmp	r3, r1
    1998:	d30d      	bcc.n	19b6 <__divsi3+0x42>
    199a:	22ff      	movs	r2, #255	; 0xff
    199c:	0209      	lsls	r1, r1, #8
    199e:	ba12      	rev	r2, r2
    19a0:	0c03      	lsrs	r3, r0, #16
    19a2:	428b      	cmp	r3, r1
    19a4:	d302      	bcc.n	19ac <__divsi3+0x38>
    19a6:	1212      	asrs	r2, r2, #8
    19a8:	0209      	lsls	r1, r1, #8
    19aa:	d065      	beq.n	1a78 <__divsi3+0x104>
    19ac:	0b03      	lsrs	r3, r0, #12
    19ae:	428b      	cmp	r3, r1
    19b0:	d319      	bcc.n	19e6 <__divsi3+0x72>
    19b2:	e000      	b.n	19b6 <__divsi3+0x42>
    19b4:	0a09      	lsrs	r1, r1, #8
    19b6:	0bc3      	lsrs	r3, r0, #15
    19b8:	428b      	cmp	r3, r1
    19ba:	d301      	bcc.n	19c0 <__divsi3+0x4c>
    19bc:	03cb      	lsls	r3, r1, #15
    19be:	1ac0      	subs	r0, r0, r3
    19c0:	4152      	adcs	r2, r2
    19c2:	0b83      	lsrs	r3, r0, #14
    19c4:	428b      	cmp	r3, r1
    19c6:	d301      	bcc.n	19cc <__divsi3+0x58>
    19c8:	038b      	lsls	r3, r1, #14
    19ca:	1ac0      	subs	r0, r0, r3
    19cc:	4152      	adcs	r2, r2
    19ce:	0b43      	lsrs	r3, r0, #13
    19d0:	428b      	cmp	r3, r1
    19d2:	d301      	bcc.n	19d8 <__divsi3+0x64>
    19d4:	034b      	lsls	r3, r1, #13
    19d6:	1ac0      	subs	r0, r0, r3
    19d8:	4152      	adcs	r2, r2
    19da:	0b03      	lsrs	r3, r0, #12
    19dc:	428b      	cmp	r3, r1
    19de:	d301      	bcc.n	19e4 <__divsi3+0x70>
    19e0:	030b      	lsls	r3, r1, #12
    19e2:	1ac0      	subs	r0, r0, r3
    19e4:	4152      	adcs	r2, r2
    19e6:	0ac3      	lsrs	r3, r0, #11
    19e8:	428b      	cmp	r3, r1
    19ea:	d301      	bcc.n	19f0 <__divsi3+0x7c>
    19ec:	02cb      	lsls	r3, r1, #11
    19ee:	1ac0      	subs	r0, r0, r3
    19f0:	4152      	adcs	r2, r2
    19f2:	0a83      	lsrs	r3, r0, #10
    19f4:	428b      	cmp	r3, r1
    19f6:	d301      	bcc.n	19fc <__divsi3+0x88>
    19f8:	028b      	lsls	r3, r1, #10
    19fa:	1ac0      	subs	r0, r0, r3
    19fc:	4152      	adcs	r2, r2
    19fe:	0a43      	lsrs	r3, r0, #9
    1a00:	428b      	cmp	r3, r1
    1a02:	d301      	bcc.n	1a08 <__divsi3+0x94>
    1a04:	024b      	lsls	r3, r1, #9
    1a06:	1ac0      	subs	r0, r0, r3
    1a08:	4152      	adcs	r2, r2
    1a0a:	0a03      	lsrs	r3, r0, #8
    1a0c:	428b      	cmp	r3, r1
    1a0e:	d301      	bcc.n	1a14 <__divsi3+0xa0>
    1a10:	020b      	lsls	r3, r1, #8
    1a12:	1ac0      	subs	r0, r0, r3
    1a14:	4152      	adcs	r2, r2
    1a16:	d2cd      	bcs.n	19b4 <__divsi3+0x40>
    1a18:	09c3      	lsrs	r3, r0, #7
    1a1a:	428b      	cmp	r3, r1
    1a1c:	d301      	bcc.n	1a22 <__divsi3+0xae>
    1a1e:	01cb      	lsls	r3, r1, #7
    1a20:	1ac0      	subs	r0, r0, r3
    1a22:	4152      	adcs	r2, r2
    1a24:	0983      	lsrs	r3, r0, #6
    1a26:	428b      	cmp	r3, r1
    1a28:	d301      	bcc.n	1a2e <__divsi3+0xba>
    1a2a:	018b      	lsls	r3, r1, #6
    1a2c:	1ac0      	subs	r0, r0, r3
    1a2e:	4152      	adcs	r2, r2
    1a30:	0943      	lsrs	r3, r0, #5
    1a32:	428b      	cmp	r3, r1
    1a34:	d301      	bcc.n	1a3a <__divsi3+0xc6>
    1a36:	014b      	lsls	r3, r1, #5
    1a38:	1ac0      	subs	r0, r0, r3
    1a3a:	4152      	adcs	r2, r2
    1a3c:	0903      	lsrs	r3, r0, #4
    1a3e:	428b      	cmp	r3, r1
    1a40:	d301      	bcc.n	1a46 <__divsi3+0xd2>
    1a42:	010b      	lsls	r3, r1, #4
    1a44:	1ac0      	subs	r0, r0, r3
    1a46:	4152      	adcs	r2, r2
    1a48:	08c3      	lsrs	r3, r0, #3
    1a4a:	428b      	cmp	r3, r1
    1a4c:	d301      	bcc.n	1a52 <__divsi3+0xde>
    1a4e:	00cb      	lsls	r3, r1, #3
    1a50:	1ac0      	subs	r0, r0, r3
    1a52:	4152      	adcs	r2, r2
    1a54:	0883      	lsrs	r3, r0, #2
    1a56:	428b      	cmp	r3, r1
    1a58:	d301      	bcc.n	1a5e <__divsi3+0xea>
    1a5a:	008b      	lsls	r3, r1, #2
    1a5c:	1ac0      	subs	r0, r0, r3
    1a5e:	4152      	adcs	r2, r2
    1a60:	0843      	lsrs	r3, r0, #1
    1a62:	428b      	cmp	r3, r1
    1a64:	d301      	bcc.n	1a6a <__divsi3+0xf6>
    1a66:	004b      	lsls	r3, r1, #1
    1a68:	1ac0      	subs	r0, r0, r3
    1a6a:	4152      	adcs	r2, r2
    1a6c:	1a41      	subs	r1, r0, r1
    1a6e:	d200      	bcs.n	1a72 <__divsi3+0xfe>
    1a70:	4601      	mov	r1, r0
    1a72:	4152      	adcs	r2, r2
    1a74:	4610      	mov	r0, r2
    1a76:	4770      	bx	lr
    1a78:	e05d      	b.n	1b36 <__divsi3+0x1c2>
    1a7a:	0fca      	lsrs	r2, r1, #31
    1a7c:	d000      	beq.n	1a80 <__divsi3+0x10c>
    1a7e:	4249      	negs	r1, r1
    1a80:	1003      	asrs	r3, r0, #32
    1a82:	d300      	bcc.n	1a86 <__divsi3+0x112>
    1a84:	4240      	negs	r0, r0
    1a86:	4053      	eors	r3, r2
    1a88:	2200      	movs	r2, #0
    1a8a:	469c      	mov	ip, r3
    1a8c:	0903      	lsrs	r3, r0, #4
    1a8e:	428b      	cmp	r3, r1
    1a90:	d32d      	bcc.n	1aee <__divsi3+0x17a>
    1a92:	0a03      	lsrs	r3, r0, #8
    1a94:	428b      	cmp	r3, r1
    1a96:	d312      	bcc.n	1abe <__divsi3+0x14a>
    1a98:	22fc      	movs	r2, #252	; 0xfc
    1a9a:	0189      	lsls	r1, r1, #6
    1a9c:	ba12      	rev	r2, r2
    1a9e:	0a03      	lsrs	r3, r0, #8
    1aa0:	428b      	cmp	r3, r1
    1aa2:	d30c      	bcc.n	1abe <__divsi3+0x14a>
    1aa4:	0189      	lsls	r1, r1, #6
    1aa6:	1192      	asrs	r2, r2, #6
    1aa8:	428b      	cmp	r3, r1
    1aaa:	d308      	bcc.n	1abe <__divsi3+0x14a>
    1aac:	0189      	lsls	r1, r1, #6
    1aae:	1192      	asrs	r2, r2, #6
    1ab0:	428b      	cmp	r3, r1
    1ab2:	d304      	bcc.n	1abe <__divsi3+0x14a>
    1ab4:	0189      	lsls	r1, r1, #6
    1ab6:	d03a      	beq.n	1b2e <__divsi3+0x1ba>
    1ab8:	1192      	asrs	r2, r2, #6
    1aba:	e000      	b.n	1abe <__divsi3+0x14a>
    1abc:	0989      	lsrs	r1, r1, #6
    1abe:	09c3      	lsrs	r3, r0, #7
    1ac0:	428b      	cmp	r3, r1
    1ac2:	d301      	bcc.n	1ac8 <__divsi3+0x154>
    1ac4:	01cb      	lsls	r3, r1, #7
    1ac6:	1ac0      	subs	r0, r0, r3
    1ac8:	4152      	adcs	r2, r2
    1aca:	0983      	lsrs	r3, r0, #6
    1acc:	428b      	cmp	r3, r1
    1ace:	d301      	bcc.n	1ad4 <__divsi3+0x160>
    1ad0:	018b      	lsls	r3, r1, #6
    1ad2:	1ac0      	subs	r0, r0, r3
    1ad4:	4152      	adcs	r2, r2
    1ad6:	0943      	lsrs	r3, r0, #5
    1ad8:	428b      	cmp	r3, r1
    1ada:	d301      	bcc.n	1ae0 <__divsi3+0x16c>
    1adc:	014b      	lsls	r3, r1, #5
    1ade:	1ac0      	subs	r0, r0, r3
    1ae0:	4152      	adcs	r2, r2
    1ae2:	0903      	lsrs	r3, r0, #4
    1ae4:	428b      	cmp	r3, r1
    1ae6:	d301      	bcc.n	1aec <__divsi3+0x178>
    1ae8:	010b      	lsls	r3, r1, #4
    1aea:	1ac0      	subs	r0, r0, r3
    1aec:	4152      	adcs	r2, r2
    1aee:	08c3      	lsrs	r3, r0, #3
    1af0:	428b      	cmp	r3, r1
    1af2:	d301      	bcc.n	1af8 <__divsi3+0x184>
    1af4:	00cb      	lsls	r3, r1, #3
    1af6:	1ac0      	subs	r0, r0, r3
    1af8:	4152      	adcs	r2, r2
    1afa:	0883      	lsrs	r3, r0, #2
    1afc:	428b      	cmp	r3, r1
    1afe:	d301      	bcc.n	1b04 <__divsi3+0x190>
    1b00:	008b      	lsls	r3, r1, #2
    1b02:	1ac0      	subs	r0, r0, r3
    1b04:	4152      	adcs	r2, r2
    1b06:	d2d9      	bcs.n	1abc <__divsi3+0x148>
    1b08:	0843      	lsrs	r3, r0, #1
    1b0a:	428b      	cmp	r3, r1
    1b0c:	d301      	bcc.n	1b12 <__divsi3+0x19e>
    1b0e:	004b      	lsls	r3, r1, #1
    1b10:	1ac0      	subs	r0, r0, r3
    1b12:	4152      	adcs	r2, r2
    1b14:	1a41      	subs	r1, r0, r1
    1b16:	d200      	bcs.n	1b1a <__divsi3+0x1a6>
    1b18:	4601      	mov	r1, r0
    1b1a:	4663      	mov	r3, ip
    1b1c:	4152      	adcs	r2, r2
    1b1e:	105b      	asrs	r3, r3, #1
    1b20:	4610      	mov	r0, r2
    1b22:	d301      	bcc.n	1b28 <__divsi3+0x1b4>
    1b24:	4240      	negs	r0, r0
    1b26:	2b00      	cmp	r3, #0
    1b28:	d500      	bpl.n	1b2c <__divsi3+0x1b8>
    1b2a:	4249      	negs	r1, r1
    1b2c:	4770      	bx	lr
    1b2e:	4663      	mov	r3, ip
    1b30:	105b      	asrs	r3, r3, #1
    1b32:	d300      	bcc.n	1b36 <__divsi3+0x1c2>
    1b34:	4240      	negs	r0, r0
    1b36:	b501      	push	{r0, lr}
    1b38:	2000      	movs	r0, #0
    1b3a:	f000 f805 	bl	1b48 <__aeabi_idiv0>
    1b3e:	bd02      	pop	{r1, pc}

00001b40 <__aeabi_idivmod>:
    1b40:	2900      	cmp	r1, #0
    1b42:	d0f8      	beq.n	1b36 <__divsi3+0x1c2>
    1b44:	e716      	b.n	1974 <__divsi3>
    1b46:	4770      	bx	lr

00001b48 <__aeabi_idiv0>:
    1b48:	4770      	bx	lr
    1b4a:	46c0      	nop			; (mov r8, r8)

00001b4c <__cxa_atexit>:
    1b4c:	b510      	push	{r4, lr}
    1b4e:	0013      	movs	r3, r2
    1b50:	000a      	movs	r2, r1
    1b52:	0001      	movs	r1, r0
    1b54:	2002      	movs	r0, #2
    1b56:	f000 fb4f 	bl	21f8 <__register_exitproc>
    1b5a:	bd10      	pop	{r4, pc}

00001b5c <__libc_init_array>:
    1b5c:	b570      	push	{r4, r5, r6, lr}
    1b5e:	4e0d      	ldr	r6, [pc, #52]	; (1b94 <__libc_init_array+0x38>)
    1b60:	4d0d      	ldr	r5, [pc, #52]	; (1b98 <__libc_init_array+0x3c>)
    1b62:	2400      	movs	r4, #0
    1b64:	1bad      	subs	r5, r5, r6
    1b66:	10ad      	asrs	r5, r5, #2
    1b68:	d005      	beq.n	1b76 <__libc_init_array+0x1a>
    1b6a:	00a3      	lsls	r3, r4, #2
    1b6c:	58f3      	ldr	r3, [r6, r3]
    1b6e:	3401      	adds	r4, #1
    1b70:	4798      	blx	r3
    1b72:	42a5      	cmp	r5, r4
    1b74:	d1f9      	bne.n	1b6a <__libc_init_array+0xe>
    1b76:	f000 fd3f 	bl	25f8 <_init>
    1b7a:	4e08      	ldr	r6, [pc, #32]	; (1b9c <__libc_init_array+0x40>)
    1b7c:	4d08      	ldr	r5, [pc, #32]	; (1ba0 <__libc_init_array+0x44>)
    1b7e:	2400      	movs	r4, #0
    1b80:	1bad      	subs	r5, r5, r6
    1b82:	10ad      	asrs	r5, r5, #2
    1b84:	d005      	beq.n	1b92 <__libc_init_array+0x36>
    1b86:	00a3      	lsls	r3, r4, #2
    1b88:	58f3      	ldr	r3, [r6, r3]
    1b8a:	3401      	adds	r4, #1
    1b8c:	4798      	blx	r3
    1b8e:	42a5      	cmp	r5, r4
    1b90:	d1f9      	bne.n	1b86 <__libc_init_array+0x2a>
    1b92:	bd70      	pop	{r4, r5, r6, pc}
    1b94:	00002604 	.word	0x00002604
    1b98:	00002604 	.word	0x00002604
    1b9c:	00002604 	.word	0x00002604
    1ba0:	00002610 	.word	0x00002610

00001ba4 <malloc>:
    1ba4:	b510      	push	{r4, lr}
    1ba6:	4b03      	ldr	r3, [pc, #12]	; (1bb4 <malloc+0x10>)
    1ba8:	0001      	movs	r1, r0
    1baa:	6818      	ldr	r0, [r3, #0]
    1bac:	f000 f804 	bl	1bb8 <_malloc_r>
    1bb0:	bd10      	pop	{r4, pc}
    1bb2:	46c0      	nop			; (mov r8, r8)
    1bb4:	20000014 	.word	0x20000014

00001bb8 <_malloc_r>:
    1bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bba:	4657      	mov	r7, sl
    1bbc:	4645      	mov	r5, r8
    1bbe:	46de      	mov	lr, fp
    1bc0:	464e      	mov	r6, r9
    1bc2:	b5e0      	push	{r5, r6, r7, lr}
    1bc4:	000d      	movs	r5, r1
    1bc6:	350b      	adds	r5, #11
    1bc8:	b083      	sub	sp, #12
    1bca:	0007      	movs	r7, r0
    1bcc:	2d16      	cmp	r5, #22
    1bce:	d800      	bhi.n	1bd2 <_malloc_r+0x1a>
    1bd0:	e09f      	b.n	1d12 <_malloc_r+0x15a>
    1bd2:	2307      	movs	r3, #7
    1bd4:	439d      	bics	r5, r3
    1bd6:	d500      	bpl.n	1bda <_malloc_r+0x22>
    1bd8:	e0c4      	b.n	1d64 <_malloc_r+0x1ac>
    1bda:	42a9      	cmp	r1, r5
    1bdc:	d900      	bls.n	1be0 <_malloc_r+0x28>
    1bde:	e0c1      	b.n	1d64 <_malloc_r+0x1ac>
    1be0:	f000 fae8 	bl	21b4 <__malloc_lock>
    1be4:	23f8      	movs	r3, #248	; 0xf8
    1be6:	33ff      	adds	r3, #255	; 0xff
    1be8:	429d      	cmp	r5, r3
    1bea:	d800      	bhi.n	1bee <_malloc_r+0x36>
    1bec:	e28f      	b.n	210e <_malloc_r+0x556>
    1bee:	0a68      	lsrs	r0, r5, #9
    1bf0:	d100      	bne.n	1bf4 <_malloc_r+0x3c>
    1bf2:	e0bb      	b.n	1d6c <_malloc_r+0x1b4>
    1bf4:	2804      	cmp	r0, #4
    1bf6:	d900      	bls.n	1bfa <_malloc_r+0x42>
    1bf8:	e162      	b.n	1ec0 <_malloc_r+0x308>
    1bfa:	2338      	movs	r3, #56	; 0x38
    1bfc:	4698      	mov	r8, r3
    1bfe:	09a8      	lsrs	r0, r5, #6
    1c00:	4480      	add	r8, r0
    1c02:	3039      	adds	r0, #57	; 0x39
    1c04:	00c1      	lsls	r1, r0, #3
    1c06:	4ed2      	ldr	r6, [pc, #840]	; (1f50 <_malloc_r+0x398>)
    1c08:	1871      	adds	r1, r6, r1
    1c0a:	3908      	subs	r1, #8
    1c0c:	68cc      	ldr	r4, [r1, #12]
    1c0e:	42a1      	cmp	r1, r4
    1c10:	d019      	beq.n	1c46 <_malloc_r+0x8e>
    1c12:	2303      	movs	r3, #3
    1c14:	6862      	ldr	r2, [r4, #4]
    1c16:	439a      	bics	r2, r3
    1c18:	0013      	movs	r3, r2
    1c1a:	1b52      	subs	r2, r2, r5
    1c1c:	2a0f      	cmp	r2, #15
    1c1e:	dd00      	ble.n	1c22 <_malloc_r+0x6a>
    1c20:	e0aa      	b.n	1d78 <_malloc_r+0x1c0>
    1c22:	2a00      	cmp	r2, #0
    1c24:	db00      	blt.n	1c28 <_malloc_r+0x70>
    1c26:	e088      	b.n	1d3a <_malloc_r+0x182>
    1c28:	2303      	movs	r3, #3
    1c2a:	469c      	mov	ip, r3
    1c2c:	e008      	b.n	1c40 <_malloc_r+0x88>
    1c2e:	4662      	mov	r2, ip
    1c30:	6863      	ldr	r3, [r4, #4]
    1c32:	4393      	bics	r3, r2
    1c34:	1b5a      	subs	r2, r3, r5
    1c36:	2a0f      	cmp	r2, #15
    1c38:	dd00      	ble.n	1c3c <_malloc_r+0x84>
    1c3a:	e09d      	b.n	1d78 <_malloc_r+0x1c0>
    1c3c:	2a00      	cmp	r2, #0
    1c3e:	da7c      	bge.n	1d3a <_malloc_r+0x182>
    1c40:	68e4      	ldr	r4, [r4, #12]
    1c42:	42a1      	cmp	r1, r4
    1c44:	d1f3      	bne.n	1c2e <_malloc_r+0x76>
    1c46:	0032      	movs	r2, r6
    1c48:	6934      	ldr	r4, [r6, #16]
    1c4a:	3208      	adds	r2, #8
    1c4c:	4294      	cmp	r4, r2
    1c4e:	d100      	bne.n	1c52 <_malloc_r+0x9a>
    1c50:	e190      	b.n	1f74 <_malloc_r+0x3bc>
    1c52:	2303      	movs	r3, #3
    1c54:	6861      	ldr	r1, [r4, #4]
    1c56:	4399      	bics	r1, r3
    1c58:	4689      	mov	r9, r1
    1c5a:	1b49      	subs	r1, r1, r5
    1c5c:	290f      	cmp	r1, #15
    1c5e:	dd00      	ble.n	1c62 <_malloc_r+0xaa>
    1c60:	e162      	b.n	1f28 <_malloc_r+0x370>
    1c62:	6172      	str	r2, [r6, #20]
    1c64:	6132      	str	r2, [r6, #16]
    1c66:	2900      	cmp	r1, #0
    1c68:	db00      	blt.n	1c6c <_malloc_r+0xb4>
    1c6a:	e087      	b.n	1d7c <_malloc_r+0x1c4>
    1c6c:	4ab9      	ldr	r2, [pc, #740]	; (1f54 <_malloc_r+0x39c>)
    1c6e:	464b      	mov	r3, r9
    1c70:	4591      	cmp	r9, r2
    1c72:	d900      	bls.n	1c76 <_malloc_r+0xbe>
    1c74:	e130      	b.n	1ed8 <_malloc_r+0x320>
    1c76:	08db      	lsrs	r3, r3, #3
    1c78:	3aff      	subs	r2, #255	; 0xff
    1c7a:	1099      	asrs	r1, r3, #2
    1c7c:	3aff      	subs	r2, #255	; 0xff
    1c7e:	408a      	lsls	r2, r1
    1c80:	00db      	lsls	r3, r3, #3
    1c82:	6871      	ldr	r1, [r6, #4]
    1c84:	199b      	adds	r3, r3, r6
    1c86:	430a      	orrs	r2, r1
    1c88:	6899      	ldr	r1, [r3, #8]
    1c8a:	6072      	str	r2, [r6, #4]
    1c8c:	60e3      	str	r3, [r4, #12]
    1c8e:	60a1      	str	r1, [r4, #8]
    1c90:	609c      	str	r4, [r3, #8]
    1c92:	0013      	movs	r3, r2
    1c94:	60cc      	str	r4, [r1, #12]
    1c96:	2101      	movs	r1, #1
    1c98:	1082      	asrs	r2, r0, #2
    1c9a:	4091      	lsls	r1, r2
    1c9c:	4299      	cmp	r1, r3
    1c9e:	d86f      	bhi.n	1d80 <_malloc_r+0x1c8>
    1ca0:	420b      	tst	r3, r1
    1ca2:	d105      	bne.n	1cb0 <_malloc_r+0xf8>
    1ca4:	2203      	movs	r2, #3
    1ca6:	4390      	bics	r0, r2
    1ca8:	0049      	lsls	r1, r1, #1
    1caa:	3004      	adds	r0, #4
    1cac:	420b      	tst	r3, r1
    1cae:	d0fb      	beq.n	1ca8 <_malloc_r+0xf0>
    1cb0:	2303      	movs	r3, #3
    1cb2:	4698      	mov	r8, r3
    1cb4:	00c3      	lsls	r3, r0, #3
    1cb6:	4699      	mov	r9, r3
    1cb8:	44b1      	add	r9, r6
    1cba:	46cc      	mov	ip, r9
    1cbc:	4682      	mov	sl, r0
    1cbe:	4663      	mov	r3, ip
    1cc0:	68dc      	ldr	r4, [r3, #12]
    1cc2:	45a4      	cmp	ip, r4
    1cc4:	d107      	bne.n	1cd6 <_malloc_r+0x11e>
    1cc6:	e157      	b.n	1f78 <_malloc_r+0x3c0>
    1cc8:	2a00      	cmp	r2, #0
    1cca:	db00      	blt.n	1cce <_malloc_r+0x116>
    1ccc:	e166      	b.n	1f9c <_malloc_r+0x3e4>
    1cce:	68e4      	ldr	r4, [r4, #12]
    1cd0:	45a4      	cmp	ip, r4
    1cd2:	d100      	bne.n	1cd6 <_malloc_r+0x11e>
    1cd4:	e150      	b.n	1f78 <_malloc_r+0x3c0>
    1cd6:	4642      	mov	r2, r8
    1cd8:	6863      	ldr	r3, [r4, #4]
    1cda:	4393      	bics	r3, r2
    1cdc:	1b5a      	subs	r2, r3, r5
    1cde:	2a0f      	cmp	r2, #15
    1ce0:	ddf2      	ble.n	1cc8 <_malloc_r+0x110>
    1ce2:	2001      	movs	r0, #1
    1ce4:	4680      	mov	r8, r0
    1ce6:	1961      	adds	r1, r4, r5
    1ce8:	4305      	orrs	r5, r0
    1cea:	6065      	str	r5, [r4, #4]
    1cec:	68a0      	ldr	r0, [r4, #8]
    1cee:	68e5      	ldr	r5, [r4, #12]
    1cf0:	3608      	adds	r6, #8
    1cf2:	60c5      	str	r5, [r0, #12]
    1cf4:	60a8      	str	r0, [r5, #8]
    1cf6:	4640      	mov	r0, r8
    1cf8:	60f1      	str	r1, [r6, #12]
    1cfa:	60b1      	str	r1, [r6, #8]
    1cfc:	4310      	orrs	r0, r2
    1cfe:	6048      	str	r0, [r1, #4]
    1d00:	60ce      	str	r6, [r1, #12]
    1d02:	608e      	str	r6, [r1, #8]
    1d04:	0038      	movs	r0, r7
    1d06:	50e2      	str	r2, [r4, r3]
    1d08:	f000 fa5c 	bl	21c4 <__malloc_unlock>
    1d0c:	0020      	movs	r0, r4
    1d0e:	3008      	adds	r0, #8
    1d10:	e021      	b.n	1d56 <_malloc_r+0x19e>
    1d12:	2910      	cmp	r1, #16
    1d14:	d826      	bhi.n	1d64 <_malloc_r+0x1ac>
    1d16:	0038      	movs	r0, r7
    1d18:	f000 fa4c 	bl	21b4 <__malloc_lock>
    1d1c:	2510      	movs	r5, #16
    1d1e:	2318      	movs	r3, #24
    1d20:	2002      	movs	r0, #2
    1d22:	4e8b      	ldr	r6, [pc, #556]	; (1f50 <_malloc_r+0x398>)
    1d24:	18f3      	adds	r3, r6, r3
    1d26:	001a      	movs	r2, r3
    1d28:	685c      	ldr	r4, [r3, #4]
    1d2a:	3a08      	subs	r2, #8
    1d2c:	4294      	cmp	r4, r2
    1d2e:	d100      	bne.n	1d32 <_malloc_r+0x17a>
    1d30:	e12e      	b.n	1f90 <_malloc_r+0x3d8>
    1d32:	2303      	movs	r3, #3
    1d34:	6862      	ldr	r2, [r4, #4]
    1d36:	439a      	bics	r2, r3
    1d38:	0013      	movs	r3, r2
    1d3a:	68e2      	ldr	r2, [r4, #12]
    1d3c:	68a1      	ldr	r1, [r4, #8]
    1d3e:	60ca      	str	r2, [r1, #12]
    1d40:	6091      	str	r1, [r2, #8]
    1d42:	2201      	movs	r2, #1
    1d44:	18e3      	adds	r3, r4, r3
    1d46:	6859      	ldr	r1, [r3, #4]
    1d48:	0038      	movs	r0, r7
    1d4a:	430a      	orrs	r2, r1
    1d4c:	605a      	str	r2, [r3, #4]
    1d4e:	f000 fa39 	bl	21c4 <__malloc_unlock>
    1d52:	0020      	movs	r0, r4
    1d54:	3008      	adds	r0, #8
    1d56:	b003      	add	sp, #12
    1d58:	bc3c      	pop	{r2, r3, r4, r5}
    1d5a:	4690      	mov	r8, r2
    1d5c:	4699      	mov	r9, r3
    1d5e:	46a2      	mov	sl, r4
    1d60:	46ab      	mov	fp, r5
    1d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d64:	230c      	movs	r3, #12
    1d66:	2000      	movs	r0, #0
    1d68:	603b      	str	r3, [r7, #0]
    1d6a:	e7f4      	b.n	1d56 <_malloc_r+0x19e>
    1d6c:	2180      	movs	r1, #128	; 0x80
    1d6e:	233f      	movs	r3, #63	; 0x3f
    1d70:	2040      	movs	r0, #64	; 0x40
    1d72:	0089      	lsls	r1, r1, #2
    1d74:	4698      	mov	r8, r3
    1d76:	e746      	b.n	1c06 <_malloc_r+0x4e>
    1d78:	4640      	mov	r0, r8
    1d7a:	e764      	b.n	1c46 <_malloc_r+0x8e>
    1d7c:	464b      	mov	r3, r9
    1d7e:	e7e0      	b.n	1d42 <_malloc_r+0x18a>
    1d80:	2303      	movs	r3, #3
    1d82:	68b4      	ldr	r4, [r6, #8]
    1d84:	6862      	ldr	r2, [r4, #4]
    1d86:	439a      	bics	r2, r3
    1d88:	4690      	mov	r8, r2
    1d8a:	42aa      	cmp	r2, r5
    1d8c:	d303      	bcc.n	1d96 <_malloc_r+0x1de>
    1d8e:	1b53      	subs	r3, r2, r5
    1d90:	2b0f      	cmp	r3, #15
    1d92:	dd00      	ble.n	1d96 <_malloc_r+0x1de>
    1d94:	e086      	b.n	1ea4 <_malloc_r+0x2ec>
    1d96:	0023      	movs	r3, r4
    1d98:	4443      	add	r3, r8
    1d9a:	4a6f      	ldr	r2, [pc, #444]	; (1f58 <_malloc_r+0x3a0>)
    1d9c:	9301      	str	r3, [sp, #4]
    1d9e:	4b6f      	ldr	r3, [pc, #444]	; (1f5c <_malloc_r+0x3a4>)
    1da0:	4693      	mov	fp, r2
    1da2:	681b      	ldr	r3, [r3, #0]
    1da4:	6812      	ldr	r2, [r2, #0]
    1da6:	18eb      	adds	r3, r5, r3
    1da8:	3201      	adds	r2, #1
    1daa:	d100      	bne.n	1dae <_malloc_r+0x1f6>
    1dac:	e168      	b.n	2080 <_malloc_r+0x4c8>
    1dae:	4a6c      	ldr	r2, [pc, #432]	; (1f60 <_malloc_r+0x3a8>)
    1db0:	4694      	mov	ip, r2
    1db2:	4463      	add	r3, ip
    1db4:	0b1b      	lsrs	r3, r3, #12
    1db6:	031b      	lsls	r3, r3, #12
    1db8:	9300      	str	r3, [sp, #0]
    1dba:	9900      	ldr	r1, [sp, #0]
    1dbc:	0038      	movs	r0, r7
    1dbe:	f000 fa09 	bl	21d4 <_sbrk_r>
    1dc2:	0003      	movs	r3, r0
    1dc4:	4681      	mov	r9, r0
    1dc6:	3301      	adds	r3, #1
    1dc8:	d061      	beq.n	1e8e <_malloc_r+0x2d6>
    1dca:	9b01      	ldr	r3, [sp, #4]
    1dcc:	4283      	cmp	r3, r0
    1dce:	d900      	bls.n	1dd2 <_malloc_r+0x21a>
    1dd0:	e0ff      	b.n	1fd2 <_malloc_r+0x41a>
    1dd2:	4b64      	ldr	r3, [pc, #400]	; (1f64 <_malloc_r+0x3ac>)
    1dd4:	9a00      	ldr	r2, [sp, #0]
    1dd6:	469a      	mov	sl, r3
    1dd8:	681b      	ldr	r3, [r3, #0]
    1dda:	469c      	mov	ip, r3
    1ddc:	4653      	mov	r3, sl
    1dde:	4462      	add	r2, ip
    1de0:	601a      	str	r2, [r3, #0]
    1de2:	9b01      	ldr	r3, [sp, #4]
    1de4:	0011      	movs	r1, r2
    1de6:	4283      	cmp	r3, r0
    1de8:	d100      	bne.n	1dec <_malloc_r+0x234>
    1dea:	e155      	b.n	2098 <_malloc_r+0x4e0>
    1dec:	465b      	mov	r3, fp
    1dee:	681b      	ldr	r3, [r3, #0]
    1df0:	3301      	adds	r3, #1
    1df2:	d100      	bne.n	1df6 <_malloc_r+0x23e>
    1df4:	e16c      	b.n	20d0 <_malloc_r+0x518>
    1df6:	464b      	mov	r3, r9
    1df8:	9a01      	ldr	r2, [sp, #4]
    1dfa:	1a9b      	subs	r3, r3, r2
    1dfc:	1859      	adds	r1, r3, r1
    1dfe:	4653      	mov	r3, sl
    1e00:	6019      	str	r1, [r3, #0]
    1e02:	2307      	movs	r3, #7
    1e04:	464a      	mov	r2, r9
    1e06:	4013      	ands	r3, r2
    1e08:	d100      	bne.n	1e0c <_malloc_r+0x254>
    1e0a:	e124      	b.n	2056 <_malloc_r+0x49e>
    1e0c:	2108      	movs	r1, #8
    1e0e:	4689      	mov	r9, r1
    1e10:	4955      	ldr	r1, [pc, #340]	; (1f68 <_malloc_r+0x3b0>)
    1e12:	1ad2      	subs	r2, r2, r3
    1e14:	4491      	add	r9, r2
    1e16:	1acb      	subs	r3, r1, r3
    1e18:	9a00      	ldr	r2, [sp, #0]
    1e1a:	0038      	movs	r0, r7
    1e1c:	444a      	add	r2, r9
    1e1e:	0511      	lsls	r1, r2, #20
    1e20:	0d09      	lsrs	r1, r1, #20
    1e22:	1a5b      	subs	r3, r3, r1
    1e24:	0019      	movs	r1, r3
    1e26:	469b      	mov	fp, r3
    1e28:	f000 f9d4 	bl	21d4 <_sbrk_r>
    1e2c:	1c43      	adds	r3, r0, #1
    1e2e:	d100      	bne.n	1e32 <_malloc_r+0x27a>
    1e30:	e142      	b.n	20b8 <_malloc_r+0x500>
    1e32:	464b      	mov	r3, r9
    1e34:	1ac0      	subs	r0, r0, r3
    1e36:	2301      	movs	r3, #1
    1e38:	4458      	add	r0, fp
    1e3a:	4318      	orrs	r0, r3
    1e3c:	4653      	mov	r3, sl
    1e3e:	681b      	ldr	r3, [r3, #0]
    1e40:	445b      	add	r3, fp
    1e42:	0019      	movs	r1, r3
    1e44:	4653      	mov	r3, sl
    1e46:	6019      	str	r1, [r3, #0]
    1e48:	464b      	mov	r3, r9
    1e4a:	60b3      	str	r3, [r6, #8]
    1e4c:	6058      	str	r0, [r3, #4]
    1e4e:	42b4      	cmp	r4, r6
    1e50:	d013      	beq.n	1e7a <_malloc_r+0x2c2>
    1e52:	4643      	mov	r3, r8
    1e54:	2b0f      	cmp	r3, #15
    1e56:	d800      	bhi.n	1e5a <_malloc_r+0x2a2>
    1e58:	e0e8      	b.n	202c <_malloc_r+0x474>
    1e5a:	4643      	mov	r3, r8
    1e5c:	2207      	movs	r2, #7
    1e5e:	6860      	ldr	r0, [r4, #4]
    1e60:	3b0c      	subs	r3, #12
    1e62:	4393      	bics	r3, r2
    1e64:	3a06      	subs	r2, #6
    1e66:	4002      	ands	r2, r0
    1e68:	2005      	movs	r0, #5
    1e6a:	431a      	orrs	r2, r3
    1e6c:	6062      	str	r2, [r4, #4]
    1e6e:	18e2      	adds	r2, r4, r3
    1e70:	6050      	str	r0, [r2, #4]
    1e72:	6090      	str	r0, [r2, #8]
    1e74:	2b0f      	cmp	r3, #15
    1e76:	d900      	bls.n	1e7a <_malloc_r+0x2c2>
    1e78:	e122      	b.n	20c0 <_malloc_r+0x508>
    1e7a:	4b3c      	ldr	r3, [pc, #240]	; (1f6c <_malloc_r+0x3b4>)
    1e7c:	681a      	ldr	r2, [r3, #0]
    1e7e:	4291      	cmp	r1, r2
    1e80:	d900      	bls.n	1e84 <_malloc_r+0x2cc>
    1e82:	6019      	str	r1, [r3, #0]
    1e84:	4b3a      	ldr	r3, [pc, #232]	; (1f70 <_malloc_r+0x3b8>)
    1e86:	681a      	ldr	r2, [r3, #0]
    1e88:	4291      	cmp	r1, r2
    1e8a:	d900      	bls.n	1e8e <_malloc_r+0x2d6>
    1e8c:	6019      	str	r1, [r3, #0]
    1e8e:	2303      	movs	r3, #3
    1e90:	68b4      	ldr	r4, [r6, #8]
    1e92:	6862      	ldr	r2, [r4, #4]
    1e94:	439a      	bics	r2, r3
    1e96:	1b53      	subs	r3, r2, r5
    1e98:	4295      	cmp	r5, r2
    1e9a:	d900      	bls.n	1e9e <_malloc_r+0x2e6>
    1e9c:	e0c9      	b.n	2032 <_malloc_r+0x47a>
    1e9e:	2b0f      	cmp	r3, #15
    1ea0:	dc00      	bgt.n	1ea4 <_malloc_r+0x2ec>
    1ea2:	e0c6      	b.n	2032 <_malloc_r+0x47a>
    1ea4:	2201      	movs	r2, #1
    1ea6:	0029      	movs	r1, r5
    1ea8:	4313      	orrs	r3, r2
    1eaa:	4311      	orrs	r1, r2
    1eac:	1965      	adds	r5, r4, r5
    1eae:	6061      	str	r1, [r4, #4]
    1eb0:	0038      	movs	r0, r7
    1eb2:	60b5      	str	r5, [r6, #8]
    1eb4:	606b      	str	r3, [r5, #4]
    1eb6:	f000 f985 	bl	21c4 <__malloc_unlock>
    1eba:	0020      	movs	r0, r4
    1ebc:	3008      	adds	r0, #8
    1ebe:	e74a      	b.n	1d56 <_malloc_r+0x19e>
    1ec0:	2814      	cmp	r0, #20
    1ec2:	d97a      	bls.n	1fba <_malloc_r+0x402>
    1ec4:	2854      	cmp	r0, #84	; 0x54
    1ec6:	d900      	bls.n	1eca <_malloc_r+0x312>
    1ec8:	e0ba      	b.n	2040 <_malloc_r+0x488>
    1eca:	236e      	movs	r3, #110	; 0x6e
    1ecc:	4698      	mov	r8, r3
    1ece:	0b28      	lsrs	r0, r5, #12
    1ed0:	4480      	add	r8, r0
    1ed2:	306f      	adds	r0, #111	; 0x6f
    1ed4:	00c1      	lsls	r1, r0, #3
    1ed6:	e696      	b.n	1c06 <_malloc_r+0x4e>
    1ed8:	0a5a      	lsrs	r2, r3, #9
    1eda:	2a04      	cmp	r2, #4
    1edc:	d973      	bls.n	1fc6 <_malloc_r+0x40e>
    1ede:	2a14      	cmp	r2, #20
    1ee0:	d900      	bls.n	1ee4 <_malloc_r+0x32c>
    1ee2:	e0d0      	b.n	2086 <_malloc_r+0x4ce>
    1ee4:	0011      	movs	r1, r2
    1ee6:	325c      	adds	r2, #92	; 0x5c
    1ee8:	315b      	adds	r1, #91	; 0x5b
    1eea:	00d2      	lsls	r2, r2, #3
    1eec:	2308      	movs	r3, #8
    1eee:	425b      	negs	r3, r3
    1ef0:	469c      	mov	ip, r3
    1ef2:	18b2      	adds	r2, r6, r2
    1ef4:	4494      	add	ip, r2
    1ef6:	4663      	mov	r3, ip
    1ef8:	689a      	ldr	r2, [r3, #8]
    1efa:	2303      	movs	r3, #3
    1efc:	4698      	mov	r8, r3
    1efe:	4594      	cmp	ip, r2
    1f00:	d100      	bne.n	1f04 <_malloc_r+0x34c>
    1f02:	e0ab      	b.n	205c <_malloc_r+0x4a4>
    1f04:	4643      	mov	r3, r8
    1f06:	6851      	ldr	r1, [r2, #4]
    1f08:	4399      	bics	r1, r3
    1f0a:	4589      	cmp	r9, r1
    1f0c:	d300      	bcc.n	1f10 <_malloc_r+0x358>
    1f0e:	e095      	b.n	203c <_malloc_r+0x484>
    1f10:	6892      	ldr	r2, [r2, #8]
    1f12:	4594      	cmp	ip, r2
    1f14:	d1f6      	bne.n	1f04 <_malloc_r+0x34c>
    1f16:	4663      	mov	r3, ip
    1f18:	68da      	ldr	r2, [r3, #12]
    1f1a:	6873      	ldr	r3, [r6, #4]
    1f1c:	4661      	mov	r1, ip
    1f1e:	60e2      	str	r2, [r4, #12]
    1f20:	60a1      	str	r1, [r4, #8]
    1f22:	6094      	str	r4, [r2, #8]
    1f24:	60cc      	str	r4, [r1, #12]
    1f26:	e6b6      	b.n	1c96 <_malloc_r+0xde>
    1f28:	2301      	movs	r3, #1
    1f2a:	1960      	adds	r0, r4, r5
    1f2c:	431d      	orrs	r5, r3
    1f2e:	6065      	str	r5, [r4, #4]
    1f30:	6170      	str	r0, [r6, #20]
    1f32:	6130      	str	r0, [r6, #16]
    1f34:	60c2      	str	r2, [r0, #12]
    1f36:	6082      	str	r2, [r0, #8]
    1f38:	001a      	movs	r2, r3
    1f3a:	464b      	mov	r3, r9
    1f3c:	430a      	orrs	r2, r1
    1f3e:	6042      	str	r2, [r0, #4]
    1f40:	0038      	movs	r0, r7
    1f42:	50e1      	str	r1, [r4, r3]
    1f44:	f000 f93e 	bl	21c4 <__malloc_unlock>
    1f48:	0020      	movs	r0, r4
    1f4a:	3008      	adds	r0, #8
    1f4c:	e703      	b.n	1d56 <_malloc_r+0x19e>
    1f4e:	46c0      	nop			; (mov r8, r8)
    1f50:	20000440 	.word	0x20000440
    1f54:	000001ff 	.word	0x000001ff
    1f58:	20000848 	.word	0x20000848
    1f5c:	20000970 	.word	0x20000970
    1f60:	0000100f 	.word	0x0000100f
    1f64:	20000940 	.word	0x20000940
    1f68:	00001008 	.word	0x00001008
    1f6c:	20000968 	.word	0x20000968
    1f70:	2000096c 	.word	0x2000096c
    1f74:	6873      	ldr	r3, [r6, #4]
    1f76:	e68e      	b.n	1c96 <_malloc_r+0xde>
    1f78:	2308      	movs	r3, #8
    1f7a:	469b      	mov	fp, r3
    1f7c:	3b07      	subs	r3, #7
    1f7e:	44dc      	add	ip, fp
    1f80:	469b      	mov	fp, r3
    1f82:	44da      	add	sl, fp
    1f84:	4643      	mov	r3, r8
    1f86:	4652      	mov	r2, sl
    1f88:	4213      	tst	r3, r2
    1f8a:	d000      	beq.n	1f8e <_malloc_r+0x3d6>
    1f8c:	e697      	b.n	1cbe <_malloc_r+0x106>
    1f8e:	e037      	b.n	2000 <_malloc_r+0x448>
    1f90:	68dc      	ldr	r4, [r3, #12]
    1f92:	3002      	adds	r0, #2
    1f94:	42a3      	cmp	r3, r4
    1f96:	d100      	bne.n	1f9a <_malloc_r+0x3e2>
    1f98:	e655      	b.n	1c46 <_malloc_r+0x8e>
    1f9a:	e6ca      	b.n	1d32 <_malloc_r+0x17a>
    1f9c:	2201      	movs	r2, #1
    1f9e:	18e3      	adds	r3, r4, r3
    1fa0:	6859      	ldr	r1, [r3, #4]
    1fa2:	0038      	movs	r0, r7
    1fa4:	430a      	orrs	r2, r1
    1fa6:	605a      	str	r2, [r3, #4]
    1fa8:	68e3      	ldr	r3, [r4, #12]
    1faa:	68a2      	ldr	r2, [r4, #8]
    1fac:	60d3      	str	r3, [r2, #12]
    1fae:	609a      	str	r2, [r3, #8]
    1fb0:	f000 f908 	bl	21c4 <__malloc_unlock>
    1fb4:	0020      	movs	r0, r4
    1fb6:	3008      	adds	r0, #8
    1fb8:	e6cd      	b.n	1d56 <_malloc_r+0x19e>
    1fba:	235b      	movs	r3, #91	; 0x5b
    1fbc:	4698      	mov	r8, r3
    1fbe:	4480      	add	r8, r0
    1fc0:	305c      	adds	r0, #92	; 0x5c
    1fc2:	00c1      	lsls	r1, r0, #3
    1fc4:	e61f      	b.n	1c06 <_malloc_r+0x4e>
    1fc6:	099a      	lsrs	r2, r3, #6
    1fc8:	0011      	movs	r1, r2
    1fca:	3239      	adds	r2, #57	; 0x39
    1fcc:	3138      	adds	r1, #56	; 0x38
    1fce:	00d2      	lsls	r2, r2, #3
    1fd0:	e78c      	b.n	1eec <_malloc_r+0x334>
    1fd2:	42b4      	cmp	r4, r6
    1fd4:	d000      	beq.n	1fd8 <_malloc_r+0x420>
    1fd6:	e75a      	b.n	1e8e <_malloc_r+0x2d6>
    1fd8:	4b4f      	ldr	r3, [pc, #316]	; (2118 <_malloc_r+0x560>)
    1fda:	9a00      	ldr	r2, [sp, #0]
    1fdc:	469a      	mov	sl, r3
    1fde:	681b      	ldr	r3, [r3, #0]
    1fe0:	469c      	mov	ip, r3
    1fe2:	4653      	mov	r3, sl
    1fe4:	4462      	add	r2, ip
    1fe6:	0011      	movs	r1, r2
    1fe8:	601a      	str	r2, [r3, #0]
    1fea:	e6ff      	b.n	1dec <_malloc_r+0x234>
    1fec:	2308      	movs	r3, #8
    1fee:	425b      	negs	r3, r3
    1ff0:	469c      	mov	ip, r3
    1ff2:	44e1      	add	r9, ip
    1ff4:	464b      	mov	r3, r9
    1ff6:	689b      	ldr	r3, [r3, #8]
    1ff8:	3801      	subs	r0, #1
    1ffa:	4599      	cmp	r9, r3
    1ffc:	d000      	beq.n	2000 <_malloc_r+0x448>
    1ffe:	e084      	b.n	210a <_malloc_r+0x552>
    2000:	4643      	mov	r3, r8
    2002:	4203      	tst	r3, r0
    2004:	d1f2      	bne.n	1fec <_malloc_r+0x434>
    2006:	6873      	ldr	r3, [r6, #4]
    2008:	438b      	bics	r3, r1
    200a:	6073      	str	r3, [r6, #4]
    200c:	0049      	lsls	r1, r1, #1
    200e:	4299      	cmp	r1, r3
    2010:	d900      	bls.n	2014 <_malloc_r+0x45c>
    2012:	e6b5      	b.n	1d80 <_malloc_r+0x1c8>
    2014:	2900      	cmp	r1, #0
    2016:	d100      	bne.n	201a <_malloc_r+0x462>
    2018:	e6b2      	b.n	1d80 <_malloc_r+0x1c8>
    201a:	4650      	mov	r0, sl
    201c:	420b      	tst	r3, r1
    201e:	d000      	beq.n	2022 <_malloc_r+0x46a>
    2020:	e648      	b.n	1cb4 <_malloc_r+0xfc>
    2022:	0049      	lsls	r1, r1, #1
    2024:	3004      	adds	r0, #4
    2026:	420b      	tst	r3, r1
    2028:	d0fb      	beq.n	2022 <_malloc_r+0x46a>
    202a:	e643      	b.n	1cb4 <_malloc_r+0xfc>
    202c:	2301      	movs	r3, #1
    202e:	464a      	mov	r2, r9
    2030:	6053      	str	r3, [r2, #4]
    2032:	0038      	movs	r0, r7
    2034:	f000 f8c6 	bl	21c4 <__malloc_unlock>
    2038:	2000      	movs	r0, #0
    203a:	e68c      	b.n	1d56 <_malloc_r+0x19e>
    203c:	4694      	mov	ip, r2
    203e:	e76a      	b.n	1f16 <_malloc_r+0x35e>
    2040:	23aa      	movs	r3, #170	; 0xaa
    2042:	005b      	lsls	r3, r3, #1
    2044:	4298      	cmp	r0, r3
    2046:	d811      	bhi.n	206c <_malloc_r+0x4b4>
    2048:	3bdd      	subs	r3, #221	; 0xdd
    204a:	4698      	mov	r8, r3
    204c:	0be8      	lsrs	r0, r5, #15
    204e:	4480      	add	r8, r0
    2050:	3078      	adds	r0, #120	; 0x78
    2052:	00c1      	lsls	r1, r0, #3
    2054:	e5d7      	b.n	1c06 <_malloc_r+0x4e>
    2056:	2380      	movs	r3, #128	; 0x80
    2058:	015b      	lsls	r3, r3, #5
    205a:	e6dd      	b.n	1e18 <_malloc_r+0x260>
    205c:	1089      	asrs	r1, r1, #2
    205e:	3b02      	subs	r3, #2
    2060:	408b      	lsls	r3, r1
    2062:	6872      	ldr	r2, [r6, #4]
    2064:	4313      	orrs	r3, r2
    2066:	6073      	str	r3, [r6, #4]
    2068:	4662      	mov	r2, ip
    206a:	e757      	b.n	1f1c <_malloc_r+0x364>
    206c:	4b2b      	ldr	r3, [pc, #172]	; (211c <_malloc_r+0x564>)
    206e:	4298      	cmp	r0, r3
    2070:	d81c      	bhi.n	20ac <_malloc_r+0x4f4>
    2072:	237c      	movs	r3, #124	; 0x7c
    2074:	4698      	mov	r8, r3
    2076:	0ca8      	lsrs	r0, r5, #18
    2078:	4480      	add	r8, r0
    207a:	307d      	adds	r0, #125	; 0x7d
    207c:	00c1      	lsls	r1, r0, #3
    207e:	e5c2      	b.n	1c06 <_malloc_r+0x4e>
    2080:	3310      	adds	r3, #16
    2082:	9300      	str	r3, [sp, #0]
    2084:	e699      	b.n	1dba <_malloc_r+0x202>
    2086:	2a54      	cmp	r2, #84	; 0x54
    2088:	d826      	bhi.n	20d8 <_malloc_r+0x520>
    208a:	464b      	mov	r3, r9
    208c:	0b1a      	lsrs	r2, r3, #12
    208e:	0011      	movs	r1, r2
    2090:	326f      	adds	r2, #111	; 0x6f
    2092:	316e      	adds	r1, #110	; 0x6e
    2094:	00d2      	lsls	r2, r2, #3
    2096:	e729      	b.n	1eec <_malloc_r+0x334>
    2098:	051b      	lsls	r3, r3, #20
    209a:	d000      	beq.n	209e <_malloc_r+0x4e6>
    209c:	e6a6      	b.n	1dec <_malloc_r+0x234>
    209e:	2001      	movs	r0, #1
    20a0:	9b00      	ldr	r3, [sp, #0]
    20a2:	68b2      	ldr	r2, [r6, #8]
    20a4:	4443      	add	r3, r8
    20a6:	4303      	orrs	r3, r0
    20a8:	6053      	str	r3, [r2, #4]
    20aa:	e6e6      	b.n	1e7a <_malloc_r+0x2c2>
    20ac:	21fe      	movs	r1, #254	; 0xfe
    20ae:	237e      	movs	r3, #126	; 0x7e
    20b0:	207f      	movs	r0, #127	; 0x7f
    20b2:	0089      	lsls	r1, r1, #2
    20b4:	4698      	mov	r8, r3
    20b6:	e5a6      	b.n	1c06 <_malloc_r+0x4e>
    20b8:	2300      	movs	r3, #0
    20ba:	2001      	movs	r0, #1
    20bc:	469b      	mov	fp, r3
    20be:	e6bd      	b.n	1e3c <_malloc_r+0x284>
    20c0:	0021      	movs	r1, r4
    20c2:	0038      	movs	r0, r7
    20c4:	3108      	adds	r1, #8
    20c6:	f000 f98f 	bl	23e8 <_free_r>
    20ca:	4653      	mov	r3, sl
    20cc:	6819      	ldr	r1, [r3, #0]
    20ce:	e6d4      	b.n	1e7a <_malloc_r+0x2c2>
    20d0:	465b      	mov	r3, fp
    20d2:	464a      	mov	r2, r9
    20d4:	601a      	str	r2, [r3, #0]
    20d6:	e694      	b.n	1e02 <_malloc_r+0x24a>
    20d8:	21aa      	movs	r1, #170	; 0xaa
    20da:	0049      	lsls	r1, r1, #1
    20dc:	428a      	cmp	r2, r1
    20de:	d806      	bhi.n	20ee <_malloc_r+0x536>
    20e0:	464b      	mov	r3, r9
    20e2:	0bda      	lsrs	r2, r3, #15
    20e4:	0011      	movs	r1, r2
    20e6:	3278      	adds	r2, #120	; 0x78
    20e8:	3177      	adds	r1, #119	; 0x77
    20ea:	00d2      	lsls	r2, r2, #3
    20ec:	e6fe      	b.n	1eec <_malloc_r+0x334>
    20ee:	490b      	ldr	r1, [pc, #44]	; (211c <_malloc_r+0x564>)
    20f0:	428a      	cmp	r2, r1
    20f2:	d806      	bhi.n	2102 <_malloc_r+0x54a>
    20f4:	464b      	mov	r3, r9
    20f6:	0c9a      	lsrs	r2, r3, #18
    20f8:	0011      	movs	r1, r2
    20fa:	327d      	adds	r2, #125	; 0x7d
    20fc:	317c      	adds	r1, #124	; 0x7c
    20fe:	00d2      	lsls	r2, r2, #3
    2100:	e6f4      	b.n	1eec <_malloc_r+0x334>
    2102:	22fe      	movs	r2, #254	; 0xfe
    2104:	217e      	movs	r1, #126	; 0x7e
    2106:	0092      	lsls	r2, r2, #2
    2108:	e6f0      	b.n	1eec <_malloc_r+0x334>
    210a:	6873      	ldr	r3, [r6, #4]
    210c:	e77e      	b.n	200c <_malloc_r+0x454>
    210e:	002b      	movs	r3, r5
    2110:	08e8      	lsrs	r0, r5, #3
    2112:	3308      	adds	r3, #8
    2114:	e605      	b.n	1d22 <_malloc_r+0x16a>
    2116:	46c0      	nop			; (mov r8, r8)
    2118:	20000940 	.word	0x20000940
    211c:	00000554 	.word	0x00000554

00002120 <memset>:
    2120:	b5f0      	push	{r4, r5, r6, r7, lr}
    2122:	0783      	lsls	r3, r0, #30
    2124:	d043      	beq.n	21ae <memset+0x8e>
    2126:	1e54      	subs	r4, r2, #1
    2128:	2a00      	cmp	r2, #0
    212a:	d03f      	beq.n	21ac <memset+0x8c>
    212c:	b2ce      	uxtb	r6, r1
    212e:	0002      	movs	r2, r0
    2130:	2503      	movs	r5, #3
    2132:	e002      	b.n	213a <memset+0x1a>
    2134:	001a      	movs	r2, r3
    2136:	3c01      	subs	r4, #1
    2138:	d338      	bcc.n	21ac <memset+0x8c>
    213a:	1c53      	adds	r3, r2, #1
    213c:	7016      	strb	r6, [r2, #0]
    213e:	422b      	tst	r3, r5
    2140:	d1f8      	bne.n	2134 <memset+0x14>
    2142:	2c03      	cmp	r4, #3
    2144:	d92a      	bls.n	219c <memset+0x7c>
    2146:	22ff      	movs	r2, #255	; 0xff
    2148:	400a      	ands	r2, r1
    214a:	0215      	lsls	r5, r2, #8
    214c:	4315      	orrs	r5, r2
    214e:	042a      	lsls	r2, r5, #16
    2150:	4315      	orrs	r5, r2
    2152:	2c0f      	cmp	r4, #15
    2154:	d914      	bls.n	2180 <memset+0x60>
    2156:	0027      	movs	r7, r4
    2158:	001a      	movs	r2, r3
    215a:	3f10      	subs	r7, #16
    215c:	093e      	lsrs	r6, r7, #4
    215e:	3601      	adds	r6, #1
    2160:	0136      	lsls	r6, r6, #4
    2162:	199e      	adds	r6, r3, r6
    2164:	6015      	str	r5, [r2, #0]
    2166:	6055      	str	r5, [r2, #4]
    2168:	6095      	str	r5, [r2, #8]
    216a:	60d5      	str	r5, [r2, #12]
    216c:	3210      	adds	r2, #16
    216e:	4296      	cmp	r6, r2
    2170:	d1f8      	bne.n	2164 <memset+0x44>
    2172:	220f      	movs	r2, #15
    2174:	4397      	bics	r7, r2
    2176:	3710      	adds	r7, #16
    2178:	19db      	adds	r3, r3, r7
    217a:	4014      	ands	r4, r2
    217c:	2c03      	cmp	r4, #3
    217e:	d90d      	bls.n	219c <memset+0x7c>
    2180:	001a      	movs	r2, r3
    2182:	1f27      	subs	r7, r4, #4
    2184:	08be      	lsrs	r6, r7, #2
    2186:	3601      	adds	r6, #1
    2188:	00b6      	lsls	r6, r6, #2
    218a:	199e      	adds	r6, r3, r6
    218c:	c220      	stmia	r2!, {r5}
    218e:	42b2      	cmp	r2, r6
    2190:	d1fc      	bne.n	218c <memset+0x6c>
    2192:	2203      	movs	r2, #3
    2194:	4397      	bics	r7, r2
    2196:	3704      	adds	r7, #4
    2198:	19db      	adds	r3, r3, r7
    219a:	4014      	ands	r4, r2
    219c:	2c00      	cmp	r4, #0
    219e:	d005      	beq.n	21ac <memset+0x8c>
    21a0:	b2c9      	uxtb	r1, r1
    21a2:	191c      	adds	r4, r3, r4
    21a4:	7019      	strb	r1, [r3, #0]
    21a6:	3301      	adds	r3, #1
    21a8:	429c      	cmp	r4, r3
    21aa:	d1fb      	bne.n	21a4 <memset+0x84>
    21ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21ae:	0014      	movs	r4, r2
    21b0:	0003      	movs	r3, r0
    21b2:	e7c6      	b.n	2142 <memset+0x22>

000021b4 <__malloc_lock>:
    21b4:	b510      	push	{r4, lr}
    21b6:	4802      	ldr	r0, [pc, #8]	; (21c0 <__malloc_lock+0xc>)
    21b8:	f000 f9f4 	bl	25a4 <__retarget_lock_acquire_recursive>
    21bc:	bd10      	pop	{r4, pc}
    21be:	46c0      	nop			; (mov r8, r8)
    21c0:	200009dc 	.word	0x200009dc

000021c4 <__malloc_unlock>:
    21c4:	b510      	push	{r4, lr}
    21c6:	4802      	ldr	r0, [pc, #8]	; (21d0 <__malloc_unlock+0xc>)
    21c8:	f000 f9ee 	bl	25a8 <__retarget_lock_release_recursive>
    21cc:	bd10      	pop	{r4, pc}
    21ce:	46c0      	nop			; (mov r8, r8)
    21d0:	200009dc 	.word	0x200009dc

000021d4 <_sbrk_r>:
    21d4:	2300      	movs	r3, #0
    21d6:	b570      	push	{r4, r5, r6, lr}
    21d8:	4c06      	ldr	r4, [pc, #24]	; (21f4 <_sbrk_r+0x20>)
    21da:	0005      	movs	r5, r0
    21dc:	0008      	movs	r0, r1
    21de:	6023      	str	r3, [r4, #0]
    21e0:	f7ff fb24 	bl	182c <_sbrk>
    21e4:	1c43      	adds	r3, r0, #1
    21e6:	d000      	beq.n	21ea <_sbrk_r+0x16>
    21e8:	bd70      	pop	{r4, r5, r6, pc}
    21ea:	6823      	ldr	r3, [r4, #0]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d0fb      	beq.n	21e8 <_sbrk_r+0x14>
    21f0:	602b      	str	r3, [r5, #0]
    21f2:	e7f9      	b.n	21e8 <_sbrk_r+0x14>
    21f4:	200009f0 	.word	0x200009f0

000021f8 <__register_exitproc>:
    21f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    21fa:	464e      	mov	r6, r9
    21fc:	4645      	mov	r5, r8
    21fe:	46de      	mov	lr, fp
    2200:	4657      	mov	r7, sl
    2202:	b5e0      	push	{r5, r6, r7, lr}
    2204:	4d36      	ldr	r5, [pc, #216]	; (22e0 <__register_exitproc+0xe8>)
    2206:	b083      	sub	sp, #12
    2208:	0006      	movs	r6, r0
    220a:	6828      	ldr	r0, [r5, #0]
    220c:	4698      	mov	r8, r3
    220e:	000f      	movs	r7, r1
    2210:	4691      	mov	r9, r2
    2212:	f000 f9c7 	bl	25a4 <__retarget_lock_acquire_recursive>
    2216:	4b33      	ldr	r3, [pc, #204]	; (22e4 <__register_exitproc+0xec>)
    2218:	681c      	ldr	r4, [r3, #0]
    221a:	23a4      	movs	r3, #164	; 0xa4
    221c:	005b      	lsls	r3, r3, #1
    221e:	58e0      	ldr	r0, [r4, r3]
    2220:	2800      	cmp	r0, #0
    2222:	d052      	beq.n	22ca <__register_exitproc+0xd2>
    2224:	6843      	ldr	r3, [r0, #4]
    2226:	2b1f      	cmp	r3, #31
    2228:	dc13      	bgt.n	2252 <__register_exitproc+0x5a>
    222a:	1c5a      	adds	r2, r3, #1
    222c:	9201      	str	r2, [sp, #4]
    222e:	2e00      	cmp	r6, #0
    2230:	d128      	bne.n	2284 <__register_exitproc+0x8c>
    2232:	9a01      	ldr	r2, [sp, #4]
    2234:	3302      	adds	r3, #2
    2236:	009b      	lsls	r3, r3, #2
    2238:	6042      	str	r2, [r0, #4]
    223a:	501f      	str	r7, [r3, r0]
    223c:	6828      	ldr	r0, [r5, #0]
    223e:	f000 f9b3 	bl	25a8 <__retarget_lock_release_recursive>
    2242:	2000      	movs	r0, #0
    2244:	b003      	add	sp, #12
    2246:	bc3c      	pop	{r2, r3, r4, r5}
    2248:	4690      	mov	r8, r2
    224a:	4699      	mov	r9, r3
    224c:	46a2      	mov	sl, r4
    224e:	46ab      	mov	fp, r5
    2250:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2252:	4b25      	ldr	r3, [pc, #148]	; (22e8 <__register_exitproc+0xf0>)
    2254:	2b00      	cmp	r3, #0
    2256:	d03d      	beq.n	22d4 <__register_exitproc+0xdc>
    2258:	20c8      	movs	r0, #200	; 0xc8
    225a:	0040      	lsls	r0, r0, #1
    225c:	f7ff fca2 	bl	1ba4 <malloc>
    2260:	2800      	cmp	r0, #0
    2262:	d037      	beq.n	22d4 <__register_exitproc+0xdc>
    2264:	22a4      	movs	r2, #164	; 0xa4
    2266:	2300      	movs	r3, #0
    2268:	0052      	lsls	r2, r2, #1
    226a:	58a1      	ldr	r1, [r4, r2]
    226c:	6043      	str	r3, [r0, #4]
    226e:	6001      	str	r1, [r0, #0]
    2270:	50a0      	str	r0, [r4, r2]
    2272:	3240      	adds	r2, #64	; 0x40
    2274:	5083      	str	r3, [r0, r2]
    2276:	3204      	adds	r2, #4
    2278:	5083      	str	r3, [r0, r2]
    227a:	3301      	adds	r3, #1
    227c:	9301      	str	r3, [sp, #4]
    227e:	2300      	movs	r3, #0
    2280:	2e00      	cmp	r6, #0
    2282:	d0d6      	beq.n	2232 <__register_exitproc+0x3a>
    2284:	009a      	lsls	r2, r3, #2
    2286:	4692      	mov	sl, r2
    2288:	4482      	add	sl, r0
    228a:	464a      	mov	r2, r9
    228c:	2188      	movs	r1, #136	; 0x88
    228e:	4654      	mov	r4, sl
    2290:	5062      	str	r2, [r4, r1]
    2292:	22c4      	movs	r2, #196	; 0xc4
    2294:	0052      	lsls	r2, r2, #1
    2296:	4691      	mov	r9, r2
    2298:	4481      	add	r9, r0
    229a:	464a      	mov	r2, r9
    229c:	3987      	subs	r1, #135	; 0x87
    229e:	4099      	lsls	r1, r3
    22a0:	6812      	ldr	r2, [r2, #0]
    22a2:	468b      	mov	fp, r1
    22a4:	430a      	orrs	r2, r1
    22a6:	4694      	mov	ip, r2
    22a8:	464a      	mov	r2, r9
    22aa:	4661      	mov	r1, ip
    22ac:	6011      	str	r1, [r2, #0]
    22ae:	2284      	movs	r2, #132	; 0x84
    22b0:	4641      	mov	r1, r8
    22b2:	0052      	lsls	r2, r2, #1
    22b4:	50a1      	str	r1, [r4, r2]
    22b6:	2e02      	cmp	r6, #2
    22b8:	d1bb      	bne.n	2232 <__register_exitproc+0x3a>
    22ba:	0002      	movs	r2, r0
    22bc:	465c      	mov	r4, fp
    22be:	328d      	adds	r2, #141	; 0x8d
    22c0:	32ff      	adds	r2, #255	; 0xff
    22c2:	6811      	ldr	r1, [r2, #0]
    22c4:	430c      	orrs	r4, r1
    22c6:	6014      	str	r4, [r2, #0]
    22c8:	e7b3      	b.n	2232 <__register_exitproc+0x3a>
    22ca:	0020      	movs	r0, r4
    22cc:	304d      	adds	r0, #77	; 0x4d
    22ce:	30ff      	adds	r0, #255	; 0xff
    22d0:	50e0      	str	r0, [r4, r3]
    22d2:	e7a7      	b.n	2224 <__register_exitproc+0x2c>
    22d4:	6828      	ldr	r0, [r5, #0]
    22d6:	f000 f967 	bl	25a8 <__retarget_lock_release_recursive>
    22da:	2001      	movs	r0, #1
    22dc:	4240      	negs	r0, r0
    22de:	e7b1      	b.n	2244 <__register_exitproc+0x4c>
    22e0:	20000850 	.word	0x20000850
    22e4:	000025f4 	.word	0x000025f4
    22e8:	00001ba5 	.word	0x00001ba5

000022ec <register_fini>:
    22ec:	4b03      	ldr	r3, [pc, #12]	; (22fc <register_fini+0x10>)
    22ee:	b510      	push	{r4, lr}
    22f0:	2b00      	cmp	r3, #0
    22f2:	d002      	beq.n	22fa <register_fini+0xe>
    22f4:	4802      	ldr	r0, [pc, #8]	; (2300 <register_fini+0x14>)
    22f6:	f000 f805 	bl	2304 <atexit>
    22fa:	bd10      	pop	{r4, pc}
    22fc:	00000000 	.word	0x00000000
    2300:	00002315 	.word	0x00002315

00002304 <atexit>:
    2304:	b510      	push	{r4, lr}
    2306:	0001      	movs	r1, r0
    2308:	2300      	movs	r3, #0
    230a:	2200      	movs	r2, #0
    230c:	2000      	movs	r0, #0
    230e:	f7ff ff73 	bl	21f8 <__register_exitproc>
    2312:	bd10      	pop	{r4, pc}

00002314 <__libc_fini_array>:
    2314:	b570      	push	{r4, r5, r6, lr}
    2316:	4b09      	ldr	r3, [pc, #36]	; (233c <__libc_fini_array+0x28>)
    2318:	4c09      	ldr	r4, [pc, #36]	; (2340 <__libc_fini_array+0x2c>)
    231a:	1ae4      	subs	r4, r4, r3
    231c:	10a4      	asrs	r4, r4, #2
    231e:	d009      	beq.n	2334 <__libc_fini_array+0x20>
    2320:	4a08      	ldr	r2, [pc, #32]	; (2344 <__libc_fini_array+0x30>)
    2322:	18a5      	adds	r5, r4, r2
    2324:	00ad      	lsls	r5, r5, #2
    2326:	18ed      	adds	r5, r5, r3
    2328:	682b      	ldr	r3, [r5, #0]
    232a:	3c01      	subs	r4, #1
    232c:	4798      	blx	r3
    232e:	3d04      	subs	r5, #4
    2330:	2c00      	cmp	r4, #0
    2332:	d1f9      	bne.n	2328 <__libc_fini_array+0x14>
    2334:	f000 f96c 	bl	2610 <_fini>
    2338:	bd70      	pop	{r4, r5, r6, pc}
    233a:	46c0      	nop			; (mov r8, r8)
    233c:	0000261c 	.word	0x0000261c
    2340:	00002620 	.word	0x00002620
    2344:	3fffffff 	.word	0x3fffffff

00002348 <_malloc_trim_r>:
    2348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    234a:	000c      	movs	r4, r1
    234c:	0006      	movs	r6, r0
    234e:	f7ff ff31 	bl	21b4 <__malloc_lock>
    2352:	4f20      	ldr	r7, [pc, #128]	; (23d4 <_malloc_trim_r+0x8c>)
    2354:	68bb      	ldr	r3, [r7, #8]
    2356:	685d      	ldr	r5, [r3, #4]
    2358:	2303      	movs	r3, #3
    235a:	439d      	bics	r5, r3
    235c:	4b1e      	ldr	r3, [pc, #120]	; (23d8 <_malloc_trim_r+0x90>)
    235e:	1b2c      	subs	r4, r5, r4
    2360:	469c      	mov	ip, r3
    2362:	4464      	add	r4, ip
    2364:	0b24      	lsrs	r4, r4, #12
    2366:	4b1d      	ldr	r3, [pc, #116]	; (23dc <_malloc_trim_r+0x94>)
    2368:	3c01      	subs	r4, #1
    236a:	0324      	lsls	r4, r4, #12
    236c:	429c      	cmp	r4, r3
    236e:	dd07      	ble.n	2380 <_malloc_trim_r+0x38>
    2370:	2100      	movs	r1, #0
    2372:	0030      	movs	r0, r6
    2374:	f7ff ff2e 	bl	21d4 <_sbrk_r>
    2378:	68bb      	ldr	r3, [r7, #8]
    237a:	195b      	adds	r3, r3, r5
    237c:	4298      	cmp	r0, r3
    237e:	d004      	beq.n	238a <_malloc_trim_r+0x42>
    2380:	0030      	movs	r0, r6
    2382:	f7ff ff1f 	bl	21c4 <__malloc_unlock>
    2386:	2000      	movs	r0, #0
    2388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    238a:	4261      	negs	r1, r4
    238c:	0030      	movs	r0, r6
    238e:	f7ff ff21 	bl	21d4 <_sbrk_r>
    2392:	1c43      	adds	r3, r0, #1
    2394:	d00d      	beq.n	23b2 <_malloc_trim_r+0x6a>
    2396:	2201      	movs	r2, #1
    2398:	68bb      	ldr	r3, [r7, #8]
    239a:	1b2d      	subs	r5, r5, r4
    239c:	4315      	orrs	r5, r2
    239e:	605d      	str	r5, [r3, #4]
    23a0:	4b0f      	ldr	r3, [pc, #60]	; (23e0 <_malloc_trim_r+0x98>)
    23a2:	0030      	movs	r0, r6
    23a4:	681a      	ldr	r2, [r3, #0]
    23a6:	1b14      	subs	r4, r2, r4
    23a8:	601c      	str	r4, [r3, #0]
    23aa:	f7ff ff0b 	bl	21c4 <__malloc_unlock>
    23ae:	2001      	movs	r0, #1
    23b0:	e7ea      	b.n	2388 <_malloc_trim_r+0x40>
    23b2:	2100      	movs	r1, #0
    23b4:	0030      	movs	r0, r6
    23b6:	f7ff ff0d 	bl	21d4 <_sbrk_r>
    23ba:	68ba      	ldr	r2, [r7, #8]
    23bc:	1a83      	subs	r3, r0, r2
    23be:	2b0f      	cmp	r3, #15
    23c0:	ddde      	ble.n	2380 <_malloc_trim_r+0x38>
    23c2:	4908      	ldr	r1, [pc, #32]	; (23e4 <_malloc_trim_r+0x9c>)
    23c4:	6809      	ldr	r1, [r1, #0]
    23c6:	1a40      	subs	r0, r0, r1
    23c8:	4905      	ldr	r1, [pc, #20]	; (23e0 <_malloc_trim_r+0x98>)
    23ca:	6008      	str	r0, [r1, #0]
    23cc:	2101      	movs	r1, #1
    23ce:	430b      	orrs	r3, r1
    23d0:	6053      	str	r3, [r2, #4]
    23d2:	e7d5      	b.n	2380 <_malloc_trim_r+0x38>
    23d4:	20000440 	.word	0x20000440
    23d8:	00000fef 	.word	0x00000fef
    23dc:	00000fff 	.word	0x00000fff
    23e0:	20000940 	.word	0x20000940
    23e4:	20000848 	.word	0x20000848

000023e8 <_free_r>:
    23e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23ea:	0004      	movs	r4, r0
    23ec:	1e0d      	subs	r5, r1, #0
    23ee:	d03c      	beq.n	246a <_free_r+0x82>
    23f0:	f7ff fee0 	bl	21b4 <__malloc_lock>
    23f4:	0029      	movs	r1, r5
    23f6:	3908      	subs	r1, #8
    23f8:	6848      	ldr	r0, [r1, #4]
    23fa:	2301      	movs	r3, #1
    23fc:	0005      	movs	r5, r0
    23fe:	2603      	movs	r6, #3
    2400:	439d      	bics	r5, r3
    2402:	194a      	adds	r2, r1, r5
    2404:	469c      	mov	ip, r3
    2406:	4f61      	ldr	r7, [pc, #388]	; (258c <_free_r+0x1a4>)
    2408:	6853      	ldr	r3, [r2, #4]
    240a:	43b3      	bics	r3, r6
    240c:	68be      	ldr	r6, [r7, #8]
    240e:	42b2      	cmp	r2, r6
    2410:	d056      	beq.n	24c0 <_free_r+0xd8>
    2412:	4666      	mov	r6, ip
    2414:	6053      	str	r3, [r2, #4]
    2416:	4206      	tst	r6, r0
    2418:	d10a      	bne.n	2430 <_free_r+0x48>
    241a:	003e      	movs	r6, r7
    241c:	6808      	ldr	r0, [r1, #0]
    241e:	3608      	adds	r6, #8
    2420:	1a09      	subs	r1, r1, r0
    2422:	182d      	adds	r5, r5, r0
    2424:	6888      	ldr	r0, [r1, #8]
    2426:	42b0      	cmp	r0, r6
    2428:	d065      	beq.n	24f6 <_free_r+0x10e>
    242a:	68ce      	ldr	r6, [r1, #12]
    242c:	60c6      	str	r6, [r0, #12]
    242e:	60b0      	str	r0, [r6, #8]
    2430:	2001      	movs	r0, #1
    2432:	18d6      	adds	r6, r2, r3
    2434:	6876      	ldr	r6, [r6, #4]
    2436:	4206      	tst	r6, r0
    2438:	d033      	beq.n	24a2 <_free_r+0xba>
    243a:	4b55      	ldr	r3, [pc, #340]	; (2590 <_free_r+0x1a8>)
    243c:	4328      	orrs	r0, r5
    243e:	6048      	str	r0, [r1, #4]
    2440:	514d      	str	r5, [r1, r5]
    2442:	429d      	cmp	r5, r3
    2444:	d812      	bhi.n	246c <_free_r+0x84>
    2446:	08ed      	lsrs	r5, r5, #3
    2448:	3bff      	subs	r3, #255	; 0xff
    244a:	10aa      	asrs	r2, r5, #2
    244c:	3bff      	subs	r3, #255	; 0xff
    244e:	4093      	lsls	r3, r2
    2450:	687a      	ldr	r2, [r7, #4]
    2452:	00ed      	lsls	r5, r5, #3
    2454:	4313      	orrs	r3, r2
    2456:	607b      	str	r3, [r7, #4]
    2458:	19ef      	adds	r7, r5, r7
    245a:	68bb      	ldr	r3, [r7, #8]
    245c:	60cf      	str	r7, [r1, #12]
    245e:	608b      	str	r3, [r1, #8]
    2460:	60b9      	str	r1, [r7, #8]
    2462:	60d9      	str	r1, [r3, #12]
    2464:	0020      	movs	r0, r4
    2466:	f7ff fead 	bl	21c4 <__malloc_unlock>
    246a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    246c:	0a68      	lsrs	r0, r5, #9
    246e:	2804      	cmp	r0, #4
    2470:	d850      	bhi.n	2514 <_free_r+0x12c>
    2472:	09a8      	lsrs	r0, r5, #6
    2474:	0002      	movs	r2, r0
    2476:	3039      	adds	r0, #57	; 0x39
    2478:	3238      	adds	r2, #56	; 0x38
    247a:	00c0      	lsls	r0, r0, #3
    247c:	1838      	adds	r0, r7, r0
    247e:	3808      	subs	r0, #8
    2480:	6883      	ldr	r3, [r0, #8]
    2482:	2603      	movs	r6, #3
    2484:	4298      	cmp	r0, r3
    2486:	d04c      	beq.n	2522 <_free_r+0x13a>
    2488:	685a      	ldr	r2, [r3, #4]
    248a:	43b2      	bics	r2, r6
    248c:	4295      	cmp	r5, r2
    248e:	d230      	bcs.n	24f2 <_free_r+0x10a>
    2490:	689b      	ldr	r3, [r3, #8]
    2492:	4298      	cmp	r0, r3
    2494:	d1f8      	bne.n	2488 <_free_r+0xa0>
    2496:	68c3      	ldr	r3, [r0, #12]
    2498:	60cb      	str	r3, [r1, #12]
    249a:	6088      	str	r0, [r1, #8]
    249c:	6099      	str	r1, [r3, #8]
    249e:	60c1      	str	r1, [r0, #12]
    24a0:	e7e0      	b.n	2464 <_free_r+0x7c>
    24a2:	18ed      	adds	r5, r5, r3
    24a4:	4e3b      	ldr	r6, [pc, #236]	; (2594 <_free_r+0x1ac>)
    24a6:	6893      	ldr	r3, [r2, #8]
    24a8:	42b3      	cmp	r3, r6
    24aa:	d042      	beq.n	2532 <_free_r+0x14a>
    24ac:	68d2      	ldr	r2, [r2, #12]
    24ae:	4328      	orrs	r0, r5
    24b0:	60da      	str	r2, [r3, #12]
    24b2:	6093      	str	r3, [r2, #8]
    24b4:	4b36      	ldr	r3, [pc, #216]	; (2590 <_free_r+0x1a8>)
    24b6:	6048      	str	r0, [r1, #4]
    24b8:	514d      	str	r5, [r1, r5]
    24ba:	429d      	cmp	r5, r3
    24bc:	d8d6      	bhi.n	246c <_free_r+0x84>
    24be:	e7c2      	b.n	2446 <_free_r+0x5e>
    24c0:	4662      	mov	r2, ip
    24c2:	18eb      	adds	r3, r5, r3
    24c4:	4202      	tst	r2, r0
    24c6:	d106      	bne.n	24d6 <_free_r+0xee>
    24c8:	680a      	ldr	r2, [r1, #0]
    24ca:	1a89      	subs	r1, r1, r2
    24cc:	6888      	ldr	r0, [r1, #8]
    24ce:	189b      	adds	r3, r3, r2
    24d0:	68ca      	ldr	r2, [r1, #12]
    24d2:	60c2      	str	r2, [r0, #12]
    24d4:	6090      	str	r0, [r2, #8]
    24d6:	2201      	movs	r2, #1
    24d8:	431a      	orrs	r2, r3
    24da:	604a      	str	r2, [r1, #4]
    24dc:	4a2e      	ldr	r2, [pc, #184]	; (2598 <_free_r+0x1b0>)
    24de:	60b9      	str	r1, [r7, #8]
    24e0:	6812      	ldr	r2, [r2, #0]
    24e2:	4293      	cmp	r3, r2
    24e4:	d3be      	bcc.n	2464 <_free_r+0x7c>
    24e6:	4b2d      	ldr	r3, [pc, #180]	; (259c <_free_r+0x1b4>)
    24e8:	0020      	movs	r0, r4
    24ea:	6819      	ldr	r1, [r3, #0]
    24ec:	f7ff ff2c 	bl	2348 <_malloc_trim_r>
    24f0:	e7b8      	b.n	2464 <_free_r+0x7c>
    24f2:	0018      	movs	r0, r3
    24f4:	e7cf      	b.n	2496 <_free_r+0xae>
    24f6:	4666      	mov	r6, ip
    24f8:	18d0      	adds	r0, r2, r3
    24fa:	6840      	ldr	r0, [r0, #4]
    24fc:	4230      	tst	r0, r6
    24fe:	d13f      	bne.n	2580 <_free_r+0x198>
    2500:	6890      	ldr	r0, [r2, #8]
    2502:	195d      	adds	r5, r3, r5
    2504:	68d3      	ldr	r3, [r2, #12]
    2506:	60c3      	str	r3, [r0, #12]
    2508:	6098      	str	r0, [r3, #8]
    250a:	4663      	mov	r3, ip
    250c:	432b      	orrs	r3, r5
    250e:	604b      	str	r3, [r1, #4]
    2510:	514d      	str	r5, [r1, r5]
    2512:	e7a7      	b.n	2464 <_free_r+0x7c>
    2514:	2814      	cmp	r0, #20
    2516:	d814      	bhi.n	2542 <_free_r+0x15a>
    2518:	0002      	movs	r2, r0
    251a:	305c      	adds	r0, #92	; 0x5c
    251c:	325b      	adds	r2, #91	; 0x5b
    251e:	00c0      	lsls	r0, r0, #3
    2520:	e7ac      	b.n	247c <_free_r+0x94>
    2522:	2301      	movs	r3, #1
    2524:	1092      	asrs	r2, r2, #2
    2526:	4093      	lsls	r3, r2
    2528:	687a      	ldr	r2, [r7, #4]
    252a:	4313      	orrs	r3, r2
    252c:	607b      	str	r3, [r7, #4]
    252e:	0003      	movs	r3, r0
    2530:	e7b2      	b.n	2498 <_free_r+0xb0>
    2532:	4328      	orrs	r0, r5
    2534:	60d9      	str	r1, [r3, #12]
    2536:	6099      	str	r1, [r3, #8]
    2538:	60cb      	str	r3, [r1, #12]
    253a:	608b      	str	r3, [r1, #8]
    253c:	6048      	str	r0, [r1, #4]
    253e:	514d      	str	r5, [r1, r5]
    2540:	e790      	b.n	2464 <_free_r+0x7c>
    2542:	2854      	cmp	r0, #84	; 0x54
    2544:	d805      	bhi.n	2552 <_free_r+0x16a>
    2546:	0b28      	lsrs	r0, r5, #12
    2548:	0002      	movs	r2, r0
    254a:	306f      	adds	r0, #111	; 0x6f
    254c:	326e      	adds	r2, #110	; 0x6e
    254e:	00c0      	lsls	r0, r0, #3
    2550:	e794      	b.n	247c <_free_r+0x94>
    2552:	22aa      	movs	r2, #170	; 0xaa
    2554:	0052      	lsls	r2, r2, #1
    2556:	4290      	cmp	r0, r2
    2558:	d805      	bhi.n	2566 <_free_r+0x17e>
    255a:	0be8      	lsrs	r0, r5, #15
    255c:	0002      	movs	r2, r0
    255e:	3078      	adds	r0, #120	; 0x78
    2560:	3277      	adds	r2, #119	; 0x77
    2562:	00c0      	lsls	r0, r0, #3
    2564:	e78a      	b.n	247c <_free_r+0x94>
    2566:	4a0e      	ldr	r2, [pc, #56]	; (25a0 <_free_r+0x1b8>)
    2568:	4290      	cmp	r0, r2
    256a:	d805      	bhi.n	2578 <_free_r+0x190>
    256c:	0ca8      	lsrs	r0, r5, #18
    256e:	0002      	movs	r2, r0
    2570:	307d      	adds	r0, #125	; 0x7d
    2572:	327c      	adds	r2, #124	; 0x7c
    2574:	00c0      	lsls	r0, r0, #3
    2576:	e781      	b.n	247c <_free_r+0x94>
    2578:	20fe      	movs	r0, #254	; 0xfe
    257a:	227e      	movs	r2, #126	; 0x7e
    257c:	0080      	lsls	r0, r0, #2
    257e:	e77d      	b.n	247c <_free_r+0x94>
    2580:	4663      	mov	r3, ip
    2582:	432b      	orrs	r3, r5
    2584:	604b      	str	r3, [r1, #4]
    2586:	6015      	str	r5, [r2, #0]
    2588:	e76c      	b.n	2464 <_free_r+0x7c>
    258a:	46c0      	nop			; (mov r8, r8)
    258c:	20000440 	.word	0x20000440
    2590:	000001ff 	.word	0x000001ff
    2594:	20000448 	.word	0x20000448
    2598:	2000084c 	.word	0x2000084c
    259c:	20000970 	.word	0x20000970
    25a0:	00000554 	.word	0x00000554

000025a4 <__retarget_lock_acquire_recursive>:
    25a4:	4770      	bx	lr
    25a6:	46c0      	nop			; (mov r8, r8)

000025a8 <__retarget_lock_release_recursive>:
    25a8:	4770      	bx	lr
    25aa:	46c0      	nop			; (mov r8, r8)
    25ac:	00001032 	.word	0x00001032
    25b0:	0000102e 	.word	0x0000102e
    25b4:	0000102e 	.word	0x0000102e
    25b8:	00001094 	.word	0x00001094
    25bc:	00001094 	.word	0x00001094
    25c0:	00001046 	.word	0x00001046
    25c4:	00001038 	.word	0x00001038
    25c8:	0000104c 	.word	0x0000104c
    25cc:	00001082 	.word	0x00001082
    25d0:	00001218 	.word	0x00001218
    25d4:	000011f8 	.word	0x000011f8
    25d8:	000011f8 	.word	0x000011f8
    25dc:	00001284 	.word	0x00001284
    25e0:	0000120a 	.word	0x0000120a
    25e4:	00001226 	.word	0x00001226
    25e8:	000011fc 	.word	0x000011fc
    25ec:	00001234 	.word	0x00001234
    25f0:	00001274 	.word	0x00001274

000025f4 <_global_impure_ptr>:
    25f4:	20000018                                ... 

000025f8 <_init>:
    25f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25fa:	46c0      	nop			; (mov r8, r8)
    25fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    25fe:	bc08      	pop	{r3}
    2600:	469e      	mov	lr, r3
    2602:	4770      	bx	lr

00002604 <__init_array_start>:
    2604:	000022ed 	.word	0x000022ed

00002608 <__frame_dummy_init_array_entry>:
    2608:	000000b5 00000641                       ....A...

00002610 <_fini>:
    2610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2612:	46c0      	nop			; (mov r8, r8)
    2614:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2616:	bc08      	pop	{r3}
    2618:	469e      	mov	lr, r3
    261a:	4770      	bx	lr

0000261c <__fini_array_start>:
    261c:	0000008d 	.word	0x0000008d
