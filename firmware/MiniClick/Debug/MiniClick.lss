
MiniClick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b48  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00001b48  00001b48  00011b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000444  20000000  00001b50  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000164  20000444  00001f94  00020444  2**2
                  ALLOC
  4 .stack        00000400  200005a8  000020f8  00020444  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020444  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002046c  2**0
                  CONTENTS, READONLY
  7 .debug_info   00024527  00000000  00000000  000204c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003b6d  00000000  00000000  000449ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00004467  00000000  00000000  00048559  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000518  00000000  00000000  0004c9c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000500  00000000  00000000  0004ced8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00014d57  00000000  00000000  0004d3d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000b184  00000000  00000000  0006212f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000601b2  00000000  00000000  0006d2b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000da0  00000000  00000000  000cd468  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a8 09 00 20 45 15 00 00 41 15 00 00 41 15 00 00     ... E...A...A...
	...
      2c:	41 15 00 00 00 00 00 00 00 00 00 00 41 15 00 00     A...........A...
      3c:	41 15 00 00 41 15 00 00 41 15 00 00 e9 0a 00 00     A...A...A.......
      4c:	41 15 00 00 f1 0c 00 00 41 15 00 00 41 15 00 00     A.......A...A...
      5c:	00 00 00 00 41 15 00 00 d1 0c 00 00 e1 0c 00 00     ....A...........
	...
      74:	69 0b 00 00 79 0b 00 00 41 15 00 00 00 00 00 00     i...y...A.......
      84:	00 00 00 00 41 15 00 00                             ....A...

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000444 	.word	0x20000444
      ac:	00000000 	.word	0x00000000
      b0:	00001b50 	.word	0x00001b50

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000448 	.word	0x20000448
      e0:	00001b50 	.word	0x00001b50
      e4:	00001b50 	.word	0x00001b50
      e8:	00000000 	.word	0x00000000

000000ec <_i2c_slave_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
      ec:	6803      	ldr	r3, [r0, #0]

	/* Return sync status */
#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CS_SYNCBUSY_MASK);
      ee:	69db      	ldr	r3, [r3, #28]
		const struct i2c_slave_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_slave_is_syncing(module)) {
      f0:	079b      	lsls	r3, r3, #30
      f2:	d1fb      	bne.n	ec <_i2c_slave_wait_for_sync>
		/* Wait for I<SUP>2</SUP>C module to sync */
	}
}
      f4:	4770      	bx	lr
	...

000000f8 <_Z25i2c_read_request_callbackP16i2c_slave_module>:
	i2c_slave_enable(&i2c_slave_instance);
}

void i2c_read_request_callback(
struct i2c_slave_module *const module)
{
      f8:	b5f0      	push	{r4, r5, r6, r7, lr}
      fa:	b083      	sub	sp, #12
      fc:	0004      	movs	r4, r0
	volatile uint8_t read_address = packet.data[0] & 0x0F;
      fe:	491a      	ldr	r1, [pc, #104]	; (168 <_Z25i2c_read_request_callbackP16i2c_slave_module+0x70>)
     100:	684b      	ldr	r3, [r1, #4]
     102:	781a      	ldrb	r2, [r3, #0]
     104:	230f      	movs	r3, #15
     106:	4013      	ands	r3, r2
     108:	466a      	mov	r2, sp
     10a:	71d3      	strb	r3, [r2, #7]
	 packet.data_length = 1;
     10c:	2301      	movs	r3, #1
     10e:	800b      	strh	r3, [r1, #0]
	switch(read_address){
     110:	79d3      	ldrb	r3, [r2, #7]
     112:	b2db      	uxtb	r3, r3
     114:	2b00      	cmp	r3, #0
     116:	d007      	beq.n	128 <_Z25i2c_read_request_callbackP16i2c_slave_module+0x30>
     118:	2b01      	cmp	r3, #1
     11a:	d016      	beq.n	14a <_Z25i2c_read_request_callbackP16i2c_slave_module+0x52>
		 buffer.read(device_registers[read_address]);
		 packet.data = &device_registers[read_address];
		break;
	}	
	/* Write buffer to master */
	i2c_slave_write_packet_job(module, &packet);
     11c:	4912      	ldr	r1, [pc, #72]	; (168 <_Z25i2c_read_request_callbackP16i2c_slave_module+0x70>)
     11e:	0020      	movs	r0, r4
     120:	4b12      	ldr	r3, [pc, #72]	; (16c <_Z25i2c_read_request_callbackP16i2c_slave_module+0x74>)
     122:	4798      	blx	r3
}
     124:	b003      	add	sp, #12
     126:	bdf0      	pop	{r4, r5, r6, r7, pc}
		device_registers[read_address] = buffer.size();
     128:	466b      	mov	r3, sp
     12a:	1dde      	adds	r6, r3, #7
     12c:	79dd      	ldrb	r5, [r3, #7]
     12e:	b2ed      	uxtb	r5, r5
     130:	4f0d      	ldr	r7, [pc, #52]	; (168 <_Z25i2c_read_request_callbackP16i2c_slave_module+0x70>)
     132:	0038      	movs	r0, r7
     134:	3008      	adds	r0, #8
     136:	4b0e      	ldr	r3, [pc, #56]	; (170 <_Z25i2c_read_request_callbackP16i2c_slave_module+0x78>)
     138:	4798      	blx	r3
     13a:	197d      	adds	r5, r7, r5
     13c:	7628      	strb	r0, [r5, #24]
		 packet.data = &device_registers[read_address];
     13e:	7832      	ldrb	r2, [r6, #0]
     140:	003b      	movs	r3, r7
     142:	3318      	adds	r3, #24
     144:	189b      	adds	r3, r3, r2
     146:	607b      	str	r3, [r7, #4]
		break;
     148:	e7e8      	b.n	11c <_Z25i2c_read_request_callbackP16i2c_slave_module+0x24>
		 buffer.read(device_registers[read_address]);
     14a:	466b      	mov	r3, sp
     14c:	1ddf      	adds	r7, r3, #7
     14e:	79d9      	ldrb	r1, [r3, #7]
     150:	4e05      	ldr	r6, [pc, #20]	; (168 <_Z25i2c_read_request_callbackP16i2c_slave_module+0x70>)
     152:	0035      	movs	r5, r6
     154:	3518      	adds	r5, #24
     156:	1869      	adds	r1, r5, r1
     158:	0030      	movs	r0, r6
     15a:	3008      	adds	r0, #8
     15c:	4b05      	ldr	r3, [pc, #20]	; (174 <_Z25i2c_read_request_callbackP16i2c_slave_module+0x7c>)
     15e:	4798      	blx	r3
		 packet.data = &device_registers[read_address];
     160:	783b      	ldrb	r3, [r7, #0]
     162:	18ed      	adds	r5, r5, r3
     164:	6075      	str	r5, [r6, #4]
		break;
     166:	e7d9      	b.n	11c <_Z25i2c_read_request_callbackP16i2c_slave_module+0x24>
     168:	20000460 	.word	0x20000460
     16c:	0000078f 	.word	0x0000078f
     170:	00000a45 	.word	0x00000a45
     174:	00000ab9 	.word	0x00000ab9

00000178 <_Z26i2c_write_request_callbackP16i2c_slave_module>:

void i2c_write_request_callback(struct i2c_slave_module *const module)
{
     178:	b510      	push	{r4, lr}
	/* Init i2c packet */
	packet.data_length = 1;
     17a:	4904      	ldr	r1, [pc, #16]	; (18c <_Z26i2c_write_request_callbackP16i2c_slave_module+0x14>)
     17c:	2301      	movs	r3, #1
     17e:	800b      	strh	r3, [r1, #0]
	packet.data        = read_buffer;
     180:	000b      	movs	r3, r1
     182:	3324      	adds	r3, #36	; 0x24
     184:	604b      	str	r3, [r1, #4]
	/* Read buffer from master */
	if (i2c_slave_read_packet_job(module, &packet) != STATUS_OK) {
     186:	4b02      	ldr	r3, [pc, #8]	; (190 <_Z26i2c_write_request_callbackP16i2c_slave_module+0x18>)
     188:	4798      	blx	r3
		//packet.data        = read_buffer;
	}
}
     18a:	bd10      	pop	{r4, pc}
     18c:	20000460 	.word	0x20000460
     190:	00000767 	.word	0x00000767

00000194 <_Z41__static_initialization_and_destruction_0ii>:
		
		ws2812_write(NEO_PIN, &pixels[0], 3);
		
		
	}
}
     194:	b510      	push	{r4, lr}
     196:	2801      	cmp	r0, #1
     198:	d000      	beq.n	19c <_Z41__static_initialization_and_destruction_0ii+0x8>
     19a:	bd10      	pop	{r4, pc}
     19c:	4b07      	ldr	r3, [pc, #28]	; (1bc <_Z41__static_initialization_and_destruction_0ii+0x28>)
     19e:	4299      	cmp	r1, r3
     1a0:	d1fb      	bne.n	19a <_Z41__static_initialization_and_destruction_0ii+0x6>
CircularBuffer buffer(10);
     1a2:	4c07      	ldr	r4, [pc, #28]	; (1c0 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
     1a4:	3408      	adds	r4, #8
     1a6:	210a      	movs	r1, #10
     1a8:	0020      	movs	r0, r4
     1aa:	4b06      	ldr	r3, [pc, #24]	; (1c4 <_Z41__static_initialization_and_destruction_0ii+0x30>)
     1ac:	4798      	blx	r3
     1ae:	4a06      	ldr	r2, [pc, #24]	; (1c8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     1b0:	4906      	ldr	r1, [pc, #24]	; (1cc <_Z41__static_initialization_and_destruction_0ii+0x38>)
     1b2:	0020      	movs	r0, r4
     1b4:	4b06      	ldr	r3, [pc, #24]	; (1d0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     1b6:	4798      	blx	r3
}
     1b8:	e7ef      	b.n	19a <_Z41__static_initialization_and_destruction_0ii+0x6>
     1ba:	46c0      	nop			; (mov r8, r8)
     1bc:	0000ffff 	.word	0x0000ffff
     1c0:	20000460 	.word	0x20000460
     1c4:	00000a39 	.word	0x00000a39
     1c8:	20000000 	.word	0x20000000
     1cc:	00000a43 	.word	0x00000a43
     1d0:	00001625 	.word	0x00001625

000001d4 <_Z12ws2812_writemPht>:
{
     1d4:	b530      	push	{r4, r5, lr}
	PortGroup *const port_base = port_get_group_from_gpio_pin(pin);
     1d6:	b2c4      	uxtb	r4, r0
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
     1d8:	09e3      	lsrs	r3, r4, #7
	uint8_t group_index = (gpio_pin / 32);
     1da:	0964      	lsrs	r4, r4, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     1dc:	2b00      	cmp	r3, #0
     1de:	dd08      	ble.n	1f2 <_Z12ws2812_writemPht+0x1e>
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     1e0:	2400      	movs	r4, #0
	pinMask =  1ul << pin;
     1e2:	2301      	movs	r3, #1
     1e4:	4083      	lsls	r3, r0
     1e6:	0018      	movs	r0, r3
	end     =  ptr + numBytes;
     1e8:	188a      	adds	r2, r1, r2
	p       = *ptr++;
     1ea:	1c4d      	adds	r5, r1, #1
     1ec:	7809      	ldrb	r1, [r1, #0]
	bitMask =  0x80;
     1ee:	2380      	movs	r3, #128	; 0x80
     1f0:	e01b      	b.n	22a <_Z12ws2812_writemPht+0x56>
		return &(ports[port_index]->Group[group_index]);
     1f2:	01e4      	lsls	r4, r4, #7
     1f4:	4b1f      	ldr	r3, [pc, #124]	; (274 <_Z12ws2812_writemPht+0xa0>)
     1f6:	469c      	mov	ip, r3
     1f8:	4464      	add	r4, ip
     1fa:	e7f2      	b.n	1e2 <_Z12ws2812_writemPht+0xe>
			 *clr = pinMask;
     1fc:	6160      	str	r0, [r4, #20]
			 asm("nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop;");
     1fe:	46c0      	nop			; (mov r8, r8)
     200:	46c0      	nop			; (mov r8, r8)
     202:	46c0      	nop			; (mov r8, r8)
     204:	46c0      	nop			; (mov r8, r8)
     206:	46c0      	nop			; (mov r8, r8)
     208:	46c0      	nop			; (mov r8, r8)
     20a:	46c0      	nop			; (mov r8, r8)
     20c:	46c0      	nop			; (mov r8, r8)
     20e:	46c0      	nop			; (mov r8, r8)
     210:	46c0      	nop			; (mov r8, r8)
     212:	46c0      	nop			; (mov r8, r8)
     214:	46c0      	nop			; (mov r8, r8)
     216:	46c0      	nop			; (mov r8, r8)
     218:	46c0      	nop			; (mov r8, r8)
     21a:	46c0      	nop			; (mov r8, r8)
     21c:	46c0      	nop			; (mov r8, r8)
     21e:	e01e      	b.n	25e <_Z12ws2812_writemPht+0x8a>
			 if(ptr >= end) break;
     220:	4295      	cmp	r5, r2
     222:	d226      	bcs.n	272 <_Z12ws2812_writemPht+0x9e>
			 p       = *ptr++;
     224:	7829      	ldrb	r1, [r5, #0]
     226:	3501      	adds	r5, #1
			 bitMask = 0x80;
     228:	2380      	movs	r3, #128	; 0x80
		 *set = pinMask;
     22a:	61a0      	str	r0, [r4, #24]
		 asm("nop; nop; nop; nop; nop; nop;");
     22c:	46c0      	nop			; (mov r8, r8)
     22e:	46c0      	nop			; (mov r8, r8)
     230:	46c0      	nop			; (mov r8, r8)
     232:	46c0      	nop			; (mov r8, r8)
     234:	46c0      	nop			; (mov r8, r8)
     236:	46c0      	nop			; (mov r8, r8)
		 if(p & bitMask) {
     238:	420b      	tst	r3, r1
     23a:	d0df      	beq.n	1fc <_Z12ws2812_writemPht+0x28>
			 asm("nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop;");
     23c:	46c0      	nop			; (mov r8, r8)
     23e:	46c0      	nop			; (mov r8, r8)
     240:	46c0      	nop			; (mov r8, r8)
     242:	46c0      	nop			; (mov r8, r8)
     244:	46c0      	nop			; (mov r8, r8)
     246:	46c0      	nop			; (mov r8, r8)
     248:	46c0      	nop			; (mov r8, r8)
     24a:	46c0      	nop			; (mov r8, r8)
     24c:	46c0      	nop			; (mov r8, r8)
     24e:	46c0      	nop			; (mov r8, r8)
     250:	46c0      	nop			; (mov r8, r8)
     252:	46c0      	nop			; (mov r8, r8)
     254:	46c0      	nop			; (mov r8, r8)
     256:	46c0      	nop			; (mov r8, r8)
     258:	46c0      	nop			; (mov r8, r8)
     25a:	46c0      	nop			; (mov r8, r8)
			 *clr = pinMask;
     25c:	6160      	str	r0, [r4, #20]
		 if(bitMask >>= 1) {
     25e:	085b      	lsrs	r3, r3, #1
     260:	d0de      	beq.n	220 <_Z12ws2812_writemPht+0x4c>
			 asm("nop; nop; nop; nop; nop; nop; nop;");
     262:	46c0      	nop			; (mov r8, r8)
     264:	46c0      	nop			; (mov r8, r8)
     266:	46c0      	nop			; (mov r8, r8)
     268:	46c0      	nop			; (mov r8, r8)
     26a:	46c0      	nop			; (mov r8, r8)
     26c:	46c0      	nop			; (mov r8, r8)
     26e:	46c0      	nop			; (mov r8, r8)
     270:	e7db      	b.n	22a <_Z12ws2812_writemPht+0x56>
}
     272:	bd30      	pop	{r4, r5, pc}
     274:	41004400 	.word	0x41004400

00000278 <_Z19configure_i2c_slavev>:
{
     278:	b530      	push	{r4, r5, lr}
     27a:	b08d      	sub	sp, #52	; 0x34
static inline void i2c_slave_get_config_defaults(
		struct i2c_slave_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->enable_scl_low_timeout = false;
     27c:	aa02      	add	r2, sp, #8
     27e:	2100      	movs	r1, #0
     280:	7011      	strb	r1, [r2, #0]
	config->sda_hold_time = I2C_SLAVE_SDA_HOLD_TIME_300NS_600NS;
     282:	2380      	movs	r3, #128	; 0x80
     284:	039b      	lsls	r3, r3, #14
     286:	6053      	str	r3, [r2, #4]
	config->buffer_timeout = 65535;
     288:	2301      	movs	r3, #1
     28a:	425b      	negs	r3, r3
     28c:	8113      	strh	r3, [r2, #8]
	config->address_mode = I2C_SLAVE_ADDRESS_MODE_MASK;
     28e:	2300      	movs	r3, #0
     290:	8151      	strh	r1, [r2, #10]
	config->address = 0;
	config->address_mask = 0;
     292:	81d1      	strh	r1, [r2, #14]
#ifdef FEATURE_I2C_10_BIT_ADDRESS
	config->ten_bit_address = false;
     294:	7413      	strb	r3, [r2, #16]
#endif
	config->enable_general_call_address = false;
     296:	7453      	strb	r3, [r2, #17]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->transfer_speed = I2C_SLAVE_SPEED_STANDARD_AND_FAST;
     298:	6151      	str	r1, [r2, #20]
#endif
#if I2C_SLAVE_CALLBACK_MODE == true
	config->enable_nack_on_address = false;
     29a:	7613      	strb	r3, [r2, #24]
#endif
	config->generator_source = GCLK_GENERATOR_0;
     29c:	7653      	strb	r3, [r2, #25]
	config->run_in_standby = false;
     29e:	7693      	strb	r3, [r2, #26]
	config->pinmux_pad0 = PINMUX_DEFAULT;
     2a0:	61d1      	str	r1, [r2, #28]
	config->pinmux_pad1 = PINMUX_DEFAULT;
     2a2:	6211      	str	r1, [r2, #32]
	config->scl_low_timeout  = false;
     2a4:	3124      	adds	r1, #36	; 0x24
     2a6:	5453      	strb	r3, [r2, r1]
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
     2a8:	3101      	adds	r1, #1
     2aa:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
     2ac:	3101      	adds	r1, #1
     2ae:	5453      	strb	r3, [r2, r1]
	config_i2c_slave.address      = SLAVE_ADDRESS;
     2b0:	2312      	movs	r3, #18
     2b2:	8193      	strh	r3, [r2, #12]
	volatile status_code code = i2c_slave_init(&i2c_slave_instance, SERCOM0, &config_i2c_slave);
     2b4:	4c0d      	ldr	r4, [pc, #52]	; (2ec <_Z19configure_i2c_slavev+0x74>)
     2b6:	0025      	movs	r5, r4
     2b8:	3528      	adds	r5, #40	; 0x28
     2ba:	490d      	ldr	r1, [pc, #52]	; (2f0 <_Z19configure_i2c_slavev+0x78>)
     2bc:	0028      	movs	r0, r5
     2be:	4b0d      	ldr	r3, [pc, #52]	; (2f4 <_Z19configure_i2c_slavev+0x7c>)
     2c0:	4798      	blx	r3
     2c2:	466b      	mov	r3, sp
     2c4:	71d8      	strb	r0, [r3, #7]
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     2c6:	6aa4      	ldr	r4, [r4, #40]	; 0x28

#if I2C_SLAVE_CALLBACK_MODE == true
	/* Enable global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     2c8:	0020      	movs	r0, r4
     2ca:	4b0b      	ldr	r3, [pc, #44]	; (2f8 <_Z19configure_i2c_slavev+0x80>)
     2cc:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     2ce:	231f      	movs	r3, #31
     2d0:	4018      	ands	r0, r3
     2d2:	3b1e      	subs	r3, #30
     2d4:	4083      	lsls	r3, r0
     2d6:	4a09      	ldr	r2, [pc, #36]	; (2fc <_Z19configure_i2c_slavev+0x84>)
     2d8:	6013      	str	r3, [r2, #0]
#endif

	/* Wait for module to sync */
	_i2c_slave_wait_for_sync(module);
     2da:	0028      	movs	r0, r5
     2dc:	4b08      	ldr	r3, [pc, #32]	; (300 <_Z19configure_i2c_slavev+0x88>)
     2de:	4798      	blx	r3

	/* Enable module */
	i2c_hw->CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;
     2e0:	6823      	ldr	r3, [r4, #0]
     2e2:	2202      	movs	r2, #2
     2e4:	4313      	orrs	r3, r2
     2e6:	6023      	str	r3, [r4, #0]
}
     2e8:	b00d      	add	sp, #52	; 0x34
     2ea:	bd30      	pop	{r4, r5, pc}
     2ec:	20000460 	.word	0x20000460
     2f0:	42000800 	.word	0x42000800
     2f4:	000005bd 	.word	0x000005bd
     2f8:	00000cb5 	.word	0x00000cb5
     2fc:	e000e100 	.word	0xe000e100
     300:	000000ed 	.word	0x000000ed

00000304 <_Z29configure_i2c_slave_callbacksv>:
{
     304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	I2C_SLAVE_CALLBACK_READ_REQUEST);
     306:	4c0e      	ldr	r4, [pc, #56]	; (340 <_Z29configure_i2c_slave_callbacksv+0x3c>)
     308:	2202      	movs	r2, #2
     30a:	490e      	ldr	r1, [pc, #56]	; (344 <_Z29configure_i2c_slave_callbacksv+0x40>)
     30c:	480e      	ldr	r0, [pc, #56]	; (348 <_Z29configure_i2c_slave_callbacksv+0x44>)
     30e:	4d0f      	ldr	r5, [pc, #60]	; (34c <_Z29configure_i2c_slave_callbacksv+0x48>)
     310:	47a8      	blx	r5
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
     312:	0026      	movs	r6, r4
     314:	364d      	adds	r6, #77	; 0x4d
     316:	7833      	ldrb	r3, [r6, #0]
     318:	2204      	movs	r2, #4
     31a:	4313      	orrs	r3, r2
     31c:	b2db      	uxtb	r3, r3
     31e:	7033      	strb	r3, [r6, #0]

	/* Enable address callback */
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
	if (callback_type == I2C_SLAVE_CALLBACK_READ_REQUEST ||
			callback_type == I2C_SLAVE_CALLBACK_WRITE_REQUEST) {
		i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH;
     320:	2702      	movs	r7, #2
     322:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     324:	759f      	strb	r7, [r3, #22]
	I2C_SLAVE_CALLBACK_WRITE_REQUEST);
     326:	2203      	movs	r2, #3
     328:	4909      	ldr	r1, [pc, #36]	; (350 <_Z29configure_i2c_slave_callbacksv+0x4c>)
     32a:	4807      	ldr	r0, [pc, #28]	; (348 <_Z29configure_i2c_slave_callbacksv+0x44>)
     32c:	47a8      	blx	r5
	module->enabled_callback |= (1 << callback_type);
     32e:	7833      	ldrb	r3, [r6, #0]
     330:	2208      	movs	r2, #8
     332:	4313      	orrs	r3, r2
     334:	b2db      	uxtb	r3, r3
     336:	7033      	strb	r3, [r6, #0]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     338:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH;
     33a:	759f      	strb	r7, [r3, #22]
}
     33c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     33e:	46c0      	nop			; (mov r8, r8)
     340:	20000460 	.word	0x20000460
     344:	000000f9 	.word	0x000000f9
     348:	20000488 	.word	0x20000488
     34c:	0000074d 	.word	0x0000074d
     350:	00000179 	.word	0x00000179

00000354 <_Z19configure_gpio_pinsv>:
{
     354:	b570      	push	{r4, r5, r6, lr}
     356:	b082      	sub	sp, #8
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     358:	ac01      	add	r4, sp, #4
     35a:	2300      	movs	r3, #0
     35c:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     35e:	2601      	movs	r6, #1
     360:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     362:	70a3      	strb	r3, [r4, #2]
	port_pin_set_config(BUTTON_PIN_1, &config_port_pin);
     364:	0021      	movs	r1, r4
     366:	2010      	movs	r0, #16
     368:	4d09      	ldr	r5, [pc, #36]	; (390 <_Z19configure_gpio_pinsv+0x3c>)
     36a:	47a8      	blx	r5
	port_pin_set_config(BUTTON_PIN_2, &config_port_pin);
     36c:	0021      	movs	r1, r4
     36e:	2011      	movs	r0, #17
     370:	47a8      	blx	r5
	port_pin_set_config(BUTTON_PIN_3, &config_port_pin);
     372:	0021      	movs	r1, r4
     374:	2016      	movs	r0, #22
     376:	47a8      	blx	r5
	port_pin_set_config(BUTTON_PIN_4, &config_port_pin);
     378:	0021      	movs	r1, r4
     37a:	2017      	movs	r0, #23
     37c:	47a8      	blx	r5
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
     37e:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_PIN, &config_port_pin);
     380:	0021      	movs	r1, r4
     382:	201b      	movs	r0, #27
     384:	47a8      	blx	r5
	port_pin_set_config(NEO_PIN, &config_port_pin);
     386:	0021      	movs	r1, r4
     388:	200a      	movs	r0, #10
     38a:	47a8      	blx	r5
}
     38c:	b002      	add	sp, #8
     38e:	bd70      	pop	{r4, r5, r6, pc}
     390:	00000d85 	.word	0x00000d85

00000394 <_Z20configure_i2c_pinmuxv>:
{
     394:	b530      	push	{r4, r5, lr}
     396:	b083      	sub	sp, #12
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     398:	ac01      	add	r4, sp, #4
     39a:	2300      	movs	r3, #0
     39c:	7063      	strb	r3, [r4, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     39e:	2201      	movs	r2, #1
     3a0:	70a2      	strb	r2, [r4, #2]
	config->powersave    = false;
     3a2:	70e3      	strb	r3, [r4, #3]
	config_pinmux.mux_position = 1 << 1;
     3a4:	3302      	adds	r3, #2
     3a6:	7023      	strb	r3, [r4, #0]
	system_pinmux_pin_set_config(14, &config_pinmux);
     3a8:	0021      	movs	r1, r4
     3aa:	200e      	movs	r0, #14
     3ac:	4d03      	ldr	r5, [pc, #12]	; (3bc <_Z20configure_i2c_pinmuxv+0x28>)
     3ae:	47a8      	blx	r5
	system_pinmux_pin_set_config(15, &config_pinmux);
     3b0:	0021      	movs	r1, r4
     3b2:	200f      	movs	r0, #15
     3b4:	47a8      	blx	r5
}
     3b6:	b003      	add	sp, #12
     3b8:	bd30      	pop	{r4, r5, pc}
     3ba:	46c0      	nop			; (mov r8, r8)
     3bc:	00001511 	.word	0x00001511

000003c0 <main>:
{
     3c0:	b510      	push	{r4, lr}
     3c2:	b082      	sub	sp, #8
	SystemInit();
     3c4:	4b6c      	ldr	r3, [pc, #432]	; (578 <STACK_SIZE+0x178>)
     3c6:	4798      	blx	r3
	system_clock_init();
     3c8:	4b6c      	ldr	r3, [pc, #432]	; (57c <STACK_SIZE+0x17c>)
     3ca:	4798      	blx	r3
	delay_init();
     3cc:	4b6c      	ldr	r3, [pc, #432]	; (580 <STACK_SIZE+0x180>)
     3ce:	4798      	blx	r3
	configure_gpio_pins();
     3d0:	4b6c      	ldr	r3, [pc, #432]	; (584 <STACK_SIZE+0x184>)
     3d2:	4798      	blx	r3
	 configure_i2c_pinmux();
     3d4:	4b6c      	ldr	r3, [pc, #432]	; (588 <STACK_SIZE+0x188>)
     3d6:	4798      	blx	r3
	configure_i2c_slave();
     3d8:	4b6c      	ldr	r3, [pc, #432]	; (58c <STACK_SIZE+0x18c>)
     3da:	4798      	blx	r3
	configure_i2c_slave_callbacks();
     3dc:	4b6c      	ldr	r3, [pc, #432]	; (590 <STACK_SIZE+0x190>)
     3de:	4798      	blx	r3
	uint8_t pixels[3]{0xFF, 0x00, 0x0F};
     3e0:	ab01      	add	r3, sp, #4
     3e2:	4a6c      	ldr	r2, [pc, #432]	; (594 <STACK_SIZE+0x194>)
     3e4:	8811      	ldrh	r1, [r2, #0]
     3e6:	8019      	strh	r1, [r3, #0]
     3e8:	7892      	ldrb	r2, [r2, #2]
     3ea:	709a      	strb	r2, [r3, #2]
     3ec:	e04a      	b.n	484 <STACK_SIZE+0x84>
			buffer.write(0x01 | BUTTON_PRESSED);
     3ee:	2181      	movs	r1, #129	; 0x81
     3f0:	0010      	movs	r0, r2
     3f2:	3008      	adds	r0, #8
     3f4:	4b68      	ldr	r3, [pc, #416]	; (598 <STACK_SIZE+0x198>)
     3f6:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     3f8:	2280      	movs	r2, #128	; 0x80
     3fa:	0512      	lsls	r2, r2, #20
     3fc:	4b67      	ldr	r3, [pc, #412]	; (59c <STACK_SIZE+0x19c>)
     3fe:	619a      	str	r2, [r3, #24]
     400:	e06a      	b.n	4d8 <STACK_SIZE+0xd8>
			buffer.write(0x02 | BUTTON_PRESSED);
     402:	2182      	movs	r1, #130	; 0x82
     404:	4866      	ldr	r0, [pc, #408]	; (5a0 <STACK_SIZE+0x1a0>)
     406:	3008      	adds	r0, #8
     408:	4b63      	ldr	r3, [pc, #396]	; (598 <STACK_SIZE+0x198>)
     40a:	4798      	blx	r3
     40c:	2280      	movs	r2, #128	; 0x80
     40e:	0512      	lsls	r2, r2, #20
     410:	4b62      	ldr	r3, [pc, #392]	; (59c <STACK_SIZE+0x19c>)
     412:	619a      	str	r2, [r3, #24]
     414:	e06a      	b.n	4ec <STACK_SIZE+0xec>
			buffer.write(0x03 | BUTTON_PRESSED);
     416:	2183      	movs	r1, #131	; 0x83
     418:	4861      	ldr	r0, [pc, #388]	; (5a0 <STACK_SIZE+0x1a0>)
     41a:	3008      	adds	r0, #8
     41c:	4b5e      	ldr	r3, [pc, #376]	; (598 <STACK_SIZE+0x198>)
     41e:	4798      	blx	r3
     420:	2280      	movs	r2, #128	; 0x80
     422:	0512      	lsls	r2, r2, #20
     424:	4b5d      	ldr	r3, [pc, #372]	; (59c <STACK_SIZE+0x19c>)
     426:	619a      	str	r2, [r3, #24]
     428:	e06a      	b.n	500 <STACK_SIZE+0x100>
			buffer.write(0x04 | BUTTON_PRESSED);
     42a:	2184      	movs	r1, #132	; 0x84
     42c:	485c      	ldr	r0, [pc, #368]	; (5a0 <STACK_SIZE+0x1a0>)
     42e:	3008      	adds	r0, #8
     430:	4b59      	ldr	r3, [pc, #356]	; (598 <STACK_SIZE+0x198>)
     432:	4798      	blx	r3
     434:	2280      	movs	r2, #128	; 0x80
     436:	0512      	lsls	r2, r2, #20
     438:	4b58      	ldr	r3, [pc, #352]	; (59c <STACK_SIZE+0x19c>)
     43a:	619a      	str	r2, [r3, #24]
     43c:	e06a      	b.n	514 <STACK_SIZE+0x114>
			buffer.write(0x01 | BUTTON_RELEASED);
     43e:	2141      	movs	r1, #65	; 0x41
     440:	0010      	movs	r0, r2
     442:	3008      	adds	r0, #8
     444:	4b54      	ldr	r3, [pc, #336]	; (598 <STACK_SIZE+0x198>)
     446:	4798      	blx	r3
	} else {
		port_base->OUTCLR.reg = pin_mask;
     448:	2280      	movs	r2, #128	; 0x80
     44a:	0512      	lsls	r2, r2, #20
     44c:	4b53      	ldr	r3, [pc, #332]	; (59c <STACK_SIZE+0x19c>)
     44e:	615a      	str	r2, [r3, #20]
     450:	e069      	b.n	526 <STACK_SIZE+0x126>
			buffer.write(0x02 | BUTTON_RELEASED);
     452:	2142      	movs	r1, #66	; 0x42
     454:	4852      	ldr	r0, [pc, #328]	; (5a0 <STACK_SIZE+0x1a0>)
     456:	3008      	adds	r0, #8
     458:	4b4f      	ldr	r3, [pc, #316]	; (598 <STACK_SIZE+0x198>)
     45a:	4798      	blx	r3
     45c:	2280      	movs	r2, #128	; 0x80
     45e:	0512      	lsls	r2, r2, #20
     460:	4b4e      	ldr	r3, [pc, #312]	; (59c <STACK_SIZE+0x19c>)
     462:	615a      	str	r2, [r3, #20]
     464:	e069      	b.n	53a <STACK_SIZE+0x13a>
			buffer.write(0x03 | BUTTON_RELEASED);
     466:	2143      	movs	r1, #67	; 0x43
     468:	484d      	ldr	r0, [pc, #308]	; (5a0 <STACK_SIZE+0x1a0>)
     46a:	3008      	adds	r0, #8
     46c:	4b4a      	ldr	r3, [pc, #296]	; (598 <STACK_SIZE+0x198>)
     46e:	4798      	blx	r3
     470:	2280      	movs	r2, #128	; 0x80
     472:	0512      	lsls	r2, r2, #20
     474:	4b49      	ldr	r3, [pc, #292]	; (59c <STACK_SIZE+0x19c>)
     476:	615a      	str	r2, [r3, #20]
     478:	e069      	b.n	54e <STACK_SIZE+0x14e>
		ws2812_write(NEO_PIN, &pixels[0], 3);
     47a:	2203      	movs	r2, #3
     47c:	a901      	add	r1, sp, #4
     47e:	200a      	movs	r0, #10
     480:	4b48      	ldr	r3, [pc, #288]	; (5a4 <STACK_SIZE+0x1a4>)
     482:	4798      	blx	r3
		last_button_level = current_button_level;
     484:	4946      	ldr	r1, [pc, #280]	; (5a0 <STACK_SIZE+0x1a0>)
     486:	6e0b      	ldr	r3, [r1, #96]	; 0x60
     488:	65cb      	str	r3, [r1, #92]	; 0x5c
	return (port_base->IN.reg & pin_mask);
     48a:	4844      	ldr	r0, [pc, #272]	; (59c <STACK_SIZE+0x19c>)
     48c:	6a03      	ldr	r3, [r0, #32]
     48e:	2280      	movs	r2, #128	; 0x80
     490:	0252      	lsls	r2, r2, #9
     492:	4013      	ands	r3, r2
     494:	1e5a      	subs	r2, r3, #1
     496:	4193      	sbcs	r3, r2
     498:	b2db      	uxtb	r3, r3
		current_button_level.button_1 = port_pin_get_input_level(BUTTON_PIN_1);
     49a:	2260      	movs	r2, #96	; 0x60
     49c:	548b      	strb	r3, [r1, r2]
     49e:	6a02      	ldr	r2, [r0, #32]
     4a0:	2480      	movs	r4, #128	; 0x80
     4a2:	02a4      	lsls	r4, r4, #10
     4a4:	4022      	ands	r2, r4
     4a6:	1e54      	subs	r4, r2, #1
     4a8:	41a2      	sbcs	r2, r4
		current_button_level.button_2 = port_pin_get_input_level(BUTTON_PIN_2);
     4aa:	3160      	adds	r1, #96	; 0x60
     4ac:	704a      	strb	r2, [r1, #1]
     4ae:	6a02      	ldr	r2, [r0, #32]
     4b0:	2480      	movs	r4, #128	; 0x80
     4b2:	03e4      	lsls	r4, r4, #15
     4b4:	4022      	ands	r2, r4
     4b6:	1e54      	subs	r4, r2, #1
     4b8:	41a2      	sbcs	r2, r4
		current_button_level.button_3 = port_pin_get_input_level(BUTTON_PIN_3);
     4ba:	708a      	strb	r2, [r1, #2]
     4bc:	6a02      	ldr	r2, [r0, #32]
     4be:	2080      	movs	r0, #128	; 0x80
     4c0:	0400      	lsls	r0, r0, #16
     4c2:	4002      	ands	r2, r0
     4c4:	1e50      	subs	r0, r2, #1
     4c6:	4182      	sbcs	r2, r0
		current_button_level.button_4 = port_pin_get_input_level(BUTTON_PIN_4);
     4c8:	70ca      	strb	r2, [r1, #3]
		if(!current_button_level.button_1 && last_button_level.button_1){
     4ca:	2b00      	cmp	r3, #0
     4cc:	d104      	bne.n	4d8 <STACK_SIZE+0xd8>
     4ce:	335c      	adds	r3, #92	; 0x5c
     4d0:	4a33      	ldr	r2, [pc, #204]	; (5a0 <STACK_SIZE+0x1a0>)
     4d2:	5cd3      	ldrb	r3, [r2, r3]
     4d4:	2b00      	cmp	r3, #0
     4d6:	d18a      	bne.n	3ee <main+0x2e>
		if(!current_button_level.button_2 && last_button_level.button_2){
     4d8:	4b31      	ldr	r3, [pc, #196]	; (5a0 <STACK_SIZE+0x1a0>)
     4da:	3360      	adds	r3, #96	; 0x60
     4dc:	785b      	ldrb	r3, [r3, #1]
     4de:	2b00      	cmp	r3, #0
     4e0:	d104      	bne.n	4ec <STACK_SIZE+0xec>
     4e2:	4b2f      	ldr	r3, [pc, #188]	; (5a0 <STACK_SIZE+0x1a0>)
     4e4:	335c      	adds	r3, #92	; 0x5c
     4e6:	785b      	ldrb	r3, [r3, #1]
     4e8:	2b00      	cmp	r3, #0
     4ea:	d18a      	bne.n	402 <STACK_SIZE+0x2>
		if(!current_button_level.button_3 && last_button_level.button_3){
     4ec:	4b2c      	ldr	r3, [pc, #176]	; (5a0 <STACK_SIZE+0x1a0>)
     4ee:	3360      	adds	r3, #96	; 0x60
     4f0:	789b      	ldrb	r3, [r3, #2]
     4f2:	2b00      	cmp	r3, #0
     4f4:	d104      	bne.n	500 <STACK_SIZE+0x100>
     4f6:	4b2a      	ldr	r3, [pc, #168]	; (5a0 <STACK_SIZE+0x1a0>)
     4f8:	335c      	adds	r3, #92	; 0x5c
     4fa:	789b      	ldrb	r3, [r3, #2]
     4fc:	2b00      	cmp	r3, #0
     4fe:	d18a      	bne.n	416 <STACK_SIZE+0x16>
		if(!current_button_level.button_4 && last_button_level.button_4){
     500:	4b27      	ldr	r3, [pc, #156]	; (5a0 <STACK_SIZE+0x1a0>)
     502:	3360      	adds	r3, #96	; 0x60
     504:	78db      	ldrb	r3, [r3, #3]
     506:	2b00      	cmp	r3, #0
     508:	d104      	bne.n	514 <STACK_SIZE+0x114>
     50a:	4b25      	ldr	r3, [pc, #148]	; (5a0 <STACK_SIZE+0x1a0>)
     50c:	335c      	adds	r3, #92	; 0x5c
     50e:	78db      	ldrb	r3, [r3, #3]
     510:	2b00      	cmp	r3, #0
     512:	d18a      	bne.n	42a <STACK_SIZE+0x2a>
		if(current_button_level.button_1 && !last_button_level.button_1){
     514:	2360      	movs	r3, #96	; 0x60
     516:	4a22      	ldr	r2, [pc, #136]	; (5a0 <STACK_SIZE+0x1a0>)
     518:	5cd3      	ldrb	r3, [r2, r3]
     51a:	2b00      	cmp	r3, #0
     51c:	d003      	beq.n	526 <STACK_SIZE+0x126>
     51e:	235c      	movs	r3, #92	; 0x5c
     520:	5cd3      	ldrb	r3, [r2, r3]
     522:	2b00      	cmp	r3, #0
     524:	d08b      	beq.n	43e <STACK_SIZE+0x3e>
		if(current_button_level.button_2 && !last_button_level.button_2){
     526:	4b1e      	ldr	r3, [pc, #120]	; (5a0 <STACK_SIZE+0x1a0>)
     528:	3360      	adds	r3, #96	; 0x60
     52a:	785b      	ldrb	r3, [r3, #1]
     52c:	2b00      	cmp	r3, #0
     52e:	d004      	beq.n	53a <STACK_SIZE+0x13a>
     530:	4b1b      	ldr	r3, [pc, #108]	; (5a0 <STACK_SIZE+0x1a0>)
     532:	335c      	adds	r3, #92	; 0x5c
     534:	785b      	ldrb	r3, [r3, #1]
     536:	2b00      	cmp	r3, #0
     538:	d08b      	beq.n	452 <STACK_SIZE+0x52>
		if(current_button_level.button_3 && !last_button_level.button_3){
     53a:	4b19      	ldr	r3, [pc, #100]	; (5a0 <STACK_SIZE+0x1a0>)
     53c:	3360      	adds	r3, #96	; 0x60
     53e:	789b      	ldrb	r3, [r3, #2]
     540:	2b00      	cmp	r3, #0
     542:	d004      	beq.n	54e <STACK_SIZE+0x14e>
     544:	4b16      	ldr	r3, [pc, #88]	; (5a0 <STACK_SIZE+0x1a0>)
     546:	335c      	adds	r3, #92	; 0x5c
     548:	789b      	ldrb	r3, [r3, #2]
     54a:	2b00      	cmp	r3, #0
     54c:	d08b      	beq.n	466 <STACK_SIZE+0x66>
		if(current_button_level.button_4 && !last_button_level.button_4){
     54e:	4b14      	ldr	r3, [pc, #80]	; (5a0 <STACK_SIZE+0x1a0>)
     550:	3360      	adds	r3, #96	; 0x60
     552:	78db      	ldrb	r3, [r3, #3]
     554:	2b00      	cmp	r3, #0
     556:	d090      	beq.n	47a <STACK_SIZE+0x7a>
     558:	4b11      	ldr	r3, [pc, #68]	; (5a0 <STACK_SIZE+0x1a0>)
     55a:	335c      	adds	r3, #92	; 0x5c
     55c:	78db      	ldrb	r3, [r3, #3]
     55e:	2b00      	cmp	r3, #0
     560:	d18b      	bne.n	47a <STACK_SIZE+0x7a>
			buffer.write(0x04 | BUTTON_RELEASED);
     562:	2144      	movs	r1, #68	; 0x44
     564:	480e      	ldr	r0, [pc, #56]	; (5a0 <STACK_SIZE+0x1a0>)
     566:	3008      	adds	r0, #8
     568:	4b0b      	ldr	r3, [pc, #44]	; (598 <STACK_SIZE+0x198>)
     56a:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
     56c:	2280      	movs	r2, #128	; 0x80
     56e:	0512      	lsls	r2, r2, #20
     570:	4b0a      	ldr	r3, [pc, #40]	; (59c <STACK_SIZE+0x19c>)
     572:	615a      	str	r2, [r3, #20]
     574:	e781      	b.n	47a <STACK_SIZE+0x7a>
     576:	46c0      	nop			; (mov r8, r8)
     578:	00001615 	.word	0x00001615
     57c:	0000108d 	.word	0x0000108d
     580:	00000d45 	.word	0x00000d45
     584:	00000355 	.word	0x00000355
     588:	00000395 	.word	0x00000395
     58c:	00000279 	.word	0x00000279
     590:	00000305 	.word	0x00000305
     594:	00001ad0 	.word	0x00001ad0
     598:	00000a8d 	.word	0x00000a8d
     59c:	41004400 	.word	0x41004400
     5a0:	20000460 	.word	0x20000460
     5a4:	000001d5 	.word	0x000001d5

000005a8 <_GLOBAL__sub_I__Z6expandPhS_t>:
}
     5a8:	b510      	push	{r4, lr}
     5aa:	4902      	ldr	r1, [pc, #8]	; (5b4 <_GLOBAL__sub_I__Z6expandPhS_t+0xc>)
     5ac:	2001      	movs	r0, #1
     5ae:	4b02      	ldr	r3, [pc, #8]	; (5b8 <_GLOBAL__sub_I__Z6expandPhS_t+0x10>)
     5b0:	4798      	blx	r3
     5b2:	bd10      	pop	{r4, pc}
     5b4:	0000ffff 	.word	0x0000ffff
     5b8:	00000195 	.word	0x00000195

000005bc <i2c_slave_init>:
     5bc:	b5f0      	push	{r4, r5, r6, r7, lr}
     5be:	46ce      	mov	lr, r9
     5c0:	4647      	mov	r7, r8
     5c2:	b580      	push	{r7, lr}
     5c4:	b083      	sub	sp, #12
     5c6:	0005      	movs	r5, r0
     5c8:	000c      	movs	r4, r1
     5ca:	0016      	movs	r6, r2
     5cc:	6029      	str	r1, [r5, #0]
     5ce:	680b      	ldr	r3, [r1, #0]
     5d0:	201c      	movs	r0, #28
     5d2:	079b      	lsls	r3, r3, #30
     5d4:	d504      	bpl.n	5e0 <i2c_slave_init+0x24>
     5d6:	b003      	add	sp, #12
     5d8:	bc0c      	pop	{r2, r3}
     5da:	4690      	mov	r8, r2
     5dc:	4699      	mov	r9, r3
     5de:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5e0:	680b      	ldr	r3, [r1, #0]
     5e2:	3817      	subs	r0, #23
     5e4:	07db      	lsls	r3, r3, #31
     5e6:	d4f6      	bmi.n	5d6 <i2c_slave_init+0x1a>
     5e8:	0008      	movs	r0, r1
     5ea:	4b4d      	ldr	r3, [pc, #308]	; (720 <i2c_slave_init+0x164>)
     5ec:	4699      	mov	r9, r3
     5ee:	4798      	blx	r3
     5f0:	4a4c      	ldr	r2, [pc, #304]	; (724 <i2c_slave_init+0x168>)
     5f2:	6a11      	ldr	r1, [r2, #32]
     5f4:	1c83      	adds	r3, r0, #2
     5f6:	2701      	movs	r7, #1
     5f8:	46b8      	mov	r8, r7
     5fa:	409f      	lsls	r7, r3
     5fc:	003b      	movs	r3, r7
     5fe:	430b      	orrs	r3, r1
     600:	6213      	str	r3, [r2, #32]
     602:	a901      	add	r1, sp, #4
     604:	7e73      	ldrb	r3, [r6, #25]
     606:	700b      	strb	r3, [r1, #0]
     608:	300e      	adds	r0, #14
     60a:	b2c3      	uxtb	r3, r0
     60c:	001f      	movs	r7, r3
     60e:	0018      	movs	r0, r3
     610:	4b45      	ldr	r3, [pc, #276]	; (728 <i2c_slave_init+0x16c>)
     612:	4798      	blx	r3
     614:	0038      	movs	r0, r7
     616:	4b45      	ldr	r3, [pc, #276]	; (72c <i2c_slave_init+0x170>)
     618:	4798      	blx	r3
     61a:	7e70      	ldrb	r0, [r6, #25]
     61c:	2100      	movs	r1, #0
     61e:	4b44      	ldr	r3, [pc, #272]	; (730 <i2c_slave_init+0x174>)
     620:	4798      	blx	r3
     622:	6828      	ldr	r0, [r5, #0]
     624:	47c8      	blx	r9
     626:	0007      	movs	r7, r0
     628:	4942      	ldr	r1, [pc, #264]	; (734 <i2c_slave_init+0x178>)
     62a:	4b43      	ldr	r3, [pc, #268]	; (738 <i2c_slave_init+0x17c>)
     62c:	4798      	blx	r3
     62e:	00bf      	lsls	r7, r7, #2
     630:	4b42      	ldr	r3, [pc, #264]	; (73c <i2c_slave_init+0x180>)
     632:	50fd      	str	r5, [r7, r3]
     634:	2300      	movs	r3, #0
     636:	2224      	movs	r2, #36	; 0x24
     638:	54ab      	strb	r3, [r5, r2]
     63a:	3201      	adds	r2, #1
     63c:	54ab      	strb	r3, [r5, r2]
     63e:	84eb      	strh	r3, [r5, #38]	; 0x26
     640:	7e33      	ldrb	r3, [r6, #24]
     642:	726b      	strb	r3, [r5, #9]
     644:	2310      	movs	r3, #16
     646:	6023      	str	r3, [r4, #0]
     648:	682c      	ldr	r4, [r5, #0]
     64a:	8933      	ldrh	r3, [r6, #8]
     64c:	80eb      	strh	r3, [r5, #6]
     64e:	7c33      	ldrb	r3, [r6, #16]
     650:	722b      	strb	r3, [r5, #8]
     652:	2380      	movs	r3, #128	; 0x80
     654:	466a      	mov	r2, sp
     656:	7013      	strb	r3, [r2, #0]
     658:	2300      	movs	r3, #0
     65a:	7053      	strb	r3, [r2, #1]
     65c:	466b      	mov	r3, sp
     65e:	4642      	mov	r2, r8
     660:	709a      	strb	r2, [r3, #2]
     662:	2300      	movs	r3, #0
     664:	466a      	mov	r2, sp
     666:	70d3      	strb	r3, [r2, #3]
     668:	69f0      	ldr	r0, [r6, #28]
     66a:	6a35      	ldr	r5, [r6, #32]
     66c:	2800      	cmp	r0, #0
     66e:	d04b      	beq.n	708 <i2c_slave_init+0x14c>
     670:	466b      	mov	r3, sp
     672:	7018      	strb	r0, [r3, #0]
     674:	2302      	movs	r3, #2
     676:	466a      	mov	r2, sp
     678:	7053      	strb	r3, [r2, #1]
     67a:	0c00      	lsrs	r0, r0, #16
     67c:	b2c0      	uxtb	r0, r0
     67e:	4669      	mov	r1, sp
     680:	4b2f      	ldr	r3, [pc, #188]	; (740 <i2c_slave_init+0x184>)
     682:	4798      	blx	r3
     684:	2d00      	cmp	r5, #0
     686:	d044      	beq.n	712 <i2c_slave_init+0x156>
     688:	466b      	mov	r3, sp
     68a:	701d      	strb	r5, [r3, #0]
     68c:	2302      	movs	r3, #2
     68e:	466a      	mov	r2, sp
     690:	7053      	strb	r3, [r2, #1]
     692:	0c2d      	lsrs	r5, r5, #16
     694:	b2e8      	uxtb	r0, r5
     696:	4669      	mov	r1, sp
     698:	4b29      	ldr	r3, [pc, #164]	; (740 <i2c_slave_init+0x184>)
     69a:	4798      	blx	r3
     69c:	7eb3      	ldrb	r3, [r6, #26]
     69e:	2280      	movs	r2, #128	; 0x80
     6a0:	2b00      	cmp	r3, #0
     6a2:	d104      	bne.n	6ae <i2c_slave_init+0xf2>
     6a4:	4b27      	ldr	r3, [pc, #156]	; (744 <i2c_slave_init+0x188>)
     6a6:	789b      	ldrb	r3, [r3, #2]
     6a8:	079b      	lsls	r3, r3, #30
     6aa:	0fdb      	lsrs	r3, r3, #31
     6ac:	01da      	lsls	r2, r3, #7
     6ae:	2325      	movs	r3, #37	; 0x25
     6b0:	5cf3      	ldrb	r3, [r6, r3]
     6b2:	2b00      	cmp	r3, #0
     6b4:	d104      	bne.n	6c0 <i2c_slave_init+0x104>
     6b6:	2380      	movs	r3, #128	; 0x80
     6b8:	049b      	lsls	r3, r3, #18
     6ba:	6971      	ldr	r1, [r6, #20]
     6bc:	4299      	cmp	r1, r3
     6be:	d102      	bne.n	6c6 <i2c_slave_init+0x10a>
     6c0:	2380      	movs	r3, #128	; 0x80
     6c2:	051b      	lsls	r3, r3, #20
     6c4:	431a      	orrs	r2, r3
     6c6:	6820      	ldr	r0, [r4, #0]
     6c8:	6873      	ldr	r3, [r6, #4]
     6ca:	6971      	ldr	r1, [r6, #20]
     6cc:	430b      	orrs	r3, r1
     6ce:	2124      	movs	r1, #36	; 0x24
     6d0:	5c71      	ldrb	r1, [r6, r1]
     6d2:	0789      	lsls	r1, r1, #30
     6d4:	430b      	orrs	r3, r1
     6d6:	2126      	movs	r1, #38	; 0x26
     6d8:	5c71      	ldrb	r1, [r6, r1]
     6da:	05c9      	lsls	r1, r1, #23
     6dc:	430b      	orrs	r3, r1
     6de:	4303      	orrs	r3, r0
     6e0:	4313      	orrs	r3, r2
     6e2:	6023      	str	r3, [r4, #0]
     6e4:	8972      	ldrh	r2, [r6, #10]
     6e6:	2380      	movs	r3, #128	; 0x80
     6e8:	005b      	lsls	r3, r3, #1
     6ea:	4313      	orrs	r3, r2
     6ec:	6063      	str	r3, [r4, #4]
     6ee:	89b3      	ldrh	r3, [r6, #12]
     6f0:	005b      	lsls	r3, r3, #1
     6f2:	89f2      	ldrh	r2, [r6, #14]
     6f4:	0452      	lsls	r2, r2, #17
     6f6:	4313      	orrs	r3, r2
     6f8:	7c72      	ldrb	r2, [r6, #17]
     6fa:	4313      	orrs	r3, r2
     6fc:	7c32      	ldrb	r2, [r6, #16]
     6fe:	03d2      	lsls	r2, r2, #15
     700:	4313      	orrs	r3, r2
     702:	6263      	str	r3, [r4, #36]	; 0x24
     704:	2000      	movs	r0, #0
     706:	e766      	b.n	5d6 <i2c_slave_init+0x1a>
     708:	2100      	movs	r1, #0
     70a:	0020      	movs	r0, r4
     70c:	4b0e      	ldr	r3, [pc, #56]	; (748 <i2c_slave_init+0x18c>)
     70e:	4798      	blx	r3
     710:	e7ae      	b.n	670 <i2c_slave_init+0xb4>
     712:	2101      	movs	r1, #1
     714:	0020      	movs	r0, r4
     716:	4b0c      	ldr	r3, [pc, #48]	; (748 <i2c_slave_init+0x18c>)
     718:	4798      	blx	r3
     71a:	0005      	movs	r5, r0
     71c:	e7b4      	b.n	688 <i2c_slave_init+0xcc>
     71e:	46c0      	nop			; (mov r8, r8)
     720:	00000c55 	.word	0x00000c55
     724:	40000400 	.word	0x40000400
     728:	00001419 	.word	0x00001419
     72c:	0000138d 	.word	0x0000138d
     730:	00000b89 	.word	0x00000b89
     734:	000007b9 	.word	0x000007b9
     738:	00000c7d 	.word	0x00000c7d
     73c:	20000578 	.word	0x20000578
     740:	00001511 	.word	0x00001511
     744:	41002000 	.word	0x41002000
     748:	00000bd5 	.word	0x00000bd5

0000074c <i2c_slave_register_callback>:
     74c:	b510      	push	{r4, lr}
     74e:	1c93      	adds	r3, r2, #2
     750:	009b      	lsls	r3, r3, #2
     752:	18c3      	adds	r3, r0, r3
     754:	6059      	str	r1, [r3, #4]
     756:	2424      	movs	r4, #36	; 0x24
     758:	5d03      	ldrb	r3, [r0, r4]
     75a:	2101      	movs	r1, #1
     75c:	4091      	lsls	r1, r2
     75e:	430b      	orrs	r3, r1
     760:	b2db      	uxtb	r3, r3
     762:	5503      	strb	r3, [r0, r4]
     764:	bd10      	pop	{r4, pc}

00000766 <i2c_slave_read_packet_job>:
     766:	8d02      	ldrh	r2, [r0, #40]	; 0x28
     768:	2305      	movs	r3, #5
     76a:	2a00      	cmp	r2, #0
     76c:	d001      	beq.n	772 <i2c_slave_read_packet_job+0xc>
     76e:	0018      	movs	r0, r3
     770:	4770      	bx	lr
     772:	684b      	ldr	r3, [r1, #4]
     774:	62c3      	str	r3, [r0, #44]	; 0x2c
     776:	880b      	ldrh	r3, [r1, #0]
     778:	8503      	strh	r3, [r0, #40]	; 0x28
     77a:	880b      	ldrh	r3, [r1, #0]
     77c:	84c3      	strh	r3, [r0, #38]	; 0x26
     77e:	3205      	adds	r2, #5
     780:	2331      	movs	r3, #49	; 0x31
     782:	54c2      	strb	r2, [r0, r3]
     784:	6803      	ldr	r3, [r0, #0]
     786:	3202      	adds	r2, #2
     788:	759a      	strb	r2, [r3, #22]
     78a:	2300      	movs	r3, #0
     78c:	e7ef      	b.n	76e <i2c_slave_read_packet_job+0x8>

0000078e <i2c_slave_write_packet_job>:
     78e:	8d02      	ldrh	r2, [r0, #40]	; 0x28
     790:	2305      	movs	r3, #5
     792:	2a00      	cmp	r2, #0
     794:	d001      	beq.n	79a <i2c_slave_write_packet_job+0xc>
     796:	0018      	movs	r0, r3
     798:	4770      	bx	lr
     79a:	684b      	ldr	r3, [r1, #4]
     79c:	62c3      	str	r3, [r0, #44]	; 0x2c
     79e:	880b      	ldrh	r3, [r1, #0]
     7a0:	8503      	strh	r3, [r0, #40]	; 0x28
     7a2:	880b      	ldrh	r3, [r1, #0]
     7a4:	84c3      	strh	r3, [r0, #38]	; 0x26
     7a6:	3205      	adds	r2, #5
     7a8:	2331      	movs	r3, #49	; 0x31
     7aa:	54c2      	strb	r2, [r0, r3]
     7ac:	6803      	ldr	r3, [r0, #0]
     7ae:	3202      	adds	r2, #2
     7b0:	759a      	strb	r2, [r3, #22]
     7b2:	2300      	movs	r3, #0
     7b4:	e7ef      	b.n	796 <i2c_slave_write_packet_job+0x8>
	...

000007b8 <_i2c_slave_interrupt_handler>:
     7b8:	b570      	push	{r4, r5, r6, lr}
     7ba:	0080      	lsls	r0, r0, #2
     7bc:	4b9b      	ldr	r3, [pc, #620]	; (a2c <_i2c_slave_interrupt_handler+0x274>)
     7be:	58c4      	ldr	r4, [r0, r3]
     7c0:	6825      	ldr	r5, [r4, #0]
     7c2:	2325      	movs	r3, #37	; 0x25
     7c4:	5ce3      	ldrb	r3, [r4, r3]
     7c6:	2224      	movs	r2, #36	; 0x24
     7c8:	5ca6      	ldrb	r6, [r4, r2]
     7ca:	401e      	ands	r6, r3
     7cc:	7e2b      	ldrb	r3, [r5, #24]
     7ce:	079b      	lsls	r3, r3, #30
     7d0:	d400      	bmi.n	7d4 <_i2c_slave_interrupt_handler+0x1c>
     7d2:	e095      	b.n	900 <_i2c_slave_interrupt_handler+0x148>
     7d4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     7d6:	b29b      	uxth	r3, r3
     7d8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
     7da:	4293      	cmp	r3, r2
     7dc:	d00d      	beq.n	7fa <_i2c_slave_interrupt_handler+0x42>
     7de:	2330      	movs	r3, #48	; 0x30
     7e0:	5ce3      	ldrb	r3, [r4, r3]
     7e2:	2b00      	cmp	r3, #0
     7e4:	d109      	bne.n	7fa <_i2c_slave_interrupt_handler+0x42>
     7e6:	2231      	movs	r2, #49	; 0x31
     7e8:	54a3      	strb	r3, [r4, r2]
     7ea:	84e3      	strh	r3, [r4, #38]	; 0x26
     7ec:	8523      	strh	r3, [r4, #40]	; 0x28
     7ee:	07b3      	lsls	r3, r6, #30
     7f0:	d50b      	bpl.n	80a <_i2c_slave_interrupt_handler+0x52>
     7f2:	6923      	ldr	r3, [r4, #16]
     7f4:	0020      	movs	r0, r4
     7f6:	4798      	blx	r3
     7f8:	e007      	b.n	80a <_i2c_slave_interrupt_handler+0x52>
     7fa:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     7fc:	b29b      	uxth	r3, r3
     7fe:	429a      	cmp	r2, r3
     800:	d003      	beq.n	80a <_i2c_slave_interrupt_handler+0x52>
     802:	2330      	movs	r3, #48	; 0x30
     804:	5ce3      	ldrb	r3, [r4, r3]
     806:	2b01      	cmp	r3, #1
     808:	d022      	beq.n	850 <_i2c_slave_interrupt_handler+0x98>
     80a:	8b6a      	ldrh	r2, [r5, #26]
     80c:	2343      	movs	r3, #67	; 0x43
     80e:	421a      	tst	r2, r3
     810:	d004      	beq.n	81c <_i2c_slave_interrupt_handler+0x64>
     812:	2210      	movs	r2, #16
     814:	3b12      	subs	r3, #18
     816:	54e2      	strb	r2, [r4, r3]
     818:	06b3      	lsls	r3, r6, #26
     81a:	d424      	bmi.n	866 <_i2c_slave_interrupt_handler+0xae>
     81c:	7a63      	ldrb	r3, [r4, #9]
     81e:	2b00      	cmp	r3, #0
     820:	d125      	bne.n	86e <_i2c_slave_interrupt_handler+0xb6>
     822:	8b6b      	ldrh	r3, [r5, #26]
     824:	071b      	lsls	r3, r3, #28
     826:	d54a      	bpl.n	8be <_i2c_slave_interrupt_handler+0x106>
     828:	2201      	movs	r2, #1
     82a:	2330      	movs	r3, #48	; 0x30
     82c:	54e2      	strb	r2, [r4, r3]
     82e:	0773      	lsls	r3, r6, #29
     830:	d438      	bmi.n	8a4 <_i2c_slave_interrupt_handler+0xec>
     832:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     834:	b29b      	uxth	r3, r3
     836:	2b00      	cmp	r3, #0
     838:	d138      	bne.n	8ac <_i2c_slave_interrupt_handler+0xf4>
     83a:	6825      	ldr	r5, [r4, #0]
     83c:	4b7c      	ldr	r3, [pc, #496]	; (a30 <_i2c_slave_interrupt_handler+0x278>)
     83e:	4798      	blx	r3
     840:	2300      	movs	r3, #0
     842:	836b      	strh	r3, [r5, #26]
     844:	2380      	movs	r3, #128	; 0x80
     846:	02db      	lsls	r3, r3, #11
     848:	606b      	str	r3, [r5, #4]
     84a:	4b7a      	ldr	r3, [pc, #488]	; (a34 <_i2c_slave_interrupt_handler+0x27c>)
     84c:	4798      	blx	r3
     84e:	e018      	b.n	882 <_i2c_slave_interrupt_handler+0xca>
     850:	2300      	movs	r3, #0
     852:	2231      	movs	r2, #49	; 0x31
     854:	54a3      	strb	r3, [r4, r2]
     856:	84e3      	strh	r3, [r4, #38]	; 0x26
     858:	8523      	strh	r3, [r4, #40]	; 0x28
     85a:	07f3      	lsls	r3, r6, #31
     85c:	d5d5      	bpl.n	80a <_i2c_slave_interrupt_handler+0x52>
     85e:	68e3      	ldr	r3, [r4, #12]
     860:	0020      	movs	r0, r4
     862:	4798      	blx	r3
     864:	e7d1      	b.n	80a <_i2c_slave_interrupt_handler+0x52>
     866:	6a23      	ldr	r3, [r4, #32]
     868:	0020      	movs	r0, r4
     86a:	4798      	blx	r3
     86c:	e7d6      	b.n	81c <_i2c_slave_interrupt_handler+0x64>
     86e:	6825      	ldr	r5, [r4, #0]
     870:	4b6f      	ldr	r3, [pc, #444]	; (a30 <_i2c_slave_interrupt_handler+0x278>)
     872:	4798      	blx	r3
     874:	2300      	movs	r3, #0
     876:	836b      	strh	r3, [r5, #26]
     878:	2380      	movs	r3, #128	; 0x80
     87a:	02db      	lsls	r3, r3, #11
     87c:	606b      	str	r3, [r5, #4]
     87e:	4b6d      	ldr	r3, [pc, #436]	; (a34 <_i2c_slave_interrupt_handler+0x27c>)
     880:	4798      	blx	r3
     882:	6823      	ldr	r3, [r4, #0]
     884:	7e1a      	ldrb	r2, [r3, #24]
     886:	07d2      	lsls	r2, r2, #31
     888:	d501      	bpl.n	88e <_i2c_slave_interrupt_handler+0xd6>
     88a:	2201      	movs	r2, #1
     88c:	761a      	strb	r2, [r3, #24]
     88e:	2202      	movs	r2, #2
     890:	761a      	strb	r2, [r3, #24]
     892:	6824      	ldr	r4, [r4, #0]
     894:	4b66      	ldr	r3, [pc, #408]	; (a30 <_i2c_slave_interrupt_handler+0x278>)
     896:	4798      	blx	r3
     898:	2300      	movs	r3, #0
     89a:	8363      	strh	r3, [r4, #26]
     89c:	6063      	str	r3, [r4, #4]
     89e:	4b65      	ldr	r3, [pc, #404]	; (a34 <_i2c_slave_interrupt_handler+0x27c>)
     8a0:	4798      	blx	r3
     8a2:	bd70      	pop	{r4, r5, r6, pc}
     8a4:	6963      	ldr	r3, [r4, #20]
     8a6:	0020      	movs	r0, r4
     8a8:	4798      	blx	r3
     8aa:	e7c2      	b.n	832 <_i2c_slave_interrupt_handler+0x7a>
     8ac:	6825      	ldr	r5, [r4, #0]
     8ae:	4b60      	ldr	r3, [pc, #384]	; (a30 <_i2c_slave_interrupt_handler+0x278>)
     8b0:	4798      	blx	r3
     8b2:	2300      	movs	r3, #0
     8b4:	836b      	strh	r3, [r5, #26]
     8b6:	606b      	str	r3, [r5, #4]
     8b8:	4b5e      	ldr	r3, [pc, #376]	; (a34 <_i2c_slave_interrupt_handler+0x27c>)
     8ba:	4798      	blx	r3
     8bc:	e7e1      	b.n	882 <_i2c_slave_interrupt_handler+0xca>
     8be:	2200      	movs	r2, #0
     8c0:	2330      	movs	r3, #48	; 0x30
     8c2:	54e2      	strb	r2, [r4, r3]
     8c4:	0733      	lsls	r3, r6, #28
     8c6:	d40e      	bmi.n	8e6 <_i2c_slave_interrupt_handler+0x12e>
     8c8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     8ca:	b29b      	uxth	r3, r3
     8cc:	2b00      	cmp	r3, #0
     8ce:	d10e      	bne.n	8ee <_i2c_slave_interrupt_handler+0x136>
     8d0:	6825      	ldr	r5, [r4, #0]
     8d2:	4b57      	ldr	r3, [pc, #348]	; (a30 <_i2c_slave_interrupt_handler+0x278>)
     8d4:	4798      	blx	r3
     8d6:	2300      	movs	r3, #0
     8d8:	836b      	strh	r3, [r5, #26]
     8da:	2380      	movs	r3, #128	; 0x80
     8dc:	02db      	lsls	r3, r3, #11
     8de:	606b      	str	r3, [r5, #4]
     8e0:	4b54      	ldr	r3, [pc, #336]	; (a34 <_i2c_slave_interrupt_handler+0x27c>)
     8e2:	4798      	blx	r3
     8e4:	e7cd      	b.n	882 <_i2c_slave_interrupt_handler+0xca>
     8e6:	69a3      	ldr	r3, [r4, #24]
     8e8:	0020      	movs	r0, r4
     8ea:	4798      	blx	r3
     8ec:	e7ec      	b.n	8c8 <_i2c_slave_interrupt_handler+0x110>
     8ee:	6825      	ldr	r5, [r4, #0]
     8f0:	4b4f      	ldr	r3, [pc, #316]	; (a30 <_i2c_slave_interrupt_handler+0x278>)
     8f2:	4798      	blx	r3
     8f4:	2300      	movs	r3, #0
     8f6:	836b      	strh	r3, [r5, #26]
     8f8:	606b      	str	r3, [r5, #4]
     8fa:	4b4e      	ldr	r3, [pc, #312]	; (a34 <_i2c_slave_interrupt_handler+0x27c>)
     8fc:	4798      	blx	r3
     8fe:	e7c0      	b.n	882 <_i2c_slave_interrupt_handler+0xca>
     900:	7e2b      	ldrb	r3, [r5, #24]
     902:	07db      	lsls	r3, r3, #31
     904:	d52e      	bpl.n	964 <_i2c_slave_interrupt_handler+0x1ac>
     906:	2301      	movs	r3, #1
     908:	762b      	strb	r3, [r5, #24]
     90a:	3304      	adds	r3, #4
     90c:	752b      	strb	r3, [r5, #20]
     90e:	3320      	adds	r3, #32
     910:	5ce3      	ldrb	r3, [r4, r3]
     912:	075b      	lsls	r3, r3, #29
     914:	d405      	bmi.n	922 <_i2c_slave_interrupt_handler+0x16a>
     916:	2325      	movs	r3, #37	; 0x25
     918:	5ce3      	ldrb	r3, [r4, r3]
     91a:	071b      	lsls	r3, r3, #28
     91c:	d401      	bmi.n	922 <_i2c_slave_interrupt_handler+0x16a>
     91e:	2302      	movs	r3, #2
     920:	752b      	strb	r3, [r5, #20]
     922:	2331      	movs	r3, #49	; 0x31
     924:	5ce3      	ldrb	r3, [r4, r3]
     926:	2b1e      	cmp	r3, #30
     928:	d0bb      	beq.n	8a2 <_i2c_slave_interrupt_handler+0xea>
     92a:	2331      	movs	r3, #49	; 0x31
     92c:	5ce3      	ldrb	r3, [r4, r3]
     92e:	2b10      	cmp	r3, #16
     930:	d0b7      	beq.n	8a2 <_i2c_slave_interrupt_handler+0xea>
     932:	2300      	movs	r3, #0
     934:	2231      	movs	r2, #49	; 0x31
     936:	54a3      	strb	r3, [r4, r2]
     938:	84e3      	strh	r3, [r4, #38]	; 0x26
     93a:	8523      	strh	r3, [r4, #40]	; 0x28
     93c:	07b3      	lsls	r3, r6, #30
     93e:	d503      	bpl.n	948 <_i2c_slave_interrupt_handler+0x190>
     940:	2330      	movs	r3, #48	; 0x30
     942:	5ce3      	ldrb	r3, [r4, r3]
     944:	2b00      	cmp	r3, #0
     946:	d009      	beq.n	95c <_i2c_slave_interrupt_handler+0x1a4>
     948:	07f3      	lsls	r3, r6, #31
     94a:	d5aa      	bpl.n	8a2 <_i2c_slave_interrupt_handler+0xea>
     94c:	2330      	movs	r3, #48	; 0x30
     94e:	5ce3      	ldrb	r3, [r4, r3]
     950:	2b01      	cmp	r3, #1
     952:	d1a6      	bne.n	8a2 <_i2c_slave_interrupt_handler+0xea>
     954:	68e3      	ldr	r3, [r4, #12]
     956:	0020      	movs	r0, r4
     958:	4798      	blx	r3
     95a:	e7a2      	b.n	8a2 <_i2c_slave_interrupt_handler+0xea>
     95c:	6923      	ldr	r3, [r4, #16]
     95e:	0020      	movs	r0, r4
     960:	4798      	blx	r3
     962:	e79e      	b.n	8a2 <_i2c_slave_interrupt_handler+0xea>
     964:	7e2b      	ldrb	r3, [r5, #24]
     966:	075b      	lsls	r3, r3, #29
     968:	d59b      	bpl.n	8a2 <_i2c_slave_interrupt_handler+0xea>
     96a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     96c:	2b00      	cmp	r3, #0
     96e:	d01e      	beq.n	9ae <_i2c_slave_interrupt_handler+0x1f6>
     970:	2230      	movs	r2, #48	; 0x30
     972:	5ca2      	ldrb	r2, [r4, r2]
     974:	2a01      	cmp	r2, #1
     976:	d013      	beq.n	9a0 <_i2c_slave_interrupt_handler+0x1e8>
     978:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     97a:	b29b      	uxth	r3, r3
     97c:	2b00      	cmp	r3, #0
     97e:	d100      	bne.n	982 <_i2c_slave_interrupt_handler+0x1ca>
     980:	e78f      	b.n	8a2 <_i2c_slave_interrupt_handler+0xea>
     982:	2330      	movs	r3, #48	; 0x30
     984:	5ce3      	ldrb	r3, [r4, r3]
     986:	2b00      	cmp	r3, #0
     988:	d044      	beq.n	a14 <_i2c_slave_interrupt_handler+0x25c>
     98a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     98c:	1c5a      	adds	r2, r3, #1
     98e:	62e2      	str	r2, [r4, #44]	; 0x2c
     990:	781b      	ldrb	r3, [r3, #0]
     992:	b2db      	uxtb	r3, r3
     994:	2228      	movs	r2, #40	; 0x28
     996:	54ab      	strb	r3, [r5, r2]
     998:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     99a:	3b01      	subs	r3, #1
     99c:	8523      	strh	r3, [r4, #40]	; 0x28
     99e:	e780      	b.n	8a2 <_i2c_slave_interrupt_handler+0xea>
     9a0:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
     9a2:	b292      	uxth	r2, r2
     9a4:	4293      	cmp	r3, r2
     9a6:	d2e7      	bcs.n	978 <_i2c_slave_interrupt_handler+0x1c0>
     9a8:	8b6b      	ldrh	r3, [r5, #26]
     9aa:	075b      	lsls	r3, r3, #29
     9ac:	d5e4      	bpl.n	978 <_i2c_slave_interrupt_handler+0x1c0>
     9ae:	2300      	movs	r3, #0
     9b0:	8523      	strh	r3, [r4, #40]	; 0x28
     9b2:	84e3      	strh	r3, [r4, #38]	; 0x26
     9b4:	3330      	adds	r3, #48	; 0x30
     9b6:	5ce3      	ldrb	r3, [r4, r3]
     9b8:	2b00      	cmp	r3, #0
     9ba:	d117      	bne.n	9ec <_i2c_slave_interrupt_handler+0x234>
     9bc:	4b1c      	ldr	r3, [pc, #112]	; (a30 <_i2c_slave_interrupt_handler+0x278>)
     9be:	4798      	blx	r3
     9c0:	2300      	movs	r3, #0
     9c2:	836b      	strh	r3, [r5, #26]
     9c4:	2380      	movs	r3, #128	; 0x80
     9c6:	02db      	lsls	r3, r3, #11
     9c8:	606b      	str	r3, [r5, #4]
     9ca:	4b1a      	ldr	r3, [pc, #104]	; (a34 <_i2c_slave_interrupt_handler+0x27c>)
     9cc:	4798      	blx	r3
     9ce:	686a      	ldr	r2, [r5, #4]
     9d0:	2380      	movs	r3, #128	; 0x80
     9d2:	029b      	lsls	r3, r3, #10
     9d4:	4313      	orrs	r3, r2
     9d6:	606b      	str	r3, [r5, #4]
     9d8:	221e      	movs	r2, #30
     9da:	2331      	movs	r3, #49	; 0x31
     9dc:	54e2      	strb	r2, [r4, r3]
     9de:	06f3      	lsls	r3, r6, #27
     9e0:	d400      	bmi.n	9e4 <_i2c_slave_interrupt_handler+0x22c>
     9e2:	e75e      	b.n	8a2 <_i2c_slave_interrupt_handler+0xea>
     9e4:	69e3      	ldr	r3, [r4, #28]
     9e6:	0020      	movs	r0, r4
     9e8:	4798      	blx	r3
     9ea:	e75a      	b.n	8a2 <_i2c_slave_interrupt_handler+0xea>
     9ec:	4b10      	ldr	r3, [pc, #64]	; (a30 <_i2c_slave_interrupt_handler+0x278>)
     9ee:	4798      	blx	r3
     9f0:	2300      	movs	r3, #0
     9f2:	836b      	strh	r3, [r5, #26]
     9f4:	2380      	movs	r3, #128	; 0x80
     9f6:	02db      	lsls	r3, r3, #11
     9f8:	606b      	str	r3, [r5, #4]
     9fa:	4b0e      	ldr	r3, [pc, #56]	; (a34 <_i2c_slave_interrupt_handler+0x27c>)
     9fc:	4798      	blx	r3
     9fe:	686a      	ldr	r2, [r5, #4]
     a00:	2380      	movs	r3, #128	; 0x80
     a02:	029b      	lsls	r3, r3, #10
     a04:	4313      	orrs	r3, r2
     a06:	606b      	str	r3, [r5, #4]
     a08:	2331      	movs	r3, #49	; 0x31
     a0a:	2200      	movs	r2, #0
     a0c:	54e2      	strb	r2, [r4, r3]
     a0e:	3b2d      	subs	r3, #45	; 0x2d
     a10:	752b      	strb	r3, [r5, #20]
     a12:	e746      	b.n	8a2 <_i2c_slave_interrupt_handler+0xea>
     a14:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     a16:	1c53      	adds	r3, r2, #1
     a18:	62e3      	str	r3, [r4, #44]	; 0x2c
     a1a:	2328      	movs	r3, #40	; 0x28
     a1c:	5ceb      	ldrb	r3, [r5, r3]
     a1e:	b2db      	uxtb	r3, r3
     a20:	7013      	strb	r3, [r2, #0]
     a22:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     a24:	3b01      	subs	r3, #1
     a26:	8523      	strh	r3, [r4, #40]	; 0x28
     a28:	e73b      	b.n	8a2 <_i2c_slave_interrupt_handler+0xea>
     a2a:	46c0      	nop			; (mov r8, r8)
     a2c:	20000578 	.word	0x20000578
     a30:	00000da9 	.word	0x00000da9
     a34:	00000de9 	.word	0x00000de9

00000a38 <_ZN14CircularBufferC1Eh>:
     a38:	7281      	strb	r1, [r0, #10]
     a3a:	2300      	movs	r3, #0
     a3c:	72c3      	strb	r3, [r0, #11]
     a3e:	7303      	strb	r3, [r0, #12]
     a40:	4770      	bx	lr

00000a42 <_ZN14CircularBufferD1Ev>:
     a42:	4770      	bx	lr

00000a44 <_ZN14CircularBuffer4sizeEv>:
     a44:	7b03      	ldrb	r3, [r0, #12]
     a46:	7ac1      	ldrb	r1, [r0, #11]
     a48:	428b      	cmp	r3, r1
     a4a:	da05      	bge.n	a58 <_ZN14CircularBuffer4sizeEv+0x14>
     a4c:	7a82      	ldrb	r2, [r0, #10]
     a4e:	1a5b      	subs	r3, r3, r1
     a50:	b2d8      	uxtb	r0, r3
     a52:	1810      	adds	r0, r2, r0
     a54:	b2c0      	uxtb	r0, r0
     a56:	4770      	bx	lr
     a58:	1a5b      	subs	r3, r3, r1
     a5a:	b2d8      	uxtb	r0, r3
     a5c:	e7fb      	b.n	a56 <_ZN14CircularBuffer4sizeEv+0x12>

00000a5e <_ZNK14CircularBuffer7isEmptyEv>:
     a5e:	7ac3      	ldrb	r3, [r0, #11]
     a60:	7b00      	ldrb	r0, [r0, #12]
     a62:	1ac0      	subs	r0, r0, r3
     a64:	4243      	negs	r3, r0
     a66:	4158      	adcs	r0, r3
     a68:	b2c0      	uxtb	r0, r0
     a6a:	4770      	bx	lr

00000a6c <_ZNK14CircularBuffer6isFullEv>:
     a6c:	b510      	push	{r4, lr}
     a6e:	0004      	movs	r4, r0
     a70:	7b00      	ldrb	r0, [r0, #12]
     a72:	3001      	adds	r0, #1
     a74:	7aa1      	ldrb	r1, [r4, #10]
     a76:	4b04      	ldr	r3, [pc, #16]	; (a88 <_ZNK14CircularBuffer6isFullEv+0x1c>)
     a78:	4798      	blx	r3
     a7a:	7ae0      	ldrb	r0, [r4, #11]
     a7c:	1a40      	subs	r0, r0, r1
     a7e:	4241      	negs	r1, r0
     a80:	4148      	adcs	r0, r1
     a82:	b2c0      	uxtb	r0, r0
     a84:	bd10      	pop	{r4, pc}
     a86:	46c0      	nop			; (mov r8, r8)
     a88:	00001915 	.word	0x00001915

00000a8c <_ZN14CircularBuffer5writeEh>:
     a8c:	b570      	push	{r4, r5, r6, lr}
     a8e:	0004      	movs	r4, r0
     a90:	000d      	movs	r5, r1
     a92:	4b07      	ldr	r3, [pc, #28]	; (ab0 <_ZN14CircularBuffer5writeEh+0x24>)
     a94:	4798      	blx	r3
     a96:	2800      	cmp	r0, #0
     a98:	d108      	bne.n	aac <_ZN14CircularBuffer5writeEh+0x20>
     a9a:	7b20      	ldrb	r0, [r4, #12]
     a9c:	5425      	strb	r5, [r4, r0]
     a9e:	3001      	adds	r0, #1
     aa0:	7aa1      	ldrb	r1, [r4, #10]
     aa2:	4b04      	ldr	r3, [pc, #16]	; (ab4 <_ZN14CircularBuffer5writeEh+0x28>)
     aa4:	4798      	blx	r3
     aa6:	7321      	strb	r1, [r4, #12]
     aa8:	2001      	movs	r0, #1
     aaa:	bd70      	pop	{r4, r5, r6, pc}
     aac:	2000      	movs	r0, #0
     aae:	e7fc      	b.n	aaa <_ZN14CircularBuffer5writeEh+0x1e>
     ab0:	00000a6d 	.word	0x00000a6d
     ab4:	00001915 	.word	0x00001915

00000ab8 <_ZN14CircularBuffer4readERh>:
     ab8:	b570      	push	{r4, r5, r6, lr}
     aba:	0004      	movs	r4, r0
     abc:	000d      	movs	r5, r1
     abe:	4b08      	ldr	r3, [pc, #32]	; (ae0 <_ZN14CircularBuffer4readERh+0x28>)
     ac0:	4798      	blx	r3
     ac2:	2800      	cmp	r0, #0
     ac4:	d10a      	bne.n	adc <_ZN14CircularBuffer4readERh+0x24>
     ac6:	7ae3      	ldrb	r3, [r4, #11]
     ac8:	5ce3      	ldrb	r3, [r4, r3]
     aca:	702b      	strb	r3, [r5, #0]
     acc:	7ae0      	ldrb	r0, [r4, #11]
     ace:	3001      	adds	r0, #1
     ad0:	7aa1      	ldrb	r1, [r4, #10]
     ad2:	4b04      	ldr	r3, [pc, #16]	; (ae4 <_ZN14CircularBuffer4readERh+0x2c>)
     ad4:	4798      	blx	r3
     ad6:	72e1      	strb	r1, [r4, #11]
     ad8:	2001      	movs	r0, #1
     ada:	bd70      	pop	{r4, r5, r6, pc}
     adc:	2000      	movs	r0, #0
     ade:	e7fc      	b.n	ada <_ZN14CircularBuffer4readERh+0x22>
     ae0:	00000a5f 	.word	0x00000a5f
     ae4:	00001915 	.word	0x00001915

00000ae8 <WDT_Handler>:
     ae8:	b510      	push	{r4, lr}
     aea:	2201      	movs	r2, #1
     aec:	4b03      	ldr	r3, [pc, #12]	; (afc <WDT_Handler+0x14>)
     aee:	719a      	strb	r2, [r3, #6]
     af0:	4b03      	ldr	r3, [pc, #12]	; (b00 <WDT_Handler+0x18>)
     af2:	681b      	ldr	r3, [r3, #0]
     af4:	2b00      	cmp	r3, #0
     af6:	d000      	beq.n	afa <WDT_Handler+0x12>
     af8:	4798      	blx	r3
     afa:	bd10      	pop	{r4, pc}
     afc:	40001000 	.word	0x40001000
     b00:	2000056c 	.word	0x2000056c

00000b04 <_tc_interrupt_handler>:
     b04:	b570      	push	{r4, r5, r6, lr}
     b06:	0080      	lsls	r0, r0, #2
     b08:	4b16      	ldr	r3, [pc, #88]	; (b64 <_tc_interrupt_handler+0x60>)
     b0a:	58c4      	ldr	r4, [r0, r3]
     b0c:	6823      	ldr	r3, [r4, #0]
     b0e:	7b9d      	ldrb	r5, [r3, #14]
     b10:	7e22      	ldrb	r2, [r4, #24]
     b12:	7e63      	ldrb	r3, [r4, #25]
     b14:	4013      	ands	r3, r2
     b16:	401d      	ands	r5, r3
     b18:	07eb      	lsls	r3, r5, #31
     b1a:	d406      	bmi.n	b2a <_tc_interrupt_handler+0x26>
     b1c:	07ab      	lsls	r3, r5, #30
     b1e:	d40b      	bmi.n	b38 <_tc_interrupt_handler+0x34>
     b20:	06eb      	lsls	r3, r5, #27
     b22:	d410      	bmi.n	b46 <_tc_interrupt_handler+0x42>
     b24:	06ab      	lsls	r3, r5, #26
     b26:	d415      	bmi.n	b54 <_tc_interrupt_handler+0x50>
     b28:	bd70      	pop	{r4, r5, r6, pc}
     b2a:	0020      	movs	r0, r4
     b2c:	68a3      	ldr	r3, [r4, #8]
     b2e:	4798      	blx	r3
     b30:	2301      	movs	r3, #1
     b32:	6822      	ldr	r2, [r4, #0]
     b34:	7393      	strb	r3, [r2, #14]
     b36:	e7f1      	b.n	b1c <_tc_interrupt_handler+0x18>
     b38:	0020      	movs	r0, r4
     b3a:	68e3      	ldr	r3, [r4, #12]
     b3c:	4798      	blx	r3
     b3e:	2302      	movs	r3, #2
     b40:	6822      	ldr	r2, [r4, #0]
     b42:	7393      	strb	r3, [r2, #14]
     b44:	e7ec      	b.n	b20 <_tc_interrupt_handler+0x1c>
     b46:	0020      	movs	r0, r4
     b48:	6923      	ldr	r3, [r4, #16]
     b4a:	4798      	blx	r3
     b4c:	2310      	movs	r3, #16
     b4e:	6822      	ldr	r2, [r4, #0]
     b50:	7393      	strb	r3, [r2, #14]
     b52:	e7e7      	b.n	b24 <_tc_interrupt_handler+0x20>
     b54:	0020      	movs	r0, r4
     b56:	6963      	ldr	r3, [r4, #20]
     b58:	4798      	blx	r3
     b5a:	6823      	ldr	r3, [r4, #0]
     b5c:	2220      	movs	r2, #32
     b5e:	739a      	strb	r2, [r3, #14]
     b60:	e7e2      	b.n	b28 <_tc_interrupt_handler+0x24>
     b62:	46c0      	nop			; (mov r8, r8)
     b64:	20000570 	.word	0x20000570

00000b68 <TC1_Handler>:
     b68:	b510      	push	{r4, lr}
     b6a:	2000      	movs	r0, #0
     b6c:	4b01      	ldr	r3, [pc, #4]	; (b74 <TC1_Handler+0xc>)
     b6e:	4798      	blx	r3
     b70:	bd10      	pop	{r4, pc}
     b72:	46c0      	nop			; (mov r8, r8)
     b74:	00000b05 	.word	0x00000b05

00000b78 <TC2_Handler>:
     b78:	b510      	push	{r4, lr}
     b7a:	2001      	movs	r0, #1
     b7c:	4b01      	ldr	r3, [pc, #4]	; (b84 <TC2_Handler+0xc>)
     b7e:	4798      	blx	r3
     b80:	bd10      	pop	{r4, pc}
     b82:	46c0      	nop			; (mov r8, r8)
     b84:	00000b05 	.word	0x00000b05

00000b88 <sercom_set_gclk_generator>:
     b88:	b510      	push	{r4, lr}
     b8a:	b082      	sub	sp, #8
     b8c:	0004      	movs	r4, r0
     b8e:	4b0e      	ldr	r3, [pc, #56]	; (bc8 <sercom_set_gclk_generator+0x40>)
     b90:	781b      	ldrb	r3, [r3, #0]
     b92:	2b00      	cmp	r3, #0
     b94:	d007      	beq.n	ba6 <sercom_set_gclk_generator+0x1e>
     b96:	2900      	cmp	r1, #0
     b98:	d105      	bne.n	ba6 <sercom_set_gclk_generator+0x1e>
     b9a:	4b0b      	ldr	r3, [pc, #44]	; (bc8 <sercom_set_gclk_generator+0x40>)
     b9c:	785b      	ldrb	r3, [r3, #1]
     b9e:	4283      	cmp	r3, r0
     ba0:	d010      	beq.n	bc4 <sercom_set_gclk_generator+0x3c>
     ba2:	201d      	movs	r0, #29
     ba4:	e00c      	b.n	bc0 <sercom_set_gclk_generator+0x38>
     ba6:	a901      	add	r1, sp, #4
     ba8:	700c      	strb	r4, [r1, #0]
     baa:	200d      	movs	r0, #13
     bac:	4b07      	ldr	r3, [pc, #28]	; (bcc <sercom_set_gclk_generator+0x44>)
     bae:	4798      	blx	r3
     bb0:	200d      	movs	r0, #13
     bb2:	4b07      	ldr	r3, [pc, #28]	; (bd0 <sercom_set_gclk_generator+0x48>)
     bb4:	4798      	blx	r3
     bb6:	4b04      	ldr	r3, [pc, #16]	; (bc8 <sercom_set_gclk_generator+0x40>)
     bb8:	705c      	strb	r4, [r3, #1]
     bba:	2201      	movs	r2, #1
     bbc:	701a      	strb	r2, [r3, #0]
     bbe:	2000      	movs	r0, #0
     bc0:	b002      	add	sp, #8
     bc2:	bd10      	pop	{r4, pc}
     bc4:	2000      	movs	r0, #0
     bc6:	e7fb      	b.n	bc0 <sercom_set_gclk_generator+0x38>
     bc8:	20000500 	.word	0x20000500
     bcc:	00001419 	.word	0x00001419
     bd0:	0000138d 	.word	0x0000138d

00000bd4 <_sercom_get_default_pad>:
     bd4:	4b15      	ldr	r3, [pc, #84]	; (c2c <_sercom_get_default_pad+0x58>)
     bd6:	4298      	cmp	r0, r3
     bd8:	d004      	beq.n	be4 <_sercom_get_default_pad+0x10>
     bda:	4b15      	ldr	r3, [pc, #84]	; (c30 <_sercom_get_default_pad+0x5c>)
     bdc:	4298      	cmp	r0, r3
     bde:	d011      	beq.n	c04 <_sercom_get_default_pad+0x30>
     be0:	2000      	movs	r0, #0
     be2:	4770      	bx	lr
     be4:	2901      	cmp	r1, #1
     be6:	d007      	beq.n	bf8 <_sercom_get_default_pad+0x24>
     be8:	2900      	cmp	r1, #0
     bea:	d01b      	beq.n	c24 <_sercom_get_default_pad+0x50>
     bec:	2902      	cmp	r1, #2
     bee:	d005      	beq.n	bfc <_sercom_get_default_pad+0x28>
     bf0:	2903      	cmp	r1, #3
     bf2:	d005      	beq.n	c00 <_sercom_get_default_pad+0x2c>
     bf4:	2000      	movs	r0, #0
     bf6:	e7f4      	b.n	be2 <_sercom_get_default_pad+0xe>
     bf8:	480e      	ldr	r0, [pc, #56]	; (c34 <_sercom_get_default_pad+0x60>)
     bfa:	e7f2      	b.n	be2 <_sercom_get_default_pad+0xe>
     bfc:	480e      	ldr	r0, [pc, #56]	; (c38 <_sercom_get_default_pad+0x64>)
     bfe:	e7f0      	b.n	be2 <_sercom_get_default_pad+0xe>
     c00:	480e      	ldr	r0, [pc, #56]	; (c3c <_sercom_get_default_pad+0x68>)
     c02:	e7ee      	b.n	be2 <_sercom_get_default_pad+0xe>
     c04:	2901      	cmp	r1, #1
     c06:	d007      	beq.n	c18 <_sercom_get_default_pad+0x44>
     c08:	2900      	cmp	r1, #0
     c0a:	d00d      	beq.n	c28 <_sercom_get_default_pad+0x54>
     c0c:	2902      	cmp	r1, #2
     c0e:	d005      	beq.n	c1c <_sercom_get_default_pad+0x48>
     c10:	2903      	cmp	r1, #3
     c12:	d005      	beq.n	c20 <_sercom_get_default_pad+0x4c>
     c14:	2000      	movs	r0, #0
     c16:	e7e4      	b.n	be2 <_sercom_get_default_pad+0xe>
     c18:	4809      	ldr	r0, [pc, #36]	; (c40 <_sercom_get_default_pad+0x6c>)
     c1a:	e7e2      	b.n	be2 <_sercom_get_default_pad+0xe>
     c1c:	4809      	ldr	r0, [pc, #36]	; (c44 <_sercom_get_default_pad+0x70>)
     c1e:	e7e0      	b.n	be2 <_sercom_get_default_pad+0xe>
     c20:	4809      	ldr	r0, [pc, #36]	; (c48 <_sercom_get_default_pad+0x74>)
     c22:	e7de      	b.n	be2 <_sercom_get_default_pad+0xe>
     c24:	4809      	ldr	r0, [pc, #36]	; (c4c <_sercom_get_default_pad+0x78>)
     c26:	e7dc      	b.n	be2 <_sercom_get_default_pad+0xe>
     c28:	4809      	ldr	r0, [pc, #36]	; (c50 <_sercom_get_default_pad+0x7c>)
     c2a:	e7da      	b.n	be2 <_sercom_get_default_pad+0xe>
     c2c:	42000800 	.word	0x42000800
     c30:	42000c00 	.word	0x42000c00
     c34:	00050003 	.word	0x00050003
     c38:	00080003 	.word	0x00080003
     c3c:	00090003 	.word	0x00090003
     c40:	001f0002 	.word	0x001f0002
     c44:	00180002 	.word	0x00180002
     c48:	00190002 	.word	0x00190002
     c4c:	00040003 	.word	0x00040003
     c50:	001e0002 	.word	0x001e0002

00000c54 <_sercom_get_sercom_inst_index>:
     c54:	4b06      	ldr	r3, [pc, #24]	; (c70 <_sercom_get_sercom_inst_index+0x1c>)
     c56:	4298      	cmp	r0, r3
     c58:	d008      	beq.n	c6c <_sercom_get_sercom_inst_index+0x18>
     c5a:	4a06      	ldr	r2, [pc, #24]	; (c74 <_sercom_get_sercom_inst_index+0x20>)
     c5c:	2300      	movs	r3, #0
     c5e:	4290      	cmp	r0, r2
     c60:	d001      	beq.n	c66 <_sercom_get_sercom_inst_index+0x12>
     c62:	0018      	movs	r0, r3
     c64:	4770      	bx	lr
     c66:	3301      	adds	r3, #1
     c68:	b2db      	uxtb	r3, r3
     c6a:	e7fa      	b.n	c62 <_sercom_get_sercom_inst_index+0xe>
     c6c:	2300      	movs	r3, #0
     c6e:	e7fb      	b.n	c68 <_sercom_get_sercom_inst_index+0x14>
     c70:	42000800 	.word	0x42000800
     c74:	42000c00 	.word	0x42000c00

00000c78 <_sercom_default_handler>:
     c78:	4770      	bx	lr
	...

00000c7c <_sercom_set_handler>:
     c7c:	b530      	push	{r4, r5, lr}
     c7e:	4b09      	ldr	r3, [pc, #36]	; (ca4 <_sercom_set_handler+0x28>)
     c80:	781b      	ldrb	r3, [r3, #0]
     c82:	2b00      	cmp	r3, #0
     c84:	d10a      	bne.n	c9c <_sercom_set_handler+0x20>
     c86:	4c08      	ldr	r4, [pc, #32]	; (ca8 <_sercom_set_handler+0x2c>)
     c88:	4d08      	ldr	r5, [pc, #32]	; (cac <_sercom_set_handler+0x30>)
     c8a:	6025      	str	r5, [r4, #0]
     c8c:	4b08      	ldr	r3, [pc, #32]	; (cb0 <_sercom_set_handler+0x34>)
     c8e:	2200      	movs	r2, #0
     c90:	601a      	str	r2, [r3, #0]
     c92:	6065      	str	r5, [r4, #4]
     c94:	605a      	str	r2, [r3, #4]
     c96:	3201      	adds	r2, #1
     c98:	4b02      	ldr	r3, [pc, #8]	; (ca4 <_sercom_set_handler+0x28>)
     c9a:	701a      	strb	r2, [r3, #0]
     c9c:	0080      	lsls	r0, r0, #2
     c9e:	4b02      	ldr	r3, [pc, #8]	; (ca8 <_sercom_set_handler+0x2c>)
     ca0:	50c1      	str	r1, [r0, r3]
     ca2:	bd30      	pop	{r4, r5, pc}
     ca4:	20000502 	.word	0x20000502
     ca8:	20000504 	.word	0x20000504
     cac:	00000c79 	.word	0x00000c79
     cb0:	20000578 	.word	0x20000578

00000cb4 <_sercom_get_interrupt_vector>:
     cb4:	b510      	push	{r4, lr}
     cb6:	b082      	sub	sp, #8
     cb8:	ac01      	add	r4, sp, #4
     cba:	2309      	movs	r3, #9
     cbc:	7023      	strb	r3, [r4, #0]
     cbe:	3301      	adds	r3, #1
     cc0:	7063      	strb	r3, [r4, #1]
     cc2:	4b02      	ldr	r3, [pc, #8]	; (ccc <_sercom_get_interrupt_vector+0x18>)
     cc4:	4798      	blx	r3
     cc6:	5620      	ldrsb	r0, [r4, r0]
     cc8:	b002      	add	sp, #8
     cca:	bd10      	pop	{r4, pc}
     ccc:	00000c55 	.word	0x00000c55

00000cd0 <SERCOM0_Handler>:
     cd0:	b510      	push	{r4, lr}
     cd2:	4b02      	ldr	r3, [pc, #8]	; (cdc <SERCOM0_Handler+0xc>)
     cd4:	681b      	ldr	r3, [r3, #0]
     cd6:	2000      	movs	r0, #0
     cd8:	4798      	blx	r3
     cda:	bd10      	pop	{r4, pc}
     cdc:	20000504 	.word	0x20000504

00000ce0 <SERCOM1_Handler>:
     ce0:	b510      	push	{r4, lr}
     ce2:	4b02      	ldr	r3, [pc, #8]	; (cec <SERCOM1_Handler+0xc>)
     ce4:	685b      	ldr	r3, [r3, #4]
     ce6:	2001      	movs	r0, #1
     ce8:	4798      	blx	r3
     cea:	bd10      	pop	{r4, pc}
     cec:	20000504 	.word	0x20000504

00000cf0 <EIC_Handler>:
     cf0:	b570      	push	{r4, r5, r6, lr}
     cf2:	2200      	movs	r2, #0
     cf4:	4b10      	ldr	r3, [pc, #64]	; (d38 <EIC_Handler+0x48>)
     cf6:	701a      	strb	r2, [r3, #0]
     cf8:	2300      	movs	r3, #0
     cfa:	4910      	ldr	r1, [pc, #64]	; (d3c <EIC_Handler+0x4c>)
     cfc:	251f      	movs	r5, #31
     cfe:	4e10      	ldr	r6, [pc, #64]	; (d40 <EIC_Handler+0x50>)
     d00:	4c0d      	ldr	r4, [pc, #52]	; (d38 <EIC_Handler+0x48>)
     d02:	e00a      	b.n	d1a <EIC_Handler+0x2a>
     d04:	490d      	ldr	r1, [pc, #52]	; (d3c <EIC_Handler+0x4c>)
     d06:	e008      	b.n	d1a <EIC_Handler+0x2a>
     d08:	7823      	ldrb	r3, [r4, #0]
     d0a:	3301      	adds	r3, #1
     d0c:	b2db      	uxtb	r3, r3
     d0e:	7023      	strb	r3, [r4, #0]
     d10:	2b0f      	cmp	r3, #15
     d12:	d810      	bhi.n	d36 <EIC_Handler+0x46>
     d14:	2100      	movs	r1, #0
     d16:	2b1f      	cmp	r3, #31
     d18:	d9f4      	bls.n	d04 <EIC_Handler+0x14>
     d1a:	0028      	movs	r0, r5
     d1c:	4018      	ands	r0, r3
     d1e:	2201      	movs	r2, #1
     d20:	4082      	lsls	r2, r0
     d22:	6908      	ldr	r0, [r1, #16]
     d24:	4210      	tst	r0, r2
     d26:	d0ef      	beq.n	d08 <EIC_Handler+0x18>
     d28:	610a      	str	r2, [r1, #16]
     d2a:	009b      	lsls	r3, r3, #2
     d2c:	599b      	ldr	r3, [r3, r6]
     d2e:	2b00      	cmp	r3, #0
     d30:	d0ea      	beq.n	d08 <EIC_Handler+0x18>
     d32:	4798      	blx	r3
     d34:	e7e8      	b.n	d08 <EIC_Handler+0x18>
     d36:	bd70      	pop	{r4, r5, r6, pc}
     d38:	20000580 	.word	0x20000580
     d3c:	40001800 	.word	0x40001800
     d40:	2000052c 	.word	0x2000052c

00000d44 <delay_init>:
     d44:	b570      	push	{r4, r5, r6, lr}
     d46:	2000      	movs	r0, #0
     d48:	4b08      	ldr	r3, [pc, #32]	; (d6c <delay_init+0x28>)
     d4a:	4798      	blx	r3
     d4c:	0005      	movs	r5, r0
     d4e:	4c08      	ldr	r4, [pc, #32]	; (d70 <delay_init+0x2c>)
     d50:	21fa      	movs	r1, #250	; 0xfa
     d52:	0089      	lsls	r1, r1, #2
     d54:	47a0      	blx	r4
     d56:	4b07      	ldr	r3, [pc, #28]	; (d74 <delay_init+0x30>)
     d58:	6018      	str	r0, [r3, #0]
     d5a:	4907      	ldr	r1, [pc, #28]	; (d78 <delay_init+0x34>)
     d5c:	0028      	movs	r0, r5
     d5e:	47a0      	blx	r4
     d60:	4b06      	ldr	r3, [pc, #24]	; (d7c <delay_init+0x38>)
     d62:	6018      	str	r0, [r3, #0]
     d64:	2205      	movs	r2, #5
     d66:	4b06      	ldr	r3, [pc, #24]	; (d80 <delay_init+0x3c>)
     d68:	601a      	str	r2, [r3, #0]
     d6a:	bd70      	pop	{r4, r5, r6, pc}
     d6c:	00001301 	.word	0x00001301
     d70:	00001635 	.word	0x00001635
     d74:	20000004 	.word	0x20000004
     d78:	000f4240 	.word	0x000f4240
     d7c:	20000008 	.word	0x20000008
     d80:	e000e010 	.word	0xe000e010

00000d84 <port_pin_set_config>:
     d84:	b500      	push	{lr}
     d86:	b083      	sub	sp, #12
     d88:	ab01      	add	r3, sp, #4
     d8a:	2280      	movs	r2, #128	; 0x80
     d8c:	701a      	strb	r2, [r3, #0]
     d8e:	780a      	ldrb	r2, [r1, #0]
     d90:	705a      	strb	r2, [r3, #1]
     d92:	784a      	ldrb	r2, [r1, #1]
     d94:	709a      	strb	r2, [r3, #2]
     d96:	788a      	ldrb	r2, [r1, #2]
     d98:	70da      	strb	r2, [r3, #3]
     d9a:	0019      	movs	r1, r3
     d9c:	4b01      	ldr	r3, [pc, #4]	; (da4 <port_pin_set_config+0x20>)
     d9e:	4798      	blx	r3
     da0:	b003      	add	sp, #12
     da2:	bd00      	pop	{pc}
     da4:	00001511 	.word	0x00001511

00000da8 <cpu_irq_enter_critical>:
     da8:	4b0c      	ldr	r3, [pc, #48]	; (ddc <cpu_irq_enter_critical+0x34>)
     daa:	681b      	ldr	r3, [r3, #0]
     dac:	2b00      	cmp	r3, #0
     dae:	d106      	bne.n	dbe <cpu_irq_enter_critical+0x16>
     db0:	f3ef 8310 	mrs	r3, PRIMASK
     db4:	2b00      	cmp	r3, #0
     db6:	d007      	beq.n	dc8 <cpu_irq_enter_critical+0x20>
     db8:	2200      	movs	r2, #0
     dba:	4b09      	ldr	r3, [pc, #36]	; (de0 <cpu_irq_enter_critical+0x38>)
     dbc:	701a      	strb	r2, [r3, #0]
     dbe:	4a07      	ldr	r2, [pc, #28]	; (ddc <cpu_irq_enter_critical+0x34>)
     dc0:	6813      	ldr	r3, [r2, #0]
     dc2:	3301      	adds	r3, #1
     dc4:	6013      	str	r3, [r2, #0]
     dc6:	4770      	bx	lr
     dc8:	b672      	cpsid	i
     dca:	f3bf 8f5f 	dmb	sy
     dce:	2200      	movs	r2, #0
     dd0:	4b04      	ldr	r3, [pc, #16]	; (de4 <cpu_irq_enter_critical+0x3c>)
     dd2:	701a      	strb	r2, [r3, #0]
     dd4:	3201      	adds	r2, #1
     dd6:	4b02      	ldr	r3, [pc, #8]	; (de0 <cpu_irq_enter_critical+0x38>)
     dd8:	701a      	strb	r2, [r3, #0]
     dda:	e7f0      	b.n	dbe <cpu_irq_enter_critical+0x16>
     ddc:	2000050c 	.word	0x2000050c
     de0:	20000510 	.word	0x20000510
     de4:	2000000c 	.word	0x2000000c

00000de8 <cpu_irq_leave_critical>:
     de8:	4b08      	ldr	r3, [pc, #32]	; (e0c <cpu_irq_leave_critical+0x24>)
     dea:	681a      	ldr	r2, [r3, #0]
     dec:	3a01      	subs	r2, #1
     dee:	601a      	str	r2, [r3, #0]
     df0:	681b      	ldr	r3, [r3, #0]
     df2:	2b00      	cmp	r3, #0
     df4:	d109      	bne.n	e0a <cpu_irq_leave_critical+0x22>
     df6:	4b06      	ldr	r3, [pc, #24]	; (e10 <cpu_irq_leave_critical+0x28>)
     df8:	781b      	ldrb	r3, [r3, #0]
     dfa:	2b00      	cmp	r3, #0
     dfc:	d005      	beq.n	e0a <cpu_irq_leave_critical+0x22>
     dfe:	2201      	movs	r2, #1
     e00:	4b04      	ldr	r3, [pc, #16]	; (e14 <cpu_irq_leave_critical+0x2c>)
     e02:	701a      	strb	r2, [r3, #0]
     e04:	f3bf 8f5f 	dmb	sy
     e08:	b662      	cpsie	i
     e0a:	4770      	bx	lr
     e0c:	2000050c 	.word	0x2000050c
     e10:	20000510 	.word	0x20000510
     e14:	2000000c 	.word	0x2000000c

00000e18 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     e18:	b510      	push	{r4, lr}
	switch (clock_source) {
     e1a:	2808      	cmp	r0, #8
     e1c:	d803      	bhi.n	e26 <system_clock_source_get_hz+0xe>
     e1e:	0080      	lsls	r0, r0, #2
     e20:	4b1c      	ldr	r3, [pc, #112]	; (e94 <system_clock_source_get_hz+0x7c>)
     e22:	581b      	ldr	r3, [r3, r0]
     e24:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     e26:	2000      	movs	r0, #0
     e28:	e032      	b.n	e90 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
     e2a:	4b1b      	ldr	r3, [pc, #108]	; (e98 <system_clock_source_get_hz+0x80>)
     e2c:	6918      	ldr	r0, [r3, #16]
     e2e:	e02f      	b.n	e90 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     e30:	4b1a      	ldr	r3, [pc, #104]	; (e9c <system_clock_source_get_hz+0x84>)
     e32:	6a1b      	ldr	r3, [r3, #32]
     e34:	059b      	lsls	r3, r3, #22
     e36:	0f9b      	lsrs	r3, r3, #30
     e38:	4819      	ldr	r0, [pc, #100]	; (ea0 <system_clock_source_get_hz+0x88>)
     e3a:	40d8      	lsrs	r0, r3
     e3c:	e028      	b.n	e90 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
     e3e:	4b16      	ldr	r3, [pc, #88]	; (e98 <system_clock_source_get_hz+0x80>)
     e40:	6958      	ldr	r0, [r3, #20]
     e42:	e025      	b.n	e90 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     e44:	4b14      	ldr	r3, [pc, #80]	; (e98 <system_clock_source_get_hz+0x80>)
     e46:	681b      	ldr	r3, [r3, #0]
			return 0;
     e48:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     e4a:	079b      	lsls	r3, r3, #30
     e4c:	d520      	bpl.n	e90 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     e4e:	4913      	ldr	r1, [pc, #76]	; (e9c <system_clock_source_get_hz+0x84>)
     e50:	2210      	movs	r2, #16
     e52:	68cb      	ldr	r3, [r1, #12]
     e54:	421a      	tst	r2, r3
     e56:	d0fc      	beq.n	e52 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
     e58:	4b0f      	ldr	r3, [pc, #60]	; (e98 <system_clock_source_get_hz+0x80>)
     e5a:	681a      	ldr	r2, [r3, #0]
     e5c:	2324      	movs	r3, #36	; 0x24
     e5e:	4013      	ands	r3, r2
     e60:	2b04      	cmp	r3, #4
     e62:	d001      	beq.n	e68 <system_clock_source_get_hz+0x50>
			return 48000000UL;
     e64:	480f      	ldr	r0, [pc, #60]	; (ea4 <system_clock_source_get_hz+0x8c>)
     e66:	e013      	b.n	e90 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     e68:	2000      	movs	r0, #0
     e6a:	4b0f      	ldr	r3, [pc, #60]	; (ea8 <system_clock_source_get_hz+0x90>)
     e6c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     e6e:	4b0a      	ldr	r3, [pc, #40]	; (e98 <system_clock_source_get_hz+0x80>)
     e70:	689b      	ldr	r3, [r3, #8]
     e72:	041b      	lsls	r3, r3, #16
     e74:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     e76:	4358      	muls	r0, r3
     e78:	e00a      	b.n	e90 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     e7a:	2350      	movs	r3, #80	; 0x50
     e7c:	4a07      	ldr	r2, [pc, #28]	; (e9c <system_clock_source_get_hz+0x84>)
     e7e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     e80:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     e82:	075b      	lsls	r3, r3, #29
     e84:	d504      	bpl.n	e90 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
     e86:	4b04      	ldr	r3, [pc, #16]	; (e98 <system_clock_source_get_hz+0x80>)
     e88:	68d8      	ldr	r0, [r3, #12]
     e8a:	e001      	b.n	e90 <system_clock_source_get_hz+0x78>
		return 32768UL;
     e8c:	2080      	movs	r0, #128	; 0x80
     e8e:	0200      	lsls	r0, r0, #8
	}
}
     e90:	bd10      	pop	{r4, pc}
     e92:	46c0      	nop			; (mov r8, r8)
     e94:	00001ad4 	.word	0x00001ad4
     e98:	20000514 	.word	0x20000514
     e9c:	40000800 	.word	0x40000800
     ea0:	007a1200 	.word	0x007a1200
     ea4:	02dc6c00 	.word	0x02dc6c00
     ea8:	00001435 	.word	0x00001435

00000eac <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     eac:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     eae:	490c      	ldr	r1, [pc, #48]	; (ee0 <system_clock_source_osc8m_set_config+0x34>)
     eb0:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     eb2:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     eb4:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     eb6:	7840      	ldrb	r0, [r0, #1]
     eb8:	2201      	movs	r2, #1
     eba:	4010      	ands	r0, r2
     ebc:	0180      	lsls	r0, r0, #6
     ebe:	2640      	movs	r6, #64	; 0x40
     ec0:	43b3      	bics	r3, r6
     ec2:	4303      	orrs	r3, r0
     ec4:	402a      	ands	r2, r5
     ec6:	01d2      	lsls	r2, r2, #7
     ec8:	2080      	movs	r0, #128	; 0x80
     eca:	4383      	bics	r3, r0
     ecc:	4313      	orrs	r3, r2
     ece:	2203      	movs	r2, #3
     ed0:	4022      	ands	r2, r4
     ed2:	0212      	lsls	r2, r2, #8
     ed4:	4803      	ldr	r0, [pc, #12]	; (ee4 <system_clock_source_osc8m_set_config+0x38>)
     ed6:	4003      	ands	r3, r0
     ed8:	4313      	orrs	r3, r2
     eda:	620b      	str	r3, [r1, #32]
}
     edc:	bd70      	pop	{r4, r5, r6, pc}
     ede:	46c0      	nop			; (mov r8, r8)
     ee0:	40000800 	.word	0x40000800
     ee4:	fffffcff 	.word	0xfffffcff

00000ee8 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
     ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
     eea:	46ce      	mov	lr, r9
     eec:	4647      	mov	r7, r8
     eee:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
     ef0:	4b19      	ldr	r3, [pc, #100]	; (f58 <system_clock_source_osc32k_set_config+0x70>)
     ef2:	4699      	mov	r9, r3
     ef4:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
     ef6:	7841      	ldrb	r1, [r0, #1]
     ef8:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
     efa:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     efc:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
     efe:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
     f00:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
     f02:	7880      	ldrb	r0, [r0, #2]
     f04:	2101      	movs	r1, #1
     f06:	4008      	ands	r0, r1
     f08:	0080      	lsls	r0, r0, #2
     f0a:	2204      	movs	r2, #4
     f0c:	4393      	bics	r3, r2
     f0e:	4303      	orrs	r3, r0
     f10:	4660      	mov	r0, ip
     f12:	4008      	ands	r0, r1
     f14:	00c0      	lsls	r0, r0, #3
     f16:	3204      	adds	r2, #4
     f18:	4393      	bics	r3, r2
     f1a:	4303      	orrs	r3, r0
     f1c:	0038      	movs	r0, r7
     f1e:	4008      	ands	r0, r1
     f20:	0180      	lsls	r0, r0, #6
     f22:	2740      	movs	r7, #64	; 0x40
     f24:	43bb      	bics	r3, r7
     f26:	4303      	orrs	r3, r0
     f28:	0030      	movs	r0, r6
     f2a:	4008      	ands	r0, r1
     f2c:	01c0      	lsls	r0, r0, #7
     f2e:	2680      	movs	r6, #128	; 0x80
     f30:	43b3      	bics	r3, r6
     f32:	4303      	orrs	r3, r0
     f34:	2007      	movs	r0, #7
     f36:	4005      	ands	r5, r0
     f38:	022d      	lsls	r5, r5, #8
     f3a:	4808      	ldr	r0, [pc, #32]	; (f5c <system_clock_source_osc32k_set_config+0x74>)
     f3c:	4003      	ands	r3, r0
     f3e:	432b      	orrs	r3, r5
     f40:	4021      	ands	r1, r4
     f42:	0309      	lsls	r1, r1, #12
     f44:	4806      	ldr	r0, [pc, #24]	; (f60 <system_clock_source_osc32k_set_config+0x78>)
     f46:	4003      	ands	r3, r0
     f48:	430b      	orrs	r3, r1
     f4a:	464a      	mov	r2, r9
     f4c:	6193      	str	r3, [r2, #24]
}
     f4e:	bc0c      	pop	{r2, r3}
     f50:	4690      	mov	r8, r2
     f52:	4699      	mov	r9, r3
     f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f56:	46c0      	nop			; (mov r8, r8)
     f58:	40000800 	.word	0x40000800
     f5c:	fffff8ff 	.word	0xfffff8ff
     f60:	ffffefff 	.word	0xffffefff

00000f64 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
     f64:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     f66:	7a03      	ldrb	r3, [r0, #8]
     f68:	069b      	lsls	r3, r3, #26
     f6a:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
     f6c:	8942      	ldrh	r2, [r0, #10]
     f6e:	0592      	lsls	r2, r2, #22
     f70:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     f72:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
     f74:	4918      	ldr	r1, [pc, #96]	; (fd8 <system_clock_source_dfll_set_config+0x74>)
     f76:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
     f78:	7983      	ldrb	r3, [r0, #6]
     f7a:	79c2      	ldrb	r2, [r0, #7]
     f7c:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
     f7e:	8842      	ldrh	r2, [r0, #2]
     f80:	8884      	ldrh	r4, [r0, #4]
     f82:	4322      	orrs	r2, r4
     f84:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
     f86:	7842      	ldrb	r2, [r0, #1]
     f88:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
     f8a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
     f8c:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
     f8e:	7803      	ldrb	r3, [r0, #0]
     f90:	2b04      	cmp	r3, #4
     f92:	d011      	beq.n	fb8 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
     f94:	2b20      	cmp	r3, #32
     f96:	d10e      	bne.n	fb6 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     f98:	7b03      	ldrb	r3, [r0, #12]
     f9a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     f9c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     f9e:	4313      	orrs	r3, r2
     fa0:	89c2      	ldrh	r2, [r0, #14]
     fa2:	0412      	lsls	r2, r2, #16
     fa4:	490d      	ldr	r1, [pc, #52]	; (fdc <system_clock_source_dfll_set_config+0x78>)
     fa6:	400a      	ands	r2, r1
     fa8:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
     faa:	4a0b      	ldr	r2, [pc, #44]	; (fd8 <system_clock_source_dfll_set_config+0x74>)
     fac:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
     fae:	6811      	ldr	r1, [r2, #0]
     fb0:	4b0b      	ldr	r3, [pc, #44]	; (fe0 <system_clock_source_dfll_set_config+0x7c>)
     fb2:	430b      	orrs	r3, r1
     fb4:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
     fb6:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     fb8:	7b03      	ldrb	r3, [r0, #12]
     fba:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     fbc:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     fbe:	4313      	orrs	r3, r2
     fc0:	89c2      	ldrh	r2, [r0, #14]
     fc2:	0412      	lsls	r2, r2, #16
     fc4:	4905      	ldr	r1, [pc, #20]	; (fdc <system_clock_source_dfll_set_config+0x78>)
     fc6:	400a      	ands	r2, r1
     fc8:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
     fca:	4a03      	ldr	r2, [pc, #12]	; (fd8 <system_clock_source_dfll_set_config+0x74>)
     fcc:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
     fce:	6813      	ldr	r3, [r2, #0]
     fd0:	2104      	movs	r1, #4
     fd2:	430b      	orrs	r3, r1
     fd4:	6013      	str	r3, [r2, #0]
     fd6:	e7ee      	b.n	fb6 <system_clock_source_dfll_set_config+0x52>
     fd8:	20000514 	.word	0x20000514
     fdc:	03ff0000 	.word	0x03ff0000
     fe0:	00000424 	.word	0x00000424

00000fe4 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     fe4:	2808      	cmp	r0, #8
     fe6:	d803      	bhi.n	ff0 <system_clock_source_enable+0xc>
     fe8:	0080      	lsls	r0, r0, #2
     fea:	4b25      	ldr	r3, [pc, #148]	; (1080 <system_clock_source_enable+0x9c>)
     fec:	581b      	ldr	r3, [r3, r0]
     fee:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     ff0:	2017      	movs	r0, #23
     ff2:	e044      	b.n	107e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     ff4:	4a23      	ldr	r2, [pc, #140]	; (1084 <system_clock_source_enable+0xa0>)
     ff6:	6a13      	ldr	r3, [r2, #32]
     ff8:	2102      	movs	r1, #2
     ffa:	430b      	orrs	r3, r1
     ffc:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     ffe:	2000      	movs	r0, #0
    1000:	e03d      	b.n	107e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1002:	4a20      	ldr	r2, [pc, #128]	; (1084 <system_clock_source_enable+0xa0>)
    1004:	6993      	ldr	r3, [r2, #24]
    1006:	2102      	movs	r1, #2
    1008:	430b      	orrs	r3, r1
    100a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    100c:	2000      	movs	r0, #0
		break;
    100e:	e036      	b.n	107e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1010:	4a1c      	ldr	r2, [pc, #112]	; (1084 <system_clock_source_enable+0xa0>)
    1012:	8a13      	ldrh	r3, [r2, #16]
    1014:	2102      	movs	r1, #2
    1016:	430b      	orrs	r3, r1
    1018:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    101a:	2000      	movs	r0, #0
		break;
    101c:	e02f      	b.n	107e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    101e:	4a19      	ldr	r2, [pc, #100]	; (1084 <system_clock_source_enable+0xa0>)
    1020:	8a93      	ldrh	r3, [r2, #20]
    1022:	2102      	movs	r1, #2
    1024:	430b      	orrs	r3, r1
    1026:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1028:	2000      	movs	r0, #0
		break;
    102a:	e028      	b.n	107e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    102c:	4916      	ldr	r1, [pc, #88]	; (1088 <system_clock_source_enable+0xa4>)
    102e:	680b      	ldr	r3, [r1, #0]
    1030:	2202      	movs	r2, #2
    1032:	4313      	orrs	r3, r2
    1034:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1036:	4b13      	ldr	r3, [pc, #76]	; (1084 <system_clock_source_enable+0xa0>)
    1038:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    103a:	0019      	movs	r1, r3
    103c:	320e      	adds	r2, #14
    103e:	68cb      	ldr	r3, [r1, #12]
    1040:	421a      	tst	r2, r3
    1042:	d0fc      	beq.n	103e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1044:	4a10      	ldr	r2, [pc, #64]	; (1088 <system_clock_source_enable+0xa4>)
    1046:	6891      	ldr	r1, [r2, #8]
    1048:	4b0e      	ldr	r3, [pc, #56]	; (1084 <system_clock_source_enable+0xa0>)
    104a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    104c:	6852      	ldr	r2, [r2, #4]
    104e:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1050:	2200      	movs	r2, #0
    1052:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1054:	0019      	movs	r1, r3
    1056:	3210      	adds	r2, #16
    1058:	68cb      	ldr	r3, [r1, #12]
    105a:	421a      	tst	r2, r3
    105c:	d0fc      	beq.n	1058 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    105e:	4b0a      	ldr	r3, [pc, #40]	; (1088 <system_clock_source_enable+0xa4>)
    1060:	681b      	ldr	r3, [r3, #0]
    1062:	b29b      	uxth	r3, r3
    1064:	4a07      	ldr	r2, [pc, #28]	; (1084 <system_clock_source_enable+0xa0>)
    1066:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1068:	2000      	movs	r0, #0
    106a:	e008      	b.n	107e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    106c:	4905      	ldr	r1, [pc, #20]	; (1084 <system_clock_source_enable+0xa0>)
    106e:	2244      	movs	r2, #68	; 0x44
    1070:	5c8b      	ldrb	r3, [r1, r2]
    1072:	2002      	movs	r0, #2
    1074:	4303      	orrs	r3, r0
    1076:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1078:	2000      	movs	r0, #0
		break;
    107a:	e000      	b.n	107e <system_clock_source_enable+0x9a>
		return STATUS_OK;
    107c:	2000      	movs	r0, #0
}
    107e:	4770      	bx	lr
    1080:	00001af8 	.word	0x00001af8
    1084:	40000800 	.word	0x40000800
    1088:	20000514 	.word	0x20000514

0000108c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    108c:	b5f0      	push	{r4, r5, r6, r7, lr}
    108e:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1090:	22c2      	movs	r2, #194	; 0xc2
    1092:	00d2      	lsls	r2, r2, #3
    1094:	4b44      	ldr	r3, [pc, #272]	; (11a8 <system_clock_init+0x11c>)
    1096:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1098:	4944      	ldr	r1, [pc, #272]	; (11ac <system_clock_init+0x120>)
    109a:	684b      	ldr	r3, [r1, #4]
    109c:	221e      	movs	r2, #30
    109e:	4393      	bics	r3, r2
    10a0:	3a1c      	subs	r2, #28
    10a2:	4313      	orrs	r3, r2
    10a4:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    10a6:	ab01      	add	r3, sp, #4
    10a8:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    10aa:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    10ac:	4d40      	ldr	r5, [pc, #256]	; (11b0 <system_clock_init+0x124>)
    10ae:	b2e0      	uxtb	r0, r4
    10b0:	a901      	add	r1, sp, #4
    10b2:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    10b4:	3401      	adds	r4, #1
    10b6:	2c18      	cmp	r4, #24
    10b8:	d1f9      	bne.n	10ae <system_clock_init+0x22>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			(*(uint32_t *)FUSES_OSC32K_ADDR >> FUSES_OSC32K_Pos);
    10ba:	4d3e      	ldr	r5, [pc, #248]	; (11b4 <system_clock_init+0x128>)
    10bc:	682b      	ldr	r3, [r5, #0]
    10be:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
    10c0:	4939      	ldr	r1, [pc, #228]	; (11a8 <system_clock_init+0x11c>)
    10c2:	698a      	ldr	r2, [r1, #24]
    10c4:	0e5b      	lsrs	r3, r3, #25
    10c6:	041b      	lsls	r3, r3, #16
    10c8:	483b      	ldr	r0, [pc, #236]	; (11b8 <system_clock_init+0x12c>)
    10ca:	4002      	ands	r2, r0
    10cc:	4313      	orrs	r3, r2
    10ce:	618b      	str	r3, [r1, #24]
	config->enable_32khz_output = true;
    10d0:	a80a      	add	r0, sp, #40	; 0x28
    10d2:	2301      	movs	r3, #1
    10d4:	7083      	strb	r3, [r0, #2]
	config->run_in_standby      = false;
    10d6:	2400      	movs	r4, #0
    10d8:	70c4      	strb	r4, [r0, #3]
	config->on_demand           = true;
    10da:	7103      	strb	r3, [r0, #4]
	config->write_once          = false;
    10dc:	7144      	strb	r4, [r0, #5]

	struct system_clock_source_osc32k_config osc32k_conf;
	system_clock_source_osc32k_get_config_defaults(&osc32k_conf);

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
    10de:	3305      	adds	r3, #5
    10e0:	7003      	strb	r3, [r0, #0]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
    10e2:	7044      	strb	r4, [r0, #1]
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    10e4:	4b35      	ldr	r3, [pc, #212]	; (11bc <system_clock_init+0x130>)
    10e6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    10e8:	2004      	movs	r0, #4
    10ea:	4b35      	ldr	r3, [pc, #212]	; (11c0 <system_clock_init+0x134>)
    10ec:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    10ee:	ab05      	add	r3, sp, #20
    10f0:	2200      	movs	r2, #0
    10f2:	805c      	strh	r4, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    10f4:	809c      	strh	r4, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    10f6:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    10f8:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    10fa:	213f      	movs	r1, #63	; 0x3f
    10fc:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    10fe:	393b      	subs	r1, #59	; 0x3b
    1100:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1102:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1104:	682b      	ldr	r3, [r5, #0]
    1106:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1108:	2b3f      	cmp	r3, #63	; 0x3f
    110a:	d04b      	beq.n	11a4 <system_clock_init+0x118>
		coarse = 0x1f;
	}

	dfll_conf.coarse_value = coarse;
    110c:	a805      	add	r0, sp, #20
    110e:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1110:	23b7      	movs	r3, #183	; 0xb7
    1112:	00db      	lsls	r3, r3, #3
    1114:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1116:	2307      	movs	r3, #7
    1118:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    111a:	3338      	adds	r3, #56	; 0x38
    111c:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    111e:	4b29      	ldr	r3, [pc, #164]	; (11c4 <system_clock_init+0x138>)
    1120:	4798      	blx	r3
	config->run_in_standby  = false;
    1122:	a804      	add	r0, sp, #16
    1124:	2500      	movs	r5, #0
    1126:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    1128:	2601      	movs	r6, #1
    112a:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    112c:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    112e:	4b26      	ldr	r3, [pc, #152]	; (11c8 <system_clock_init+0x13c>)
    1130:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1132:	2006      	movs	r0, #6
    1134:	4f22      	ldr	r7, [pc, #136]	; (11c0 <system_clock_init+0x134>)
    1136:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1138:	4b24      	ldr	r3, [pc, #144]	; (11cc <system_clock_init+0x140>)
    113a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    113c:	ac01      	add	r4, sp, #4
    113e:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    1140:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1142:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1144:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1146:	2304      	movs	r3, #4
    1148:	7023      	strb	r3, [r4, #0]
    114a:	0021      	movs	r1, r4
    114c:	2001      	movs	r0, #1
    114e:	4b20      	ldr	r3, [pc, #128]	; (11d0 <system_clock_init+0x144>)
    1150:	4798      	blx	r3
    1152:	2001      	movs	r0, #1
    1154:	4b1f      	ldr	r3, [pc, #124]	; (11d4 <system_clock_init+0x148>)
    1156:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1158:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    115a:	0021      	movs	r1, r4
    115c:	2000      	movs	r0, #0
    115e:	4b14      	ldr	r3, [pc, #80]	; (11b0 <system_clock_init+0x124>)
    1160:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    1162:	2000      	movs	r0, #0
    1164:	4b1c      	ldr	r3, [pc, #112]	; (11d8 <system_clock_init+0x14c>)
    1166:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1168:	2007      	movs	r0, #7
    116a:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    116c:	490e      	ldr	r1, [pc, #56]	; (11a8 <system_clock_init+0x11c>)
    116e:	22d0      	movs	r2, #208	; 0xd0
    1170:	68cb      	ldr	r3, [r1, #12]
    1172:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1174:	2bd0      	cmp	r3, #208	; 0xd0
    1176:	d1fb      	bne.n	1170 <system_clock_init+0xe4>
	PM->CPUSEL.reg = (uint32_t)divider;
    1178:	4a18      	ldr	r2, [pc, #96]	; (11dc <system_clock_init+0x150>)
    117a:	2300      	movs	r3, #0
    117c:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    117e:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1180:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1182:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    1184:	a901      	add	r1, sp, #4
    1186:	2201      	movs	r2, #1
    1188:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    118a:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    118c:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    118e:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1190:	3307      	adds	r3, #7
    1192:	700b      	strb	r3, [r1, #0]
    1194:	2000      	movs	r0, #0
    1196:	4b0e      	ldr	r3, [pc, #56]	; (11d0 <system_clock_init+0x144>)
    1198:	4798      	blx	r3
    119a:	2000      	movs	r0, #0
    119c:	4b0d      	ldr	r3, [pc, #52]	; (11d4 <system_clock_init+0x148>)
    119e:	4798      	blx	r3
#endif
}
    11a0:	b00d      	add	sp, #52	; 0x34
    11a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    11a4:	3b20      	subs	r3, #32
    11a6:	e7b1      	b.n	110c <system_clock_init+0x80>
    11a8:	40000800 	.word	0x40000800
    11ac:	41004000 	.word	0x41004000
    11b0:	00001419 	.word	0x00001419
    11b4:	00806024 	.word	0x00806024
    11b8:	ff80ffff 	.word	0xff80ffff
    11bc:	00000ee9 	.word	0x00000ee9
    11c0:	00000fe5 	.word	0x00000fe5
    11c4:	00000f65 	.word	0x00000f65
    11c8:	00000ead 	.word	0x00000ead
    11cc:	000011e1 	.word	0x000011e1
    11d0:	00001205 	.word	0x00001205
    11d4:	000012bd 	.word	0x000012bd
    11d8:	0000138d 	.word	0x0000138d
    11dc:	40000400 	.word	0x40000400

000011e0 <system_gclk_init>:
    11e0:	4a06      	ldr	r2, [pc, #24]	; (11fc <system_gclk_init+0x1c>)
    11e2:	6993      	ldr	r3, [r2, #24]
    11e4:	2108      	movs	r1, #8
    11e6:	430b      	orrs	r3, r1
    11e8:	6193      	str	r3, [r2, #24]
    11ea:	2201      	movs	r2, #1
    11ec:	4b04      	ldr	r3, [pc, #16]	; (1200 <system_gclk_init+0x20>)
    11ee:	701a      	strb	r2, [r3, #0]
    11f0:	0019      	movs	r1, r3
    11f2:	780b      	ldrb	r3, [r1, #0]
    11f4:	4213      	tst	r3, r2
    11f6:	d1fc      	bne.n	11f2 <system_gclk_init+0x12>
    11f8:	4770      	bx	lr
    11fa:	46c0      	nop			; (mov r8, r8)
    11fc:	40000400 	.word	0x40000400
    1200:	40000c00 	.word	0x40000c00

00001204 <system_gclk_gen_set_config>:
    1204:	b570      	push	{r4, r5, r6, lr}
    1206:	0006      	movs	r6, r0
    1208:	0004      	movs	r4, r0
    120a:	780d      	ldrb	r5, [r1, #0]
    120c:	022d      	lsls	r5, r5, #8
    120e:	4305      	orrs	r5, r0
    1210:	784b      	ldrb	r3, [r1, #1]
    1212:	2b00      	cmp	r3, #0
    1214:	d002      	beq.n	121c <system_gclk_gen_set_config+0x18>
    1216:	2380      	movs	r3, #128	; 0x80
    1218:	02db      	lsls	r3, r3, #11
    121a:	431d      	orrs	r5, r3
    121c:	7a4b      	ldrb	r3, [r1, #9]
    121e:	2b00      	cmp	r3, #0
    1220:	d002      	beq.n	1228 <system_gclk_gen_set_config+0x24>
    1222:	2380      	movs	r3, #128	; 0x80
    1224:	031b      	lsls	r3, r3, #12
    1226:	431d      	orrs	r5, r3
    1228:	6848      	ldr	r0, [r1, #4]
    122a:	2801      	cmp	r0, #1
    122c:	d910      	bls.n	1250 <system_gclk_gen_set_config+0x4c>
    122e:	1e43      	subs	r3, r0, #1
    1230:	4218      	tst	r0, r3
    1232:	d134      	bne.n	129e <system_gclk_gen_set_config+0x9a>
    1234:	2802      	cmp	r0, #2
    1236:	d930      	bls.n	129a <system_gclk_gen_set_config+0x96>
    1238:	2302      	movs	r3, #2
    123a:	2200      	movs	r2, #0
    123c:	3201      	adds	r2, #1
    123e:	005b      	lsls	r3, r3, #1
    1240:	4298      	cmp	r0, r3
    1242:	d8fb      	bhi.n	123c <system_gclk_gen_set_config+0x38>
    1244:	0212      	lsls	r2, r2, #8
    1246:	4332      	orrs	r2, r6
    1248:	0014      	movs	r4, r2
    124a:	2380      	movs	r3, #128	; 0x80
    124c:	035b      	lsls	r3, r3, #13
    124e:	431d      	orrs	r5, r3
    1250:	7a0b      	ldrb	r3, [r1, #8]
    1252:	2b00      	cmp	r3, #0
    1254:	d002      	beq.n	125c <system_gclk_gen_set_config+0x58>
    1256:	2380      	movs	r3, #128	; 0x80
    1258:	039b      	lsls	r3, r3, #14
    125a:	431d      	orrs	r5, r3
    125c:	4a13      	ldr	r2, [pc, #76]	; (12ac <system_gclk_gen_set_config+0xa8>)
    125e:	7853      	ldrb	r3, [r2, #1]
    1260:	b25b      	sxtb	r3, r3
    1262:	2b00      	cmp	r3, #0
    1264:	dbfb      	blt.n	125e <system_gclk_gen_set_config+0x5a>
    1266:	4b12      	ldr	r3, [pc, #72]	; (12b0 <system_gclk_gen_set_config+0xac>)
    1268:	4798      	blx	r3
    126a:	4b12      	ldr	r3, [pc, #72]	; (12b4 <system_gclk_gen_set_config+0xb0>)
    126c:	701e      	strb	r6, [r3, #0]
    126e:	4a0f      	ldr	r2, [pc, #60]	; (12ac <system_gclk_gen_set_config+0xa8>)
    1270:	7853      	ldrb	r3, [r2, #1]
    1272:	b25b      	sxtb	r3, r3
    1274:	2b00      	cmp	r3, #0
    1276:	dbfb      	blt.n	1270 <system_gclk_gen_set_config+0x6c>
    1278:	4b0c      	ldr	r3, [pc, #48]	; (12ac <system_gclk_gen_set_config+0xa8>)
    127a:	609c      	str	r4, [r3, #8]
    127c:	001a      	movs	r2, r3
    127e:	7853      	ldrb	r3, [r2, #1]
    1280:	b25b      	sxtb	r3, r3
    1282:	2b00      	cmp	r3, #0
    1284:	dbfb      	blt.n	127e <system_gclk_gen_set_config+0x7a>
    1286:	4a09      	ldr	r2, [pc, #36]	; (12ac <system_gclk_gen_set_config+0xa8>)
    1288:	6853      	ldr	r3, [r2, #4]
    128a:	2180      	movs	r1, #128	; 0x80
    128c:	0249      	lsls	r1, r1, #9
    128e:	400b      	ands	r3, r1
    1290:	431d      	orrs	r5, r3
    1292:	6055      	str	r5, [r2, #4]
    1294:	4b08      	ldr	r3, [pc, #32]	; (12b8 <system_gclk_gen_set_config+0xb4>)
    1296:	4798      	blx	r3
    1298:	bd70      	pop	{r4, r5, r6, pc}
    129a:	2200      	movs	r2, #0
    129c:	e7d2      	b.n	1244 <system_gclk_gen_set_config+0x40>
    129e:	0204      	lsls	r4, r0, #8
    12a0:	4334      	orrs	r4, r6
    12a2:	2380      	movs	r3, #128	; 0x80
    12a4:	029b      	lsls	r3, r3, #10
    12a6:	431d      	orrs	r5, r3
    12a8:	e7d2      	b.n	1250 <system_gclk_gen_set_config+0x4c>
    12aa:	46c0      	nop			; (mov r8, r8)
    12ac:	40000c00 	.word	0x40000c00
    12b0:	00000da9 	.word	0x00000da9
    12b4:	40000c08 	.word	0x40000c08
    12b8:	00000de9 	.word	0x00000de9

000012bc <system_gclk_gen_enable>:
    12bc:	b510      	push	{r4, lr}
    12be:	0004      	movs	r4, r0
    12c0:	4a0b      	ldr	r2, [pc, #44]	; (12f0 <system_gclk_gen_enable+0x34>)
    12c2:	7853      	ldrb	r3, [r2, #1]
    12c4:	b25b      	sxtb	r3, r3
    12c6:	2b00      	cmp	r3, #0
    12c8:	dbfb      	blt.n	12c2 <system_gclk_gen_enable+0x6>
    12ca:	4b0a      	ldr	r3, [pc, #40]	; (12f4 <system_gclk_gen_enable+0x38>)
    12cc:	4798      	blx	r3
    12ce:	4b0a      	ldr	r3, [pc, #40]	; (12f8 <system_gclk_gen_enable+0x3c>)
    12d0:	701c      	strb	r4, [r3, #0]
    12d2:	4a07      	ldr	r2, [pc, #28]	; (12f0 <system_gclk_gen_enable+0x34>)
    12d4:	7853      	ldrb	r3, [r2, #1]
    12d6:	b25b      	sxtb	r3, r3
    12d8:	2b00      	cmp	r3, #0
    12da:	dbfb      	blt.n	12d4 <system_gclk_gen_enable+0x18>
    12dc:	4a04      	ldr	r2, [pc, #16]	; (12f0 <system_gclk_gen_enable+0x34>)
    12de:	6851      	ldr	r1, [r2, #4]
    12e0:	2380      	movs	r3, #128	; 0x80
    12e2:	025b      	lsls	r3, r3, #9
    12e4:	430b      	orrs	r3, r1
    12e6:	6053      	str	r3, [r2, #4]
    12e8:	4b04      	ldr	r3, [pc, #16]	; (12fc <system_gclk_gen_enable+0x40>)
    12ea:	4798      	blx	r3
    12ec:	bd10      	pop	{r4, pc}
    12ee:	46c0      	nop			; (mov r8, r8)
    12f0:	40000c00 	.word	0x40000c00
    12f4:	00000da9 	.word	0x00000da9
    12f8:	40000c04 	.word	0x40000c04
    12fc:	00000de9 	.word	0x00000de9

00001300 <system_gclk_gen_get_hz>:
    1300:	b570      	push	{r4, r5, r6, lr}
    1302:	0004      	movs	r4, r0
    1304:	4a1a      	ldr	r2, [pc, #104]	; (1370 <system_gclk_gen_get_hz+0x70>)
    1306:	7853      	ldrb	r3, [r2, #1]
    1308:	b25b      	sxtb	r3, r3
    130a:	2b00      	cmp	r3, #0
    130c:	dbfb      	blt.n	1306 <system_gclk_gen_get_hz+0x6>
    130e:	4b19      	ldr	r3, [pc, #100]	; (1374 <system_gclk_gen_get_hz+0x74>)
    1310:	4798      	blx	r3
    1312:	4b19      	ldr	r3, [pc, #100]	; (1378 <system_gclk_gen_get_hz+0x78>)
    1314:	701c      	strb	r4, [r3, #0]
    1316:	4a16      	ldr	r2, [pc, #88]	; (1370 <system_gclk_gen_get_hz+0x70>)
    1318:	7853      	ldrb	r3, [r2, #1]
    131a:	b25b      	sxtb	r3, r3
    131c:	2b00      	cmp	r3, #0
    131e:	dbfb      	blt.n	1318 <system_gclk_gen_get_hz+0x18>
    1320:	4e13      	ldr	r6, [pc, #76]	; (1370 <system_gclk_gen_get_hz+0x70>)
    1322:	6870      	ldr	r0, [r6, #4]
    1324:	04c0      	lsls	r0, r0, #19
    1326:	0ec0      	lsrs	r0, r0, #27
    1328:	4b14      	ldr	r3, [pc, #80]	; (137c <system_gclk_gen_get_hz+0x7c>)
    132a:	4798      	blx	r3
    132c:	0005      	movs	r5, r0
    132e:	4b12      	ldr	r3, [pc, #72]	; (1378 <system_gclk_gen_get_hz+0x78>)
    1330:	701c      	strb	r4, [r3, #0]
    1332:	6876      	ldr	r6, [r6, #4]
    1334:	02f6      	lsls	r6, r6, #11
    1336:	0ff6      	lsrs	r6, r6, #31
    1338:	4b11      	ldr	r3, [pc, #68]	; (1380 <system_gclk_gen_get_hz+0x80>)
    133a:	701c      	strb	r4, [r3, #0]
    133c:	4a0c      	ldr	r2, [pc, #48]	; (1370 <system_gclk_gen_get_hz+0x70>)
    133e:	7853      	ldrb	r3, [r2, #1]
    1340:	b25b      	sxtb	r3, r3
    1342:	2b00      	cmp	r3, #0
    1344:	dbfb      	blt.n	133e <system_gclk_gen_get_hz+0x3e>
    1346:	4b0a      	ldr	r3, [pc, #40]	; (1370 <system_gclk_gen_get_hz+0x70>)
    1348:	689c      	ldr	r4, [r3, #8]
    134a:	0224      	lsls	r4, r4, #8
    134c:	0c24      	lsrs	r4, r4, #16
    134e:	4b0d      	ldr	r3, [pc, #52]	; (1384 <system_gclk_gen_get_hz+0x84>)
    1350:	4798      	blx	r3
    1352:	2e00      	cmp	r6, #0
    1354:	d107      	bne.n	1366 <system_gclk_gen_get_hz+0x66>
    1356:	2c01      	cmp	r4, #1
    1358:	d907      	bls.n	136a <system_gclk_gen_get_hz+0x6a>
    135a:	0021      	movs	r1, r4
    135c:	0028      	movs	r0, r5
    135e:	4b0a      	ldr	r3, [pc, #40]	; (1388 <system_gclk_gen_get_hz+0x88>)
    1360:	4798      	blx	r3
    1362:	0005      	movs	r5, r0
    1364:	e001      	b.n	136a <system_gclk_gen_get_hz+0x6a>
    1366:	3401      	adds	r4, #1
    1368:	40e5      	lsrs	r5, r4
    136a:	0028      	movs	r0, r5
    136c:	bd70      	pop	{r4, r5, r6, pc}
    136e:	46c0      	nop			; (mov r8, r8)
    1370:	40000c00 	.word	0x40000c00
    1374:	00000da9 	.word	0x00000da9
    1378:	40000c04 	.word	0x40000c04
    137c:	00000e19 	.word	0x00000e19
    1380:	40000c08 	.word	0x40000c08
    1384:	00000de9 	.word	0x00000de9
    1388:	00001635 	.word	0x00001635

0000138c <system_gclk_chan_enable>:
    138c:	b510      	push	{r4, lr}
    138e:	0004      	movs	r4, r0
    1390:	4b06      	ldr	r3, [pc, #24]	; (13ac <system_gclk_chan_enable+0x20>)
    1392:	4798      	blx	r3
    1394:	4b06      	ldr	r3, [pc, #24]	; (13b0 <system_gclk_chan_enable+0x24>)
    1396:	701c      	strb	r4, [r3, #0]
    1398:	4a06      	ldr	r2, [pc, #24]	; (13b4 <system_gclk_chan_enable+0x28>)
    139a:	8853      	ldrh	r3, [r2, #2]
    139c:	2180      	movs	r1, #128	; 0x80
    139e:	01c9      	lsls	r1, r1, #7
    13a0:	430b      	orrs	r3, r1
    13a2:	8053      	strh	r3, [r2, #2]
    13a4:	4b04      	ldr	r3, [pc, #16]	; (13b8 <system_gclk_chan_enable+0x2c>)
    13a6:	4798      	blx	r3
    13a8:	bd10      	pop	{r4, pc}
    13aa:	46c0      	nop			; (mov r8, r8)
    13ac:	00000da9 	.word	0x00000da9
    13b0:	40000c02 	.word	0x40000c02
    13b4:	40000c00 	.word	0x40000c00
    13b8:	00000de9 	.word	0x00000de9

000013bc <system_gclk_chan_disable>:
    13bc:	b510      	push	{r4, lr}
    13be:	0004      	movs	r4, r0
    13c0:	4b0f      	ldr	r3, [pc, #60]	; (1400 <system_gclk_chan_disable+0x44>)
    13c2:	4798      	blx	r3
    13c4:	4b0f      	ldr	r3, [pc, #60]	; (1404 <system_gclk_chan_disable+0x48>)
    13c6:	701c      	strb	r4, [r3, #0]
    13c8:	4a0f      	ldr	r2, [pc, #60]	; (1408 <system_gclk_chan_disable+0x4c>)
    13ca:	8853      	ldrh	r3, [r2, #2]
    13cc:	051b      	lsls	r3, r3, #20
    13ce:	0f18      	lsrs	r0, r3, #28
    13d0:	8853      	ldrh	r3, [r2, #2]
    13d2:	490e      	ldr	r1, [pc, #56]	; (140c <system_gclk_chan_disable+0x50>)
    13d4:	400b      	ands	r3, r1
    13d6:	8053      	strh	r3, [r2, #2]
    13d8:	8853      	ldrh	r3, [r2, #2]
    13da:	490d      	ldr	r1, [pc, #52]	; (1410 <system_gclk_chan_disable+0x54>)
    13dc:	400b      	ands	r3, r1
    13de:	8053      	strh	r3, [r2, #2]
    13e0:	0011      	movs	r1, r2
    13e2:	2280      	movs	r2, #128	; 0x80
    13e4:	01d2      	lsls	r2, r2, #7
    13e6:	884b      	ldrh	r3, [r1, #2]
    13e8:	4213      	tst	r3, r2
    13ea:	d1fc      	bne.n	13e6 <system_gclk_chan_disable+0x2a>
    13ec:	4906      	ldr	r1, [pc, #24]	; (1408 <system_gclk_chan_disable+0x4c>)
    13ee:	884a      	ldrh	r2, [r1, #2]
    13f0:	0203      	lsls	r3, r0, #8
    13f2:	4806      	ldr	r0, [pc, #24]	; (140c <system_gclk_chan_disable+0x50>)
    13f4:	4002      	ands	r2, r0
    13f6:	4313      	orrs	r3, r2
    13f8:	804b      	strh	r3, [r1, #2]
    13fa:	4b06      	ldr	r3, [pc, #24]	; (1414 <system_gclk_chan_disable+0x58>)
    13fc:	4798      	blx	r3
    13fe:	bd10      	pop	{r4, pc}
    1400:	00000da9 	.word	0x00000da9
    1404:	40000c02 	.word	0x40000c02
    1408:	40000c00 	.word	0x40000c00
    140c:	fffff0ff 	.word	0xfffff0ff
    1410:	ffffbfff 	.word	0xffffbfff
    1414:	00000de9 	.word	0x00000de9

00001418 <system_gclk_chan_set_config>:
    1418:	b510      	push	{r4, lr}
    141a:	780c      	ldrb	r4, [r1, #0]
    141c:	0224      	lsls	r4, r4, #8
    141e:	4304      	orrs	r4, r0
    1420:	4b02      	ldr	r3, [pc, #8]	; (142c <system_gclk_chan_set_config+0x14>)
    1422:	4798      	blx	r3
    1424:	b2a4      	uxth	r4, r4
    1426:	4b02      	ldr	r3, [pc, #8]	; (1430 <system_gclk_chan_set_config+0x18>)
    1428:	805c      	strh	r4, [r3, #2]
    142a:	bd10      	pop	{r4, pc}
    142c:	000013bd 	.word	0x000013bd
    1430:	40000c00 	.word	0x40000c00

00001434 <system_gclk_chan_get_hz>:
    1434:	b510      	push	{r4, lr}
    1436:	0004      	movs	r4, r0
    1438:	4b06      	ldr	r3, [pc, #24]	; (1454 <system_gclk_chan_get_hz+0x20>)
    143a:	4798      	blx	r3
    143c:	4b06      	ldr	r3, [pc, #24]	; (1458 <system_gclk_chan_get_hz+0x24>)
    143e:	701c      	strb	r4, [r3, #0]
    1440:	4b06      	ldr	r3, [pc, #24]	; (145c <system_gclk_chan_get_hz+0x28>)
    1442:	885c      	ldrh	r4, [r3, #2]
    1444:	0524      	lsls	r4, r4, #20
    1446:	0f24      	lsrs	r4, r4, #28
    1448:	4b05      	ldr	r3, [pc, #20]	; (1460 <system_gclk_chan_get_hz+0x2c>)
    144a:	4798      	blx	r3
    144c:	0020      	movs	r0, r4
    144e:	4b05      	ldr	r3, [pc, #20]	; (1464 <system_gclk_chan_get_hz+0x30>)
    1450:	4798      	blx	r3
    1452:	bd10      	pop	{r4, pc}
    1454:	00000da9 	.word	0x00000da9
    1458:	40000c02 	.word	0x40000c02
    145c:	40000c00 	.word	0x40000c00
    1460:	00000de9 	.word	0x00000de9
    1464:	00001301 	.word	0x00001301

00001468 <_system_pinmux_config>:
    1468:	b530      	push	{r4, r5, lr}
    146a:	78d3      	ldrb	r3, [r2, #3]
    146c:	2b00      	cmp	r3, #0
    146e:	d135      	bne.n	14dc <_system_pinmux_config+0x74>
    1470:	7813      	ldrb	r3, [r2, #0]
    1472:	2b80      	cmp	r3, #128	; 0x80
    1474:	d029      	beq.n	14ca <_system_pinmux_config+0x62>
    1476:	061b      	lsls	r3, r3, #24
    1478:	2480      	movs	r4, #128	; 0x80
    147a:	0264      	lsls	r4, r4, #9
    147c:	4323      	orrs	r3, r4
    147e:	7854      	ldrb	r4, [r2, #1]
    1480:	2502      	movs	r5, #2
    1482:	43ac      	bics	r4, r5
    1484:	d106      	bne.n	1494 <_system_pinmux_config+0x2c>
    1486:	7894      	ldrb	r4, [r2, #2]
    1488:	2c00      	cmp	r4, #0
    148a:	d120      	bne.n	14ce <_system_pinmux_config+0x66>
    148c:	2480      	movs	r4, #128	; 0x80
    148e:	02a4      	lsls	r4, r4, #10
    1490:	4323      	orrs	r3, r4
    1492:	6041      	str	r1, [r0, #4]
    1494:	7854      	ldrb	r4, [r2, #1]
    1496:	3c01      	subs	r4, #1
    1498:	2c01      	cmp	r4, #1
    149a:	d91c      	bls.n	14d6 <_system_pinmux_config+0x6e>
    149c:	040d      	lsls	r5, r1, #16
    149e:	0c2d      	lsrs	r5, r5, #16
    14a0:	24a0      	movs	r4, #160	; 0xa0
    14a2:	05e4      	lsls	r4, r4, #23
    14a4:	432c      	orrs	r4, r5
    14a6:	431c      	orrs	r4, r3
    14a8:	6284      	str	r4, [r0, #40]	; 0x28
    14aa:	0c0d      	lsrs	r5, r1, #16
    14ac:	24d0      	movs	r4, #208	; 0xd0
    14ae:	0624      	lsls	r4, r4, #24
    14b0:	432c      	orrs	r4, r5
    14b2:	431c      	orrs	r4, r3
    14b4:	6284      	str	r4, [r0, #40]	; 0x28
    14b6:	78d4      	ldrb	r4, [r2, #3]
    14b8:	2c00      	cmp	r4, #0
    14ba:	d122      	bne.n	1502 <_system_pinmux_config+0x9a>
    14bc:	035b      	lsls	r3, r3, #13
    14be:	d51c      	bpl.n	14fa <_system_pinmux_config+0x92>
    14c0:	7893      	ldrb	r3, [r2, #2]
    14c2:	2b01      	cmp	r3, #1
    14c4:	d01e      	beq.n	1504 <_system_pinmux_config+0x9c>
    14c6:	6141      	str	r1, [r0, #20]
    14c8:	e017      	b.n	14fa <_system_pinmux_config+0x92>
    14ca:	2300      	movs	r3, #0
    14cc:	e7d7      	b.n	147e <_system_pinmux_config+0x16>
    14ce:	24c0      	movs	r4, #192	; 0xc0
    14d0:	02e4      	lsls	r4, r4, #11
    14d2:	4323      	orrs	r3, r4
    14d4:	e7dd      	b.n	1492 <_system_pinmux_config+0x2a>
    14d6:	4c0d      	ldr	r4, [pc, #52]	; (150c <_system_pinmux_config+0xa4>)
    14d8:	4023      	ands	r3, r4
    14da:	e7df      	b.n	149c <_system_pinmux_config+0x34>
    14dc:	6041      	str	r1, [r0, #4]
    14de:	040c      	lsls	r4, r1, #16
    14e0:	0c24      	lsrs	r4, r4, #16
    14e2:	23a0      	movs	r3, #160	; 0xa0
    14e4:	05db      	lsls	r3, r3, #23
    14e6:	4323      	orrs	r3, r4
    14e8:	6283      	str	r3, [r0, #40]	; 0x28
    14ea:	0c0c      	lsrs	r4, r1, #16
    14ec:	23d0      	movs	r3, #208	; 0xd0
    14ee:	061b      	lsls	r3, r3, #24
    14f0:	4323      	orrs	r3, r4
    14f2:	6283      	str	r3, [r0, #40]	; 0x28
    14f4:	78d3      	ldrb	r3, [r2, #3]
    14f6:	2b00      	cmp	r3, #0
    14f8:	d103      	bne.n	1502 <_system_pinmux_config+0x9a>
    14fa:	7853      	ldrb	r3, [r2, #1]
    14fc:	3b01      	subs	r3, #1
    14fe:	2b01      	cmp	r3, #1
    1500:	d902      	bls.n	1508 <_system_pinmux_config+0xa0>
    1502:	bd30      	pop	{r4, r5, pc}
    1504:	6181      	str	r1, [r0, #24]
    1506:	e7f8      	b.n	14fa <_system_pinmux_config+0x92>
    1508:	6081      	str	r1, [r0, #8]
    150a:	e7fa      	b.n	1502 <_system_pinmux_config+0x9a>
    150c:	fffbffff 	.word	0xfffbffff

00001510 <system_pinmux_pin_set_config>:
    1510:	b510      	push	{r4, lr}
    1512:	000a      	movs	r2, r1
    1514:	09c1      	lsrs	r1, r0, #7
    1516:	2300      	movs	r3, #0
    1518:	2900      	cmp	r1, #0
    151a:	d104      	bne.n	1526 <system_pinmux_pin_set_config+0x16>
    151c:	0943      	lsrs	r3, r0, #5
    151e:	01db      	lsls	r3, r3, #7
    1520:	4905      	ldr	r1, [pc, #20]	; (1538 <system_pinmux_pin_set_config+0x28>)
    1522:	468c      	mov	ip, r1
    1524:	4463      	add	r3, ip
    1526:	241f      	movs	r4, #31
    1528:	4020      	ands	r0, r4
    152a:	2101      	movs	r1, #1
    152c:	4081      	lsls	r1, r0
    152e:	0018      	movs	r0, r3
    1530:	4b02      	ldr	r3, [pc, #8]	; (153c <system_pinmux_pin_set_config+0x2c>)
    1532:	4798      	blx	r3
    1534:	bd10      	pop	{r4, pc}
    1536:	46c0      	nop			; (mov r8, r8)
    1538:	41004400 	.word	0x41004400
    153c:	00001469 	.word	0x00001469

00001540 <Dummy_Handler>:
    1540:	e7fe      	b.n	1540 <Dummy_Handler>
	...

00001544 <Reset_Handler>:
    1544:	b510      	push	{r4, lr}
    1546:	4a26      	ldr	r2, [pc, #152]	; (15e0 <Reset_Handler+0x9c>)
    1548:	4b26      	ldr	r3, [pc, #152]	; (15e4 <Reset_Handler+0xa0>)
    154a:	429a      	cmp	r2, r3
    154c:	d011      	beq.n	1572 <Reset_Handler+0x2e>
    154e:	001a      	movs	r2, r3
    1550:	4b25      	ldr	r3, [pc, #148]	; (15e8 <Reset_Handler+0xa4>)
    1552:	429a      	cmp	r2, r3
    1554:	d20d      	bcs.n	1572 <Reset_Handler+0x2e>
    1556:	4a25      	ldr	r2, [pc, #148]	; (15ec <Reset_Handler+0xa8>)
    1558:	3303      	adds	r3, #3
    155a:	1a9b      	subs	r3, r3, r2
    155c:	089b      	lsrs	r3, r3, #2
    155e:	3301      	adds	r3, #1
    1560:	009b      	lsls	r3, r3, #2
    1562:	2200      	movs	r2, #0
    1564:	481f      	ldr	r0, [pc, #124]	; (15e4 <Reset_Handler+0xa0>)
    1566:	491e      	ldr	r1, [pc, #120]	; (15e0 <Reset_Handler+0x9c>)
    1568:	588c      	ldr	r4, [r1, r2]
    156a:	5084      	str	r4, [r0, r2]
    156c:	3204      	adds	r2, #4
    156e:	429a      	cmp	r2, r3
    1570:	d1fa      	bne.n	1568 <Reset_Handler+0x24>
    1572:	4a1f      	ldr	r2, [pc, #124]	; (15f0 <Reset_Handler+0xac>)
    1574:	4b1f      	ldr	r3, [pc, #124]	; (15f4 <Reset_Handler+0xb0>)
    1576:	429a      	cmp	r2, r3
    1578:	d20a      	bcs.n	1590 <Reset_Handler+0x4c>
    157a:	43d3      	mvns	r3, r2
    157c:	491d      	ldr	r1, [pc, #116]	; (15f4 <Reset_Handler+0xb0>)
    157e:	185b      	adds	r3, r3, r1
    1580:	2103      	movs	r1, #3
    1582:	438b      	bics	r3, r1
    1584:	3304      	adds	r3, #4
    1586:	189b      	adds	r3, r3, r2
    1588:	2100      	movs	r1, #0
    158a:	c202      	stmia	r2!, {r1}
    158c:	4293      	cmp	r3, r2
    158e:	d1fc      	bne.n	158a <Reset_Handler+0x46>
    1590:	4a19      	ldr	r2, [pc, #100]	; (15f8 <Reset_Handler+0xb4>)
    1592:	21ff      	movs	r1, #255	; 0xff
    1594:	4b19      	ldr	r3, [pc, #100]	; (15fc <Reset_Handler+0xb8>)
    1596:	438b      	bics	r3, r1
    1598:	6093      	str	r3, [r2, #8]
    159a:	39fd      	subs	r1, #253	; 0xfd
    159c:	2390      	movs	r3, #144	; 0x90
    159e:	005b      	lsls	r3, r3, #1
    15a0:	4a17      	ldr	r2, [pc, #92]	; (1600 <Reset_Handler+0xbc>)
    15a2:	50d1      	str	r1, [r2, r3]
    15a4:	4b17      	ldr	r3, [pc, #92]	; (1604 <Reset_Handler+0xc0>)
    15a6:	7b9a      	ldrb	r2, [r3, #14]
    15a8:	312e      	adds	r1, #46	; 0x2e
    15aa:	438a      	bics	r2, r1
    15ac:	2120      	movs	r1, #32
    15ae:	430a      	orrs	r2, r1
    15b0:	739a      	strb	r2, [r3, #14]
    15b2:	7b9a      	ldrb	r2, [r3, #14]
    15b4:	210c      	movs	r1, #12
    15b6:	438a      	bics	r2, r1
    15b8:	2108      	movs	r1, #8
    15ba:	430a      	orrs	r2, r1
    15bc:	739a      	strb	r2, [r3, #14]
    15be:	7b9a      	ldrb	r2, [r3, #14]
    15c0:	2103      	movs	r1, #3
    15c2:	438a      	bics	r2, r1
    15c4:	2102      	movs	r1, #2
    15c6:	430a      	orrs	r2, r1
    15c8:	739a      	strb	r2, [r3, #14]
    15ca:	4a0f      	ldr	r2, [pc, #60]	; (1608 <Reset_Handler+0xc4>)
    15cc:	6853      	ldr	r3, [r2, #4]
    15ce:	2180      	movs	r1, #128	; 0x80
    15d0:	430b      	orrs	r3, r1
    15d2:	6053      	str	r3, [r2, #4]
    15d4:	4b0d      	ldr	r3, [pc, #52]	; (160c <Reset_Handler+0xc8>)
    15d6:	4798      	blx	r3
    15d8:	4b0d      	ldr	r3, [pc, #52]	; (1610 <Reset_Handler+0xcc>)
    15da:	4798      	blx	r3
    15dc:	e7fe      	b.n	15dc <Reset_Handler+0x98>
    15de:	46c0      	nop			; (mov r8, r8)
    15e0:	00001b50 	.word	0x00001b50
    15e4:	20000000 	.word	0x20000000
    15e8:	20000444 	.word	0x20000444
    15ec:	20000004 	.word	0x20000004
    15f0:	20000444 	.word	0x20000444
    15f4:	200005a8 	.word	0x200005a8
    15f8:	e000ed00 	.word	0xe000ed00
    15fc:	00000000 	.word	0x00000000
    1600:	41007000 	.word	0x41007000
    1604:	41004800 	.word	0x41004800
    1608:	41004000 	.word	0x41004000
    160c:	00001931 	.word	0x00001931
    1610:	000003c1 	.word	0x000003c1

00001614 <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
    1614:	4a01      	ldr	r2, [pc, #4]	; (161c <SystemInit+0x8>)
    1616:	4b02      	ldr	r3, [pc, #8]	; (1620 <SystemInit+0xc>)
    1618:	601a      	str	r2, [r3, #0]
	return;
}
    161a:	4770      	bx	lr
    161c:	000f4240 	.word	0x000f4240
    1620:	20000010 	.word	0x20000010

00001624 <__aeabi_atexit>:
    1624:	000b      	movs	r3, r1
    1626:	b510      	push	{r4, lr}
    1628:	0001      	movs	r1, r0
    162a:	0018      	movs	r0, r3
    162c:	f000 f978 	bl	1920 <__cxa_atexit>
    1630:	bd10      	pop	{r4, pc}
    1632:	46c0      	nop			; (mov r8, r8)

00001634 <__udivsi3>:
    1634:	2200      	movs	r2, #0
    1636:	0843      	lsrs	r3, r0, #1
    1638:	428b      	cmp	r3, r1
    163a:	d374      	bcc.n	1726 <__udivsi3+0xf2>
    163c:	0903      	lsrs	r3, r0, #4
    163e:	428b      	cmp	r3, r1
    1640:	d35f      	bcc.n	1702 <__udivsi3+0xce>
    1642:	0a03      	lsrs	r3, r0, #8
    1644:	428b      	cmp	r3, r1
    1646:	d344      	bcc.n	16d2 <__udivsi3+0x9e>
    1648:	0b03      	lsrs	r3, r0, #12
    164a:	428b      	cmp	r3, r1
    164c:	d328      	bcc.n	16a0 <__udivsi3+0x6c>
    164e:	0c03      	lsrs	r3, r0, #16
    1650:	428b      	cmp	r3, r1
    1652:	d30d      	bcc.n	1670 <__udivsi3+0x3c>
    1654:	22ff      	movs	r2, #255	; 0xff
    1656:	0209      	lsls	r1, r1, #8
    1658:	ba12      	rev	r2, r2
    165a:	0c03      	lsrs	r3, r0, #16
    165c:	428b      	cmp	r3, r1
    165e:	d302      	bcc.n	1666 <__udivsi3+0x32>
    1660:	1212      	asrs	r2, r2, #8
    1662:	0209      	lsls	r1, r1, #8
    1664:	d065      	beq.n	1732 <__udivsi3+0xfe>
    1666:	0b03      	lsrs	r3, r0, #12
    1668:	428b      	cmp	r3, r1
    166a:	d319      	bcc.n	16a0 <__udivsi3+0x6c>
    166c:	e000      	b.n	1670 <__udivsi3+0x3c>
    166e:	0a09      	lsrs	r1, r1, #8
    1670:	0bc3      	lsrs	r3, r0, #15
    1672:	428b      	cmp	r3, r1
    1674:	d301      	bcc.n	167a <__udivsi3+0x46>
    1676:	03cb      	lsls	r3, r1, #15
    1678:	1ac0      	subs	r0, r0, r3
    167a:	4152      	adcs	r2, r2
    167c:	0b83      	lsrs	r3, r0, #14
    167e:	428b      	cmp	r3, r1
    1680:	d301      	bcc.n	1686 <__udivsi3+0x52>
    1682:	038b      	lsls	r3, r1, #14
    1684:	1ac0      	subs	r0, r0, r3
    1686:	4152      	adcs	r2, r2
    1688:	0b43      	lsrs	r3, r0, #13
    168a:	428b      	cmp	r3, r1
    168c:	d301      	bcc.n	1692 <__udivsi3+0x5e>
    168e:	034b      	lsls	r3, r1, #13
    1690:	1ac0      	subs	r0, r0, r3
    1692:	4152      	adcs	r2, r2
    1694:	0b03      	lsrs	r3, r0, #12
    1696:	428b      	cmp	r3, r1
    1698:	d301      	bcc.n	169e <__udivsi3+0x6a>
    169a:	030b      	lsls	r3, r1, #12
    169c:	1ac0      	subs	r0, r0, r3
    169e:	4152      	adcs	r2, r2
    16a0:	0ac3      	lsrs	r3, r0, #11
    16a2:	428b      	cmp	r3, r1
    16a4:	d301      	bcc.n	16aa <__udivsi3+0x76>
    16a6:	02cb      	lsls	r3, r1, #11
    16a8:	1ac0      	subs	r0, r0, r3
    16aa:	4152      	adcs	r2, r2
    16ac:	0a83      	lsrs	r3, r0, #10
    16ae:	428b      	cmp	r3, r1
    16b0:	d301      	bcc.n	16b6 <__udivsi3+0x82>
    16b2:	028b      	lsls	r3, r1, #10
    16b4:	1ac0      	subs	r0, r0, r3
    16b6:	4152      	adcs	r2, r2
    16b8:	0a43      	lsrs	r3, r0, #9
    16ba:	428b      	cmp	r3, r1
    16bc:	d301      	bcc.n	16c2 <__udivsi3+0x8e>
    16be:	024b      	lsls	r3, r1, #9
    16c0:	1ac0      	subs	r0, r0, r3
    16c2:	4152      	adcs	r2, r2
    16c4:	0a03      	lsrs	r3, r0, #8
    16c6:	428b      	cmp	r3, r1
    16c8:	d301      	bcc.n	16ce <__udivsi3+0x9a>
    16ca:	020b      	lsls	r3, r1, #8
    16cc:	1ac0      	subs	r0, r0, r3
    16ce:	4152      	adcs	r2, r2
    16d0:	d2cd      	bcs.n	166e <__udivsi3+0x3a>
    16d2:	09c3      	lsrs	r3, r0, #7
    16d4:	428b      	cmp	r3, r1
    16d6:	d301      	bcc.n	16dc <__udivsi3+0xa8>
    16d8:	01cb      	lsls	r3, r1, #7
    16da:	1ac0      	subs	r0, r0, r3
    16dc:	4152      	adcs	r2, r2
    16de:	0983      	lsrs	r3, r0, #6
    16e0:	428b      	cmp	r3, r1
    16e2:	d301      	bcc.n	16e8 <__udivsi3+0xb4>
    16e4:	018b      	lsls	r3, r1, #6
    16e6:	1ac0      	subs	r0, r0, r3
    16e8:	4152      	adcs	r2, r2
    16ea:	0943      	lsrs	r3, r0, #5
    16ec:	428b      	cmp	r3, r1
    16ee:	d301      	bcc.n	16f4 <__udivsi3+0xc0>
    16f0:	014b      	lsls	r3, r1, #5
    16f2:	1ac0      	subs	r0, r0, r3
    16f4:	4152      	adcs	r2, r2
    16f6:	0903      	lsrs	r3, r0, #4
    16f8:	428b      	cmp	r3, r1
    16fa:	d301      	bcc.n	1700 <__udivsi3+0xcc>
    16fc:	010b      	lsls	r3, r1, #4
    16fe:	1ac0      	subs	r0, r0, r3
    1700:	4152      	adcs	r2, r2
    1702:	08c3      	lsrs	r3, r0, #3
    1704:	428b      	cmp	r3, r1
    1706:	d301      	bcc.n	170c <__udivsi3+0xd8>
    1708:	00cb      	lsls	r3, r1, #3
    170a:	1ac0      	subs	r0, r0, r3
    170c:	4152      	adcs	r2, r2
    170e:	0883      	lsrs	r3, r0, #2
    1710:	428b      	cmp	r3, r1
    1712:	d301      	bcc.n	1718 <__udivsi3+0xe4>
    1714:	008b      	lsls	r3, r1, #2
    1716:	1ac0      	subs	r0, r0, r3
    1718:	4152      	adcs	r2, r2
    171a:	0843      	lsrs	r3, r0, #1
    171c:	428b      	cmp	r3, r1
    171e:	d301      	bcc.n	1724 <__udivsi3+0xf0>
    1720:	004b      	lsls	r3, r1, #1
    1722:	1ac0      	subs	r0, r0, r3
    1724:	4152      	adcs	r2, r2
    1726:	1a41      	subs	r1, r0, r1
    1728:	d200      	bcs.n	172c <__udivsi3+0xf8>
    172a:	4601      	mov	r1, r0
    172c:	4152      	adcs	r2, r2
    172e:	4610      	mov	r0, r2
    1730:	4770      	bx	lr
    1732:	e7ff      	b.n	1734 <__udivsi3+0x100>
    1734:	b501      	push	{r0, lr}
    1736:	2000      	movs	r0, #0
    1738:	f000 f8f0 	bl	191c <__aeabi_idiv0>
    173c:	bd02      	pop	{r1, pc}
    173e:	46c0      	nop			; (mov r8, r8)

00001740 <__aeabi_uidivmod>:
    1740:	2900      	cmp	r1, #0
    1742:	d0f7      	beq.n	1734 <__udivsi3+0x100>
    1744:	e776      	b.n	1634 <__udivsi3>
    1746:	4770      	bx	lr

00001748 <__divsi3>:
    1748:	4603      	mov	r3, r0
    174a:	430b      	orrs	r3, r1
    174c:	d47f      	bmi.n	184e <__divsi3+0x106>
    174e:	2200      	movs	r2, #0
    1750:	0843      	lsrs	r3, r0, #1
    1752:	428b      	cmp	r3, r1
    1754:	d374      	bcc.n	1840 <__divsi3+0xf8>
    1756:	0903      	lsrs	r3, r0, #4
    1758:	428b      	cmp	r3, r1
    175a:	d35f      	bcc.n	181c <__divsi3+0xd4>
    175c:	0a03      	lsrs	r3, r0, #8
    175e:	428b      	cmp	r3, r1
    1760:	d344      	bcc.n	17ec <__divsi3+0xa4>
    1762:	0b03      	lsrs	r3, r0, #12
    1764:	428b      	cmp	r3, r1
    1766:	d328      	bcc.n	17ba <__divsi3+0x72>
    1768:	0c03      	lsrs	r3, r0, #16
    176a:	428b      	cmp	r3, r1
    176c:	d30d      	bcc.n	178a <__divsi3+0x42>
    176e:	22ff      	movs	r2, #255	; 0xff
    1770:	0209      	lsls	r1, r1, #8
    1772:	ba12      	rev	r2, r2
    1774:	0c03      	lsrs	r3, r0, #16
    1776:	428b      	cmp	r3, r1
    1778:	d302      	bcc.n	1780 <__divsi3+0x38>
    177a:	1212      	asrs	r2, r2, #8
    177c:	0209      	lsls	r1, r1, #8
    177e:	d065      	beq.n	184c <__divsi3+0x104>
    1780:	0b03      	lsrs	r3, r0, #12
    1782:	428b      	cmp	r3, r1
    1784:	d319      	bcc.n	17ba <__divsi3+0x72>
    1786:	e000      	b.n	178a <__divsi3+0x42>
    1788:	0a09      	lsrs	r1, r1, #8
    178a:	0bc3      	lsrs	r3, r0, #15
    178c:	428b      	cmp	r3, r1
    178e:	d301      	bcc.n	1794 <__divsi3+0x4c>
    1790:	03cb      	lsls	r3, r1, #15
    1792:	1ac0      	subs	r0, r0, r3
    1794:	4152      	adcs	r2, r2
    1796:	0b83      	lsrs	r3, r0, #14
    1798:	428b      	cmp	r3, r1
    179a:	d301      	bcc.n	17a0 <__divsi3+0x58>
    179c:	038b      	lsls	r3, r1, #14
    179e:	1ac0      	subs	r0, r0, r3
    17a0:	4152      	adcs	r2, r2
    17a2:	0b43      	lsrs	r3, r0, #13
    17a4:	428b      	cmp	r3, r1
    17a6:	d301      	bcc.n	17ac <__divsi3+0x64>
    17a8:	034b      	lsls	r3, r1, #13
    17aa:	1ac0      	subs	r0, r0, r3
    17ac:	4152      	adcs	r2, r2
    17ae:	0b03      	lsrs	r3, r0, #12
    17b0:	428b      	cmp	r3, r1
    17b2:	d301      	bcc.n	17b8 <__divsi3+0x70>
    17b4:	030b      	lsls	r3, r1, #12
    17b6:	1ac0      	subs	r0, r0, r3
    17b8:	4152      	adcs	r2, r2
    17ba:	0ac3      	lsrs	r3, r0, #11
    17bc:	428b      	cmp	r3, r1
    17be:	d301      	bcc.n	17c4 <__divsi3+0x7c>
    17c0:	02cb      	lsls	r3, r1, #11
    17c2:	1ac0      	subs	r0, r0, r3
    17c4:	4152      	adcs	r2, r2
    17c6:	0a83      	lsrs	r3, r0, #10
    17c8:	428b      	cmp	r3, r1
    17ca:	d301      	bcc.n	17d0 <__divsi3+0x88>
    17cc:	028b      	lsls	r3, r1, #10
    17ce:	1ac0      	subs	r0, r0, r3
    17d0:	4152      	adcs	r2, r2
    17d2:	0a43      	lsrs	r3, r0, #9
    17d4:	428b      	cmp	r3, r1
    17d6:	d301      	bcc.n	17dc <__divsi3+0x94>
    17d8:	024b      	lsls	r3, r1, #9
    17da:	1ac0      	subs	r0, r0, r3
    17dc:	4152      	adcs	r2, r2
    17de:	0a03      	lsrs	r3, r0, #8
    17e0:	428b      	cmp	r3, r1
    17e2:	d301      	bcc.n	17e8 <__divsi3+0xa0>
    17e4:	020b      	lsls	r3, r1, #8
    17e6:	1ac0      	subs	r0, r0, r3
    17e8:	4152      	adcs	r2, r2
    17ea:	d2cd      	bcs.n	1788 <__divsi3+0x40>
    17ec:	09c3      	lsrs	r3, r0, #7
    17ee:	428b      	cmp	r3, r1
    17f0:	d301      	bcc.n	17f6 <__divsi3+0xae>
    17f2:	01cb      	lsls	r3, r1, #7
    17f4:	1ac0      	subs	r0, r0, r3
    17f6:	4152      	adcs	r2, r2
    17f8:	0983      	lsrs	r3, r0, #6
    17fa:	428b      	cmp	r3, r1
    17fc:	d301      	bcc.n	1802 <__divsi3+0xba>
    17fe:	018b      	lsls	r3, r1, #6
    1800:	1ac0      	subs	r0, r0, r3
    1802:	4152      	adcs	r2, r2
    1804:	0943      	lsrs	r3, r0, #5
    1806:	428b      	cmp	r3, r1
    1808:	d301      	bcc.n	180e <__divsi3+0xc6>
    180a:	014b      	lsls	r3, r1, #5
    180c:	1ac0      	subs	r0, r0, r3
    180e:	4152      	adcs	r2, r2
    1810:	0903      	lsrs	r3, r0, #4
    1812:	428b      	cmp	r3, r1
    1814:	d301      	bcc.n	181a <__divsi3+0xd2>
    1816:	010b      	lsls	r3, r1, #4
    1818:	1ac0      	subs	r0, r0, r3
    181a:	4152      	adcs	r2, r2
    181c:	08c3      	lsrs	r3, r0, #3
    181e:	428b      	cmp	r3, r1
    1820:	d301      	bcc.n	1826 <__divsi3+0xde>
    1822:	00cb      	lsls	r3, r1, #3
    1824:	1ac0      	subs	r0, r0, r3
    1826:	4152      	adcs	r2, r2
    1828:	0883      	lsrs	r3, r0, #2
    182a:	428b      	cmp	r3, r1
    182c:	d301      	bcc.n	1832 <__divsi3+0xea>
    182e:	008b      	lsls	r3, r1, #2
    1830:	1ac0      	subs	r0, r0, r3
    1832:	4152      	adcs	r2, r2
    1834:	0843      	lsrs	r3, r0, #1
    1836:	428b      	cmp	r3, r1
    1838:	d301      	bcc.n	183e <__divsi3+0xf6>
    183a:	004b      	lsls	r3, r1, #1
    183c:	1ac0      	subs	r0, r0, r3
    183e:	4152      	adcs	r2, r2
    1840:	1a41      	subs	r1, r0, r1
    1842:	d200      	bcs.n	1846 <__divsi3+0xfe>
    1844:	4601      	mov	r1, r0
    1846:	4152      	adcs	r2, r2
    1848:	4610      	mov	r0, r2
    184a:	4770      	bx	lr
    184c:	e05d      	b.n	190a <__divsi3+0x1c2>
    184e:	0fca      	lsrs	r2, r1, #31
    1850:	d000      	beq.n	1854 <__divsi3+0x10c>
    1852:	4249      	negs	r1, r1
    1854:	1003      	asrs	r3, r0, #32
    1856:	d300      	bcc.n	185a <__divsi3+0x112>
    1858:	4240      	negs	r0, r0
    185a:	4053      	eors	r3, r2
    185c:	2200      	movs	r2, #0
    185e:	469c      	mov	ip, r3
    1860:	0903      	lsrs	r3, r0, #4
    1862:	428b      	cmp	r3, r1
    1864:	d32d      	bcc.n	18c2 <__divsi3+0x17a>
    1866:	0a03      	lsrs	r3, r0, #8
    1868:	428b      	cmp	r3, r1
    186a:	d312      	bcc.n	1892 <__divsi3+0x14a>
    186c:	22fc      	movs	r2, #252	; 0xfc
    186e:	0189      	lsls	r1, r1, #6
    1870:	ba12      	rev	r2, r2
    1872:	0a03      	lsrs	r3, r0, #8
    1874:	428b      	cmp	r3, r1
    1876:	d30c      	bcc.n	1892 <__divsi3+0x14a>
    1878:	0189      	lsls	r1, r1, #6
    187a:	1192      	asrs	r2, r2, #6
    187c:	428b      	cmp	r3, r1
    187e:	d308      	bcc.n	1892 <__divsi3+0x14a>
    1880:	0189      	lsls	r1, r1, #6
    1882:	1192      	asrs	r2, r2, #6
    1884:	428b      	cmp	r3, r1
    1886:	d304      	bcc.n	1892 <__divsi3+0x14a>
    1888:	0189      	lsls	r1, r1, #6
    188a:	d03a      	beq.n	1902 <__divsi3+0x1ba>
    188c:	1192      	asrs	r2, r2, #6
    188e:	e000      	b.n	1892 <__divsi3+0x14a>
    1890:	0989      	lsrs	r1, r1, #6
    1892:	09c3      	lsrs	r3, r0, #7
    1894:	428b      	cmp	r3, r1
    1896:	d301      	bcc.n	189c <__divsi3+0x154>
    1898:	01cb      	lsls	r3, r1, #7
    189a:	1ac0      	subs	r0, r0, r3
    189c:	4152      	adcs	r2, r2
    189e:	0983      	lsrs	r3, r0, #6
    18a0:	428b      	cmp	r3, r1
    18a2:	d301      	bcc.n	18a8 <__divsi3+0x160>
    18a4:	018b      	lsls	r3, r1, #6
    18a6:	1ac0      	subs	r0, r0, r3
    18a8:	4152      	adcs	r2, r2
    18aa:	0943      	lsrs	r3, r0, #5
    18ac:	428b      	cmp	r3, r1
    18ae:	d301      	bcc.n	18b4 <__divsi3+0x16c>
    18b0:	014b      	lsls	r3, r1, #5
    18b2:	1ac0      	subs	r0, r0, r3
    18b4:	4152      	adcs	r2, r2
    18b6:	0903      	lsrs	r3, r0, #4
    18b8:	428b      	cmp	r3, r1
    18ba:	d301      	bcc.n	18c0 <__divsi3+0x178>
    18bc:	010b      	lsls	r3, r1, #4
    18be:	1ac0      	subs	r0, r0, r3
    18c0:	4152      	adcs	r2, r2
    18c2:	08c3      	lsrs	r3, r0, #3
    18c4:	428b      	cmp	r3, r1
    18c6:	d301      	bcc.n	18cc <__divsi3+0x184>
    18c8:	00cb      	lsls	r3, r1, #3
    18ca:	1ac0      	subs	r0, r0, r3
    18cc:	4152      	adcs	r2, r2
    18ce:	0883      	lsrs	r3, r0, #2
    18d0:	428b      	cmp	r3, r1
    18d2:	d301      	bcc.n	18d8 <__divsi3+0x190>
    18d4:	008b      	lsls	r3, r1, #2
    18d6:	1ac0      	subs	r0, r0, r3
    18d8:	4152      	adcs	r2, r2
    18da:	d2d9      	bcs.n	1890 <__divsi3+0x148>
    18dc:	0843      	lsrs	r3, r0, #1
    18de:	428b      	cmp	r3, r1
    18e0:	d301      	bcc.n	18e6 <__divsi3+0x19e>
    18e2:	004b      	lsls	r3, r1, #1
    18e4:	1ac0      	subs	r0, r0, r3
    18e6:	4152      	adcs	r2, r2
    18e8:	1a41      	subs	r1, r0, r1
    18ea:	d200      	bcs.n	18ee <__divsi3+0x1a6>
    18ec:	4601      	mov	r1, r0
    18ee:	4663      	mov	r3, ip
    18f0:	4152      	adcs	r2, r2
    18f2:	105b      	asrs	r3, r3, #1
    18f4:	4610      	mov	r0, r2
    18f6:	d301      	bcc.n	18fc <__divsi3+0x1b4>
    18f8:	4240      	negs	r0, r0
    18fa:	2b00      	cmp	r3, #0
    18fc:	d500      	bpl.n	1900 <__divsi3+0x1b8>
    18fe:	4249      	negs	r1, r1
    1900:	4770      	bx	lr
    1902:	4663      	mov	r3, ip
    1904:	105b      	asrs	r3, r3, #1
    1906:	d300      	bcc.n	190a <__divsi3+0x1c2>
    1908:	4240      	negs	r0, r0
    190a:	b501      	push	{r0, lr}
    190c:	2000      	movs	r0, #0
    190e:	f000 f805 	bl	191c <__aeabi_idiv0>
    1912:	bd02      	pop	{r1, pc}

00001914 <__aeabi_idivmod>:
    1914:	2900      	cmp	r1, #0
    1916:	d0f8      	beq.n	190a <__divsi3+0x1c2>
    1918:	e716      	b.n	1748 <__divsi3>
    191a:	4770      	bx	lr

0000191c <__aeabi_idiv0>:
    191c:	4770      	bx	lr
    191e:	46c0      	nop			; (mov r8, r8)

00001920 <__cxa_atexit>:
    1920:	b510      	push	{r4, lr}
    1922:	0013      	movs	r3, r2
    1924:	000a      	movs	r2, r1
    1926:	0001      	movs	r1, r0
    1928:	2002      	movs	r0, #2
    192a:	f000 f825 	bl	1978 <__register_exitproc>
    192e:	bd10      	pop	{r4, pc}

00001930 <__libc_init_array>:
    1930:	b570      	push	{r4, r5, r6, lr}
    1932:	4e0d      	ldr	r6, [pc, #52]	; (1968 <__libc_init_array+0x38>)
    1934:	4d0d      	ldr	r5, [pc, #52]	; (196c <__libc_init_array+0x3c>)
    1936:	2400      	movs	r4, #0
    1938:	1bad      	subs	r5, r5, r6
    193a:	10ad      	asrs	r5, r5, #2
    193c:	d005      	beq.n	194a <__libc_init_array+0x1a>
    193e:	00a3      	lsls	r3, r4, #2
    1940:	58f3      	ldr	r3, [r6, r3]
    1942:	3401      	adds	r4, #1
    1944:	4798      	blx	r3
    1946:	42a5      	cmp	r5, r4
    1948:	d1f9      	bne.n	193e <__libc_init_array+0xe>
    194a:	f000 f8e9 	bl	1b20 <_init>
    194e:	4e08      	ldr	r6, [pc, #32]	; (1970 <__libc_init_array+0x40>)
    1950:	4d08      	ldr	r5, [pc, #32]	; (1974 <__libc_init_array+0x44>)
    1952:	2400      	movs	r4, #0
    1954:	1bad      	subs	r5, r5, r6
    1956:	10ad      	asrs	r5, r5, #2
    1958:	d005      	beq.n	1966 <__libc_init_array+0x36>
    195a:	00a3      	lsls	r3, r4, #2
    195c:	58f3      	ldr	r3, [r6, r3]
    195e:	3401      	adds	r4, #1
    1960:	4798      	blx	r3
    1962:	42a5      	cmp	r5, r4
    1964:	d1f9      	bne.n	195a <__libc_init_array+0x2a>
    1966:	bd70      	pop	{r4, r5, r6, pc}
    1968:	00001b2c 	.word	0x00001b2c
    196c:	00001b2c 	.word	0x00001b2c
    1970:	00001b2c 	.word	0x00001b2c
    1974:	00001b38 	.word	0x00001b38

00001978 <__register_exitproc>:
    1978:	b5f0      	push	{r4, r5, r6, r7, lr}
    197a:	464e      	mov	r6, r9
    197c:	4645      	mov	r5, r8
    197e:	46de      	mov	lr, fp
    1980:	4657      	mov	r7, sl
    1982:	b5e0      	push	{r5, r6, r7, lr}
    1984:	4d36      	ldr	r5, [pc, #216]	; (1a60 <__register_exitproc+0xe8>)
    1986:	b083      	sub	sp, #12
    1988:	0006      	movs	r6, r0
    198a:	6828      	ldr	r0, [r5, #0]
    198c:	4698      	mov	r8, r3
    198e:	000f      	movs	r7, r1
    1990:	4691      	mov	r9, r2
    1992:	f000 f899 	bl	1ac8 <__retarget_lock_acquire_recursive>
    1996:	4b33      	ldr	r3, [pc, #204]	; (1a64 <__register_exitproc+0xec>)
    1998:	681c      	ldr	r4, [r3, #0]
    199a:	23a4      	movs	r3, #164	; 0xa4
    199c:	005b      	lsls	r3, r3, #1
    199e:	58e0      	ldr	r0, [r4, r3]
    19a0:	2800      	cmp	r0, #0
    19a2:	d052      	beq.n	1a4a <__register_exitproc+0xd2>
    19a4:	6843      	ldr	r3, [r0, #4]
    19a6:	2b1f      	cmp	r3, #31
    19a8:	dc13      	bgt.n	19d2 <__register_exitproc+0x5a>
    19aa:	1c5a      	adds	r2, r3, #1
    19ac:	9201      	str	r2, [sp, #4]
    19ae:	2e00      	cmp	r6, #0
    19b0:	d128      	bne.n	1a04 <__register_exitproc+0x8c>
    19b2:	9a01      	ldr	r2, [sp, #4]
    19b4:	3302      	adds	r3, #2
    19b6:	009b      	lsls	r3, r3, #2
    19b8:	6042      	str	r2, [r0, #4]
    19ba:	501f      	str	r7, [r3, r0]
    19bc:	6828      	ldr	r0, [r5, #0]
    19be:	f000 f885 	bl	1acc <__retarget_lock_release_recursive>
    19c2:	2000      	movs	r0, #0
    19c4:	b003      	add	sp, #12
    19c6:	bc3c      	pop	{r2, r3, r4, r5}
    19c8:	4690      	mov	r8, r2
    19ca:	4699      	mov	r9, r3
    19cc:	46a2      	mov	sl, r4
    19ce:	46ab      	mov	fp, r5
    19d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19d2:	4b25      	ldr	r3, [pc, #148]	; (1a68 <__register_exitproc+0xf0>)
    19d4:	2b00      	cmp	r3, #0
    19d6:	d03d      	beq.n	1a54 <__register_exitproc+0xdc>
    19d8:	20c8      	movs	r0, #200	; 0xc8
    19da:	0040      	lsls	r0, r0, #1
    19dc:	e000      	b.n	19e0 <__register_exitproc+0x68>
    19de:	bf00      	nop
    19e0:	2800      	cmp	r0, #0
    19e2:	d037      	beq.n	1a54 <__register_exitproc+0xdc>
    19e4:	22a4      	movs	r2, #164	; 0xa4
    19e6:	2300      	movs	r3, #0
    19e8:	0052      	lsls	r2, r2, #1
    19ea:	58a1      	ldr	r1, [r4, r2]
    19ec:	6043      	str	r3, [r0, #4]
    19ee:	6001      	str	r1, [r0, #0]
    19f0:	50a0      	str	r0, [r4, r2]
    19f2:	3240      	adds	r2, #64	; 0x40
    19f4:	5083      	str	r3, [r0, r2]
    19f6:	3204      	adds	r2, #4
    19f8:	5083      	str	r3, [r0, r2]
    19fa:	3301      	adds	r3, #1
    19fc:	9301      	str	r3, [sp, #4]
    19fe:	2300      	movs	r3, #0
    1a00:	2e00      	cmp	r6, #0
    1a02:	d0d6      	beq.n	19b2 <__register_exitproc+0x3a>
    1a04:	009a      	lsls	r2, r3, #2
    1a06:	4692      	mov	sl, r2
    1a08:	4482      	add	sl, r0
    1a0a:	464a      	mov	r2, r9
    1a0c:	2188      	movs	r1, #136	; 0x88
    1a0e:	4654      	mov	r4, sl
    1a10:	5062      	str	r2, [r4, r1]
    1a12:	22c4      	movs	r2, #196	; 0xc4
    1a14:	0052      	lsls	r2, r2, #1
    1a16:	4691      	mov	r9, r2
    1a18:	4481      	add	r9, r0
    1a1a:	464a      	mov	r2, r9
    1a1c:	3987      	subs	r1, #135	; 0x87
    1a1e:	4099      	lsls	r1, r3
    1a20:	6812      	ldr	r2, [r2, #0]
    1a22:	468b      	mov	fp, r1
    1a24:	430a      	orrs	r2, r1
    1a26:	4694      	mov	ip, r2
    1a28:	464a      	mov	r2, r9
    1a2a:	4661      	mov	r1, ip
    1a2c:	6011      	str	r1, [r2, #0]
    1a2e:	2284      	movs	r2, #132	; 0x84
    1a30:	4641      	mov	r1, r8
    1a32:	0052      	lsls	r2, r2, #1
    1a34:	50a1      	str	r1, [r4, r2]
    1a36:	2e02      	cmp	r6, #2
    1a38:	d1bb      	bne.n	19b2 <__register_exitproc+0x3a>
    1a3a:	0002      	movs	r2, r0
    1a3c:	465c      	mov	r4, fp
    1a3e:	328d      	adds	r2, #141	; 0x8d
    1a40:	32ff      	adds	r2, #255	; 0xff
    1a42:	6811      	ldr	r1, [r2, #0]
    1a44:	430c      	orrs	r4, r1
    1a46:	6014      	str	r4, [r2, #0]
    1a48:	e7b3      	b.n	19b2 <__register_exitproc+0x3a>
    1a4a:	0020      	movs	r0, r4
    1a4c:	304d      	adds	r0, #77	; 0x4d
    1a4e:	30ff      	adds	r0, #255	; 0xff
    1a50:	50e0      	str	r0, [r4, r3]
    1a52:	e7a7      	b.n	19a4 <__register_exitproc+0x2c>
    1a54:	6828      	ldr	r0, [r5, #0]
    1a56:	f000 f839 	bl	1acc <__retarget_lock_release_recursive>
    1a5a:	2001      	movs	r0, #1
    1a5c:	4240      	negs	r0, r0
    1a5e:	e7b1      	b.n	19c4 <__register_exitproc+0x4c>
    1a60:	20000440 	.word	0x20000440
    1a64:	00001b1c 	.word	0x00001b1c
    1a68:	00000000 	.word	0x00000000

00001a6c <register_fini>:
    1a6c:	4b03      	ldr	r3, [pc, #12]	; (1a7c <register_fini+0x10>)
    1a6e:	b510      	push	{r4, lr}
    1a70:	2b00      	cmp	r3, #0
    1a72:	d002      	beq.n	1a7a <register_fini+0xe>
    1a74:	4802      	ldr	r0, [pc, #8]	; (1a80 <register_fini+0x14>)
    1a76:	f000 f805 	bl	1a84 <atexit>
    1a7a:	bd10      	pop	{r4, pc}
    1a7c:	00000000 	.word	0x00000000
    1a80:	00001a95 	.word	0x00001a95

00001a84 <atexit>:
    1a84:	b510      	push	{r4, lr}
    1a86:	0001      	movs	r1, r0
    1a88:	2300      	movs	r3, #0
    1a8a:	2200      	movs	r2, #0
    1a8c:	2000      	movs	r0, #0
    1a8e:	f7ff ff73 	bl	1978 <__register_exitproc>
    1a92:	bd10      	pop	{r4, pc}

00001a94 <__libc_fini_array>:
    1a94:	b570      	push	{r4, r5, r6, lr}
    1a96:	4b09      	ldr	r3, [pc, #36]	; (1abc <__libc_fini_array+0x28>)
    1a98:	4c09      	ldr	r4, [pc, #36]	; (1ac0 <__libc_fini_array+0x2c>)
    1a9a:	1ae4      	subs	r4, r4, r3
    1a9c:	10a4      	asrs	r4, r4, #2
    1a9e:	d009      	beq.n	1ab4 <__libc_fini_array+0x20>
    1aa0:	4a08      	ldr	r2, [pc, #32]	; (1ac4 <__libc_fini_array+0x30>)
    1aa2:	18a5      	adds	r5, r4, r2
    1aa4:	00ad      	lsls	r5, r5, #2
    1aa6:	18ed      	adds	r5, r5, r3
    1aa8:	682b      	ldr	r3, [r5, #0]
    1aaa:	3c01      	subs	r4, #1
    1aac:	4798      	blx	r3
    1aae:	3d04      	subs	r5, #4
    1ab0:	2c00      	cmp	r4, #0
    1ab2:	d1f9      	bne.n	1aa8 <__libc_fini_array+0x14>
    1ab4:	f000 f840 	bl	1b38 <_fini>
    1ab8:	bd70      	pop	{r4, r5, r6, pc}
    1aba:	46c0      	nop			; (mov r8, r8)
    1abc:	00001b44 	.word	0x00001b44
    1ac0:	00001b48 	.word	0x00001b48
    1ac4:	3fffffff 	.word	0x3fffffff

00001ac8 <__retarget_lock_acquire_recursive>:
    1ac8:	4770      	bx	lr
    1aca:	46c0      	nop			; (mov r8, r8)

00001acc <__retarget_lock_release_recursive>:
    1acc:	4770      	bx	lr
    1ace:	46c0      	nop			; (mov r8, r8)
    1ad0:	000f00ff 	.word	0x000f00ff
    1ad4:	00000e2a 	.word	0x00000e2a
    1ad8:	00000e26 	.word	0x00000e26
    1adc:	00000e26 	.word	0x00000e26
    1ae0:	00000e8c 	.word	0x00000e8c
    1ae4:	00000e8c 	.word	0x00000e8c
    1ae8:	00000e3e 	.word	0x00000e3e
    1aec:	00000e30 	.word	0x00000e30
    1af0:	00000e44 	.word	0x00000e44
    1af4:	00000e7a 	.word	0x00000e7a
    1af8:	00001010 	.word	0x00001010
    1afc:	00000ff0 	.word	0x00000ff0
    1b00:	00000ff0 	.word	0x00000ff0
    1b04:	0000107c 	.word	0x0000107c
    1b08:	00001002 	.word	0x00001002
    1b0c:	0000101e 	.word	0x0000101e
    1b10:	00000ff4 	.word	0x00000ff4
    1b14:	0000102c 	.word	0x0000102c
    1b18:	0000106c 	.word	0x0000106c

00001b1c <_global_impure_ptr>:
    1b1c:	20000018                                ... 

00001b20 <_init>:
    1b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b22:	46c0      	nop			; (mov r8, r8)
    1b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1b26:	bc08      	pop	{r3}
    1b28:	469e      	mov	lr, r3
    1b2a:	4770      	bx	lr

00001b2c <__init_array_start>:
    1b2c:	00001a6d 	.word	0x00001a6d

00001b30 <__frame_dummy_init_array_entry>:
    1b30:	000000b5 000005a9                       ........

00001b38 <_fini>:
    1b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b3a:	46c0      	nop			; (mov r8, r8)
    1b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1b3e:	bc08      	pop	{r3}
    1b40:	469e      	mov	lr, r3
    1b42:	4770      	bx	lr

00001b44 <__fini_array_start>:
    1b44:	0000008d 	.word	0x0000008d
